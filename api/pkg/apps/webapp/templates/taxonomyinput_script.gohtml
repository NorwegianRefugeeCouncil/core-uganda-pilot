{{define "taxonomyinput_script"}}

    <script>
      // since this is a component and it can be used multiple times on the same page, collisions are possible
      // adding the code to an anonymous function such as the event listener below effectively creates a new
      // namespace, provided variables and functions are declared using the const keyword.
      document.addEventListener('DOMContentLoaded', (event) => {
        const taxonomy = {
          'ICLA': {
            'Counselling': {
              'Legal Identity': {},
              'Refugee Status, Migration, and Residency': {},
              'Housing, Land and Property': {},
              'Employment Laws and Procedures': {},
              'IDP Registration': {}
            },
            'Information': {
              'Legal Identity': {},
              'Refugee Status, Migration, and Residency': {},
              'Housing, Land and Property': {},
              'Employment Laws and Procedures': {},
              'IDP Registration': {},
              'Essential Services': {}
            },
            'Legal Assistance': {
              'Legal Identity': {},
              'Refugee Status, Migration, and Residency': {},
              'Housing, Land and Property': {},
              'Employment Laws and Procedures': {},
              'IDP Registration': {},
              'Essential Services': {}
            },
            'Training': {
              'Legal Identity': {},
              'Refugee Status, Migration, and Residency': {},
              'Housing, Land and Property': {},
              'Employment Laws and Procedures': {},
              'IDP Registration': {},
              'Essential Services': {},
              'Other': {}
            }
          },
          'Protection': {
            'Individual Targeted Protection': {
              'Individual Protection Assistance': {},
              'Protection Case Management': {}
            },
            'Community Support': {
              'Community Protection Assistance': {}
            }
          }
        };

        const programmeAreaSelect = document.getElementById("programme-area-{{.Attributes.ID}}");
        const serviceAreaSelect = document.getElementById("service-area-{{.Attributes.ID}}");
        const thematicAreaSelect = document.getElementById("thematic-area-{{.Attributes.ID}}");

        const badgeContainer = document.getElementById("badge-container-{{.Attributes.ID}}");
        const addBadgeButton = document.getElementById("btn-add-{{.Attributes.ID}}");
        const clearBadgesButton = document.getElementById("btn-clear-{{.Attributes.ID}}");

        const valueContainer = document.getElementById("{{.Attributes.ID}}");

        // remove all the options from a select element
        const clearSelectOptions = (selectId) => {
          document.getElementById(selectId).innerHTML = '';
        };

        // create a new select option element
        const createSelectOption = (value, label) => {
          const option = document.createElement('option');
          option.value = value;
          option.text = label;
          return option;
        };

        // get the value selected of a select
        const getSelected = (selectId) => {
          return document.getElementById(selectId).value;
        };

        // helper function to remove value from value container
        const removeValue = (label) => {
          const oldValues = valueContainer.value.split('|');
          const newValues = [];
          oldValues.forEach(oldValue => {
            if (oldValue !== label) {
              newValues.push(oldValue);
            }
          });
          valueContainer.value = newValues.join('|');
        };

        // helper function to remove badge
        const removeBadge = (label) => {
          const oldBadges = Array.from(badgeContainer.children);
          badgeContainer.innerHTML = '';
          oldBadges.forEach(oldBadge => {
            if (oldBadge.textContent !== label) {
              badgeContainer.appendChild(oldBadge);
            }
          });
        };

        // helper function to remove badge and value by label
        const removeBadgeAndValue = (label) => {
          removeBadge(label);
          removeValue(label);
        };

        // build a badge element
        const buildBadge = (label) => {
          const badge = document.createElement('span');
          const classesToAdd = [
            'badge',
            'rounded-pill',
            'bg-secondary',
            'taxonomy-badge'
          ];
          classesToAdd.forEach(classToAdd => badge.classList.add(classToAdd));
          badge.textContent = label;
          badge.addEventListener('click', (event) => {
            removeBadgeAndValue(label);
          });
          badge.addEventListener('mouseover', (event) => {
            badge.classList.remove('bg-secondary');
            badge.classList.add('bg-danger');
          });
          badge.addEventListener('mouseout', (event) => {
            badge.classList.remove('bg-danger');
            badge.classList.add('bg-secondary');
          });
          return badge;
        };

        // initially populate badge container
          {{if .Attributes.Value}}
        const initialValue = "{{index .Attributes.Value 0}}";
        initialValue.split('|').forEach(badgeContent => {
          badgeContainer.appendChild(buildBadge(badgeContent));
        });
          {{end}}

        Object.keys(taxonomy).forEach(programmeArea => {
          programmeAreaSelect.appendChild(createSelectOption(programmeArea, programmeArea));
        });

        programmeAreaSelect.selectedIndex = -1;

        programmeAreaSelect.addEventListener('change', (event) => {
          const programmeArea = getSelected("programme-area-{{.Attributes.ID}}");

          clearSelectOptions("service-area-{{.Attributes.ID}}");
          clearSelectOptions("thematic-area-{{.Attributes.ID}}");

          if (
            programmeArea !== null &&
            programmeArea !== undefined &&
            programmeArea !== ''
          ) {
            Object.keys(taxonomy[programmeArea]).forEach(serviceArea => {
              serviceAreaSelect.appendChild(createSelectOption(serviceArea, serviceArea));
            });
          }

          serviceAreaSelect.selectedIndex = -1;
          thematicAreaSelect.selectedIndex = -1;
        });

        serviceAreaSelect.addEventListener('change', (event) => {
          const programmeArea = getSelected("programme-area-{{.Attributes.ID}}");
          const serviceArea = getSelected("service-area-{{.Attributes.ID}}");

          clearSelectOptions("thematic-area-{{.Attributes.ID}}");

          if (
            programmeArea !== null &&
            programmeArea !== undefined &&
            programmeArea !== '' &&
            serviceArea !== null &&
            serviceArea !== undefined &&
            serviceArea !== ''
          ) {
            Object.keys(taxonomy[programmeArea][serviceArea]).forEach(thematicArea => {
              thematicAreaSelect.appendChild(createSelectOption(thematicArea, thematicArea));
            });
          }

          thematicAreaSelect.selectedIndex = -1;

        });

        addBadgeButton.addEventListener('click', (event) => {

          const programmeArea = getSelected("programme-area-{{.Attributes.ID}}");
          const serviceArea = getSelected("service-area-{{.Attributes.ID}}");
          const thematicArea = getSelected("thematic-area-{{.Attributes.ID}}");

          let label = '';

          if (
            programmeArea !== '' &&
            programmeArea !== null &&
            programmeArea !== undefined
          ) {

            label = `${programmeArea}`;

            if (
              serviceArea !== '' &&
              serviceArea !== null &&
              serviceArea !== undefined
            ) {

              label = `${label} - ${serviceArea}`;

              if (
                thematicArea !== '' &&
                thematicArea !== null &&
                thematicArea !== undefined
              ) {

                label = `${label} - ${thematicArea}`;

              }

            }

            if (!valueContainer.value.includes(label)) {
              const badge = buildBadge(label);
              badgeContainer.appendChild(badge);

              if (valueContainer.value === '') {
                valueContainer.value = `${label}`;
              } else {
                valueContainer.value = `${valueContainer.value}|${label}`;
              }
            }

            programmeAreaSelect.selectedIndex = -1;
            serviceAreaSelect.selectedIndex = -1;
            thematicAreaSelect.selectedIndex = -1;

          }


        });

        clearBadgesButton.addEventListener('click', (event) => {
          badgeContainer.innerHTML = '';
          valueContainer.value = '';
        });

      }, false);
    </script>

{{end}}