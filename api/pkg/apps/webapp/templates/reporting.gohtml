{{define "reporting"}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <link href="https://cdn.webdatarocks.com/1.3.1/webdatarocks.min.css" rel="stylesheet" />

    <style>
        .attribute {
            transition: all ease-in-out 0.2s;
        }

        .attribute:hover {
            box-shadow: 0 .125rem .25rem rgba(11, 94, 215, 0.2) !important;
            border-color: rgba(13, 110, 253, 1);
        }

        #chartContainer {
            margin-top: 30px;
            width: 100%;
            height: 500px;
        }
    </style>


    <body class="bg-light">

    {{template "navbar"}}

    <div class="container mt-4">
        <div class="row">
            <div id="pivotContainer"></div>
            <div id="chartContainer"></div>
        </div>
    </div>

    <script src="https://cdn.webdatarocks.com/1.3.1/webdatarocks.toolbar.min.js"></script>
    <script src="https://cdn.webdatarocks.com/1.3.1/webdatarocks.js"></script>
    <script src="https://cdn.webdatarocks.com/1.3.1/webdatarocks.amcharts.js"></script>
    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

    <script>
        const parseData = (individuals, cases, caseTypes) => {

            // create a map of caseTypeId => name
            const caseTypeLabelMap = {}
            caseTypes.forEach(caseType => {
                caseTypeLabelMap[caseType["id"]] = caseType["name"]
            })

            const returnData = [];
            individuals.forEach(individual => {
                if (individual['partyTypeIds'].includes("{{.BeneficiaryPartyTypeID}}")) {

                    let openCases = 0
                    let closedCases = 0

                    cases.forEach(kase => {
                        if (kase["partyId"] === individual["id"]) {
                            if (kase['done']) {
                                closedCases++
                            } else {
                                openCases++
                            }
                        }
                    })

                    returnData.push({
                        id: individual["id"],
                        displacementStatus: individual['attributes']["{{.DisplacementStatusAttributeID}}"][0],
                        gender: individual['attributes']["{{.GenderAttributeID}}"][0],
                        birthDate: individual['attributes']["{{.BirthDateAttributeID}}"][0],
                        openCases: openCases,
                        closedCases: closedCases,
                    });
                }
            });
            return returnData;
        };
        var pivot = new WebDataRocks({
            container: '#pivotContainer',
            toolbar: true,
            height: 580,
            width: '100%',
            report: {
                'dataSource': {
                    'dataSourceType': 'json',
                    'data': parseData({{.Individuals.Items}}, {{.Cases.Items}}, {{.CaseTypes.Items}}),
                },
                'options': {
                    'grid': {
                        'title': 'Beneficiary Pivot Table'
                    }
                },
                "slice": {
                    "rows": [
                        {
                            "uniqueName": "gender"
                        }
                    ],
                    "columns": [
                        {
                            "uniqueName": "Measures"
                        }
                    ],
                    "measures": [
                        {
                            "uniqueName": "closedCases",
                            "aggregation": "sum"
                        }
                    ]
                },
            },
            reportcomplete: function() {
                createPieChart();
            },
        });
        var chart
        function createPieChart() {
            /* Get all the data from the pivot grid (alternatively, a slice can be passed to getData() as the first argument) */
            pivot.amcharts.getData({}, drawChart, updateChart);
        }

        function drawChart(chartData, rawData) {
            /* Apply amCharts theme */
            am4core.useTheme(am4themes_animated);

            /* Create chart instance */
            chart = am4core.create("chartContainer", am4charts.PieChart);

            /* Add data processed by WebDataRocks to the chart */
            chart.data = chartData.data;
            var numberFormat = pivot.amcharts.getNumberFormatPattern(rawData.meta.formats[0]);

            /* Apply number formatting to the chart */
            chart.numberFormatter.numberFormat = numberFormat;

            /* Create and configure series for a pie chart */
            var pieSeries = chart.series.push(new am4charts.PieSeries());
            pieSeries.dataFields.category = pivot.amcharts.getCategoryName(rawData);
            pieSeries.dataFields.value = pivot.amcharts.getMeasureNameByIndex(rawData, 0);
            pieSeries.slices.template.stroke = am4core.color("#fff");
            pieSeries.slices.template.strokeWidth = 2;
            pieSeries.slices.template.strokeOpacity = 1;

            /* Create initial animation */
            pieSeries.hiddenState.properties.opacity = 1;
            pieSeries.hiddenState.properties.endAngle = -90;
            pieSeries.hiddenState.properties.startAngle = -90;
        }

        function updateChart(chartData, rawData) {
            chart.dispose();
            drawChart(chartData, rawData);
        }
    </script>

    </body>
    </html>
{{end}}
