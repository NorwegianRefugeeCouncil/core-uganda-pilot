{{define "formelement"}}
    {{if eq .Type "dropdown"}}
        <div class="form-floating mb-3">
            <select id="{{.Attributes.ID}}"
                    name="{{.Attributes.ID}}"
                    class="form-select"
                    aria-label="Default select example"
                    {{if .Attributes.Multiple}}multiple{{end}}
                    {{if .Validation.Required}}required{{end}}>
                <option value=""></option>
                {{range $i, $_ := .Attributes.Options}}{{$istr := printf "%d" $i}}
                <option
                        value="{{$i}}"
                        {{range $v := $.Attributes.Value }}{{if eq $istr $v}}selected{{end}}{{end}}
                >
                    {{.}}
                </option>
                {{end}}
            </select>
            <label class="form-label" for="{{.Attributes.ID}}">{{.Attributes.Label}}</label>
            <div class="form-text">{{.Attributes.Description}}</div>
        </div>
    {{else if eq .Type "checkbox"}}
        <h5>{{.Attributes.Label}}</h5>
        <div class="form-text">{{.Attributes.Description}}</div>
        {{range $i, $_ := .Attributes.CheckboxOptions}}{{$istr := printf "%d" $i}}
        <div class="form-check mb-3">
            <input id="{{$.Attributes.ID}}[{{$i}}]"
                   name="{{$.Attributes.ID}}"
                   value="{{$i}}"
                   class="form-check-input"
                   type="checkbox"
                   {{if .Required}}required{{end}}
                    {{range $v := $.Attributes.Value }}{{if eq $istr $v}}checked{{end}}{{end}}
            >
            <label for="{{$.Attributes.ID}}[{{$i}}]" class="form-check-label">{{.Label}}</label>
        </div>
        {{end}}
    {{else if eq .Type "textarea"}}
        <div class="form-floating mb-3">
            <textarea id="{{.Attributes.ID}}"
                      name="{{.Attributes.ID}}"
                      class="form-control"
                      style="height: 150px"
                      data-testid="form"
                      placeholder="{{.Attributes.Placeholder}}"
                      {{if .Validation.Required}}required{{end}}>{{if .Attributes.Value}}{{index .Attributes.Value 0}}{{end}}</textarea>
            <label for="{{.Attributes.ID}}">{{.Attributes.Label}}</label>
            <div class="form-text">{{.Attributes.Description}}</div>
        </div>
    {{else if eq .Type "textinput"}}
        <div class="form-floating mb-3">
            <input id="{{.Attributes.ID}}"
                   name="{{.Attributes.ID}}"
                   value="{{if .Attributes.Value}}{{index .Attributes.Value 0}}{{end}}"
                   class="form-control"
                   type="text"
                   placeholder="{{.Attributes.Placeholder}}"
                   {{if .Validation.Required}}required{{end}}>
            <label for="{{.Attributes.ID}}">{{.Attributes.Label}}</label>
            <div class="form-text">{{.Attributes.Description}}</div>
        </div>
    {{else if eq .Type "taxonomyinput"}}
        <div class="card mb-4">
            <div class="card-body">
                <span>{{.Attributes.Label}}</span>
                <p class="form-text">{{.Attributes.Description}}</p>
                <div class="form-floating mb-3">
                    <select id="programme-area-{{.Attributes.ID}}" class="form-select">
                    </select>
                    <label for="programme-area-{{.Attributes.ID}}">Programme Area</label>
                </div>

                <div class="form-floating mb-3">
                    <select id="service-area-{{.Attributes.ID}}" class="form-select">
                    </select>
                    <label for="service-area-{{.Attributes.ID}}">Service Area</label>

                </div>

                <div class="form-floating mb-3">
                    <select id="thematic-area-{{.Attributes.ID}}" class="form-select">
                    </select>
                    <label for="thematic-area-{{.Attributes.ID}}">Thematic Area</label>

                </div>

                <div id="button-container-{{.Attributes.ID}}" class="form-floating mb-3">
                    <button id="btn-add-{{.Attributes.ID}}" type="button" class="btn btn-primary">Add</button>
                    <button id="btn-clear-{{.Attributes.ID}}" type="button" class="btn btn-primary">Clear</button>
                </div>

                <div id="badge-container-{{.Attributes.ID}}" class="form-floating mb-3"></div>

                <input id="{{.Attributes.ID}}"
                       name="{{.Attributes.ID}}"
                       value="{{if .Attributes.Value}}{{index .Attributes.Value 0}}{{end}}"
                       type="hidden"
                       placeholder="{{.Attributes.Placeholder}}"
                       {{if .Validation.Required}}required{{end}}>

            </div>
        </div>

        <script>
          // since this is a component and it can be used multiple times on the same page, collisions are possible
          // adding the code to an anonymous function such as the event listener below effectively creates a new
          // namespace, provided variables and functions are declared using the const keyword.
          document.addEventListener('DOMContentLoaded', (event) => {
            const taxonomy = {
              "ICLA": {
                "Counselling": {
                  "Legal Identity": {},
                  "Refugee Status, Migration, and Residency": {},
                  "Housing, Land and Property": {},
                  "Employment Laws and Procedures": {},
                  "IDP Registration": {}
                },
                "Information": {
                  "Legal Identity": {},
                  "Refugee Status, Migration, and Residency": {},
                  "Housing, Land and Property": {},
                  "Employment Laws and Procedures": {},
                  "IDP Registration": {},
                  "Essential Services": {}
                },
                "Legal Assistance": {
                  "Legal Identity": {},
                  "Refugee Status, Migration, and Residency": {},
                  "Housing, Land and Property": {},
                  "Employment Laws and Procedures": {},
                  "IDP Registration": {},
                  "Essential Services": {}
                },
                "Training": {
                  "Legal Identity": {},
                  "Refugee Status, Migration, and Residency": {},
                  "Housing, Land and Property": {},
                  "Employment Laws and Procedures": {},
                  "IDP Registration": {},
                  "Essential Services": {},
                  "Other": {}
                }
              },
              "Protection": {
                "Individual Targeted Protection": {
                  "Individual Protection Assistance": {},
                  "Protection Case Management": {}
                },
                "Community Support": {
                  "Community Protection Assistance": {}
                }
              }
            }

            // remove all the options from a select element
            const clearSelectOptions = (selectId) => {
              document.getElementById(selectId).innerHTML = "";
            }

            // create a new select option element
            const createSelectOption = (value, label) => {
              const option = document.createElement("option");
              option.value = value;
              option.text = label;
              return option
            }

            // get the value selected of a select
            const getSelected = (selectId) => {
              return document.getElementById(selectId).value
            }

            // build a badge element
            const buildBadge = (label) => {
              const badge = document.createElement("span")
              const classesToAdd = [
                "badge",
                "rounded-pill",
                "bg-secondary"
              ]
              classesToAdd.forEach(classToAdd => badge.classList.add(classToAdd))
              badge.textContent = label
              return badge
            }

            const programmeAreaSelect = document.getElementById("programme-area-{{.Attributes.ID}}")
            const serviceAreaSelect = document.getElementById("service-area-{{.Attributes.ID}}")
            const thematicAreaSelect = document.getElementById("thematic-area-{{.Attributes.ID}}")

            const badgeContainer = document.getElementById("badge-container-{{.Attributes.ID}}")
            const addBadgeButton = document.getElementById("btn-add-{{.Attributes.ID}}")
            const clearBadgesButton = document.getElementById("btn-clear-{{.Attributes.ID}}")

            const valueContainer = document.getElementById("{{.Attributes.ID}}")

            // initially populate badge container
            {{if .Attributes.Value}}
            const initialValue = "{{index .Attributes.Value 0}}"
            console.log(initialValue)
            initialValue.split("|").forEach(badgeContent => {
              badgeContainer.appendChild(buildBadge(badgeContent))
            })
            {{end}}

            Object.keys(taxonomy).forEach(programmeArea => {
              programmeAreaSelect.appendChild(createSelectOption(programmeArea, programmeArea))
            })

            programmeAreaSelect.selectedIndex = -1

            programmeAreaSelect.addEventListener('change', (event) => {
              const programmeArea = getSelected("programme-area-{{.Attributes.ID}}")

              clearSelectOptions("service-area-{{.Attributes.ID}}")
              clearSelectOptions("thematic-area-{{.Attributes.ID}}")

              if (
                programmeArea !== null &&
                programmeArea !== undefined &&
                programmeArea !== ""
              ) {
                Object.keys(taxonomy[programmeArea]).forEach(serviceArea => {
                  serviceAreaSelect.appendChild(createSelectOption(serviceArea, serviceArea))
                })
              }

              serviceAreaSelect.selectedIndex = -1
              thematicAreaSelect.selectedIndex = -1
            })

            serviceAreaSelect.addEventListener('change', (event) => {
              const programmeArea = getSelected("programme-area-{{.Attributes.ID}}")
              const serviceArea = getSelected("service-area-{{.Attributes.ID}}")

              clearSelectOptions("thematic-area-{{.Attributes.ID}}")

              if (
                programmeArea !== null &&
                programmeArea !== undefined &&
                programmeArea !== "" &&
                serviceArea !== null &&
                serviceArea !== undefined &&
                serviceArea !== ""
              ) {
                Object.keys(taxonomy[programmeArea][serviceArea]).forEach(thematicArea => {
                  thematicAreaSelect.appendChild(createSelectOption(thematicArea, thematicArea))
                })
              }

              thematicAreaSelect.selectedIndex = -1

            })

            addBadgeButton.addEventListener('click', (event) => {

              const programmeArea = getSelected("programme-area-{{.Attributes.ID}}")
              const serviceArea = getSelected("service-area-{{.Attributes.ID}}")
              const thematicArea = getSelected("thematic-area-{{.Attributes.ID}}")

              let label = ""

              if (
                programmeArea !== "" &&
                programmeArea !== null &&
                programmeArea !== undefined
              ) {

                label = `${programmeArea}`

                if (
                  serviceArea !== "" &&
                  serviceArea !== null &&
                  serviceArea !== undefined
                ) {

                  label = `${label} - ${serviceArea}`

                  if (
                    thematicArea !== "" &&
                    thematicArea !== null &&
                    thematicArea !== undefined
                  ) {

                    label = `${label} - ${thematicArea}`

                  }

                }

                const badge = buildBadge(label)
                badgeContainer.appendChild(badge)

                if (valueContainer.value === ""){
                  valueContainer.value = `${label}`
                } else {
                  valueContainer.value = `${valueContainer.value}|${label}`
                }

                console.log(valueContainer.value)

                programmeAreaSelect.selectedIndex = -1
                serviceAreaSelect.selectedIndex = -1
                thematicAreaSelect.selectedIndex = -1

              }


            })

            clearBadgesButton.addEventListener('click', (event) => {
              badgeContainer.innerHTML = ''
              valueContainer.value = ''
              console.log(valueContainer.value)
            })

          }, false);
        </script>
    {{end}}
{{end}}
