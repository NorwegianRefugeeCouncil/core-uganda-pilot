{{define "team"}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <body>

    {{template "navbar"}}

    <div class="container-fluid bg-quite-light border-bottom">
        <div class="container">
            <div class="row">
                <div class="col">
                    <div class="d-flex flex-row pt-3" style="height: 3.25rem">
                        <div><i class="bi bi-people"></i> <a href="/teams">Teams</a> / <b>{{.Team.Name}}</b></div>
                        <div class="flex-grow-1"></div>
                        <a href="" class="text-decoration-none text-dark border-primary border-bottom border-2 ps-3 pe-4">
                            <i class="bi bi-person-fill pe-2"></i> <b>Members</b>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-5">

        <div class="row">
            <div class="col">

                <div class="list-group ">
                    <div class="list-group-item bg-light py-3 d-flex align-items-center">
                        <b class="py-2">Members</b>
                        <div class="flex-grow-1"></div>
                        <div class="mx-2">
                            <input type="text"
                                   class="form-control dropdown-toggle"
                                   name="partySelector"
                                   id="partySelector"
                                   data-bs-toggle="dropdown"
                                   aria-expanded="false"/>

                            <ul class="dropdown-menu" id="partySelectorList" aria-labelledby="partySelector">
                            </ul>
                        </div>
                        <button id="btn-add" class="btn btn-outline-secondary">Add</button>
                    </div>
                    {{range .Members}}
                        <div class="list-group-item font-monospace py-3 bg-quite-light">
                            <i class="bi bi-person-fill"></i> {{.}}
                        </div>
                    {{end}}
                </div>
            </div>

        </div>
    </div>

    <script>
        let {Subject, BehaviorSubject, pipe, Observable} = rxjs;
        let {map, debounceTime, switchMap} = rxjs.operators;
        let {ajax} = rxjs.ajax;

        // Handles the search box for the parties dropdown
        let partySearchSubject = new Subject()
        let partySearch$ = partySearchSubject.asObservable().pipe(
            debounceTime(200),
            switchMap((searchParam) => {
                const searchParams = new URLSearchParams({
                    "partyTypeId": "{{.StaffPartyTypeId}}",
                    "searchParam": searchParam
                })
                const ajaxUrl = "/relationships/pickparty?" + searchParams.toString()
                return ajax(ajaxUrl)
            })
        )

        // Returns the value of the partySelector search box
        const getSearchParam = () => {
            const partySelector = document.getElementById("partySelector")
            return partySelector.textContent
        }

        // On document ready
        document.addEventListener('DOMContentLoaded', function () {
            // Add listener for party selector item click
            Array.from(document.getElementsByClassName('partySelectorItem')).forEach(e => {
                e.onclick = onPartyListItemClick
            })

            // Add listener for party search box
            document.getElementById("partySelector").oninput = (event) => {
                partySearchSubject.next(event.target.value)
            }

            // Party List Item click handler - sets the text box value used for searching to the selected item
            // from the dropdown
            const onPartyListItemClick = (event) => {
                document.getElementById("partySelector").value = event.target.textContent
                document.getElementById("partySelector").setAttribute("data-party-id", event.target.id)
            }

            // Get First Name from party attribute list, or return blank
            const firstNameFromAttrs = (attrs) => {
                let firstName = ""
                Object.keys(attrs).forEach(
                    k => {
                        if (k == "{{.FirstNameAttribute.ID}}") {
                            firstName = attrs[k]
                        }
                    }
                )
                return firstName
            }

            // Get Last Name from party attribute list, or return blank
            const lastNameFromAttrs = (attrs) => {
                let lastName = ""
                Object.keys(attrs).forEach(
                    k => {
                        if (k == "{{.LastNameAttribute.ID}}") {
                            lastName = attrs[k]
                        }
                    }
                )
                return lastName
            }

            // Handle party search responses
            partySearch$.subscribe(
                res => {
                    // update parties list
                    parties = []

                    let partySelectorList = document.getElementById("partySelectorList")
                    partySelectorList.innerHTML = ''
                    if (res.response.items.length > 0) {
                        res.response.items.forEach(party => {
                            let newListItem = document.createElement('li')
                            newListItem.classList.add('dropdown-item')
                            newListItem.classList.add('partySelectorItem')
                            newListItem.onclick = onPartyListItemClick
                            let displayText = `${lastNameFromAttrs(party.attributes)}, ${firstNameFromAttrs(party.attributes)}`
                            newListItem.appendChild(
                                document.createTextNode(displayText)
                            )
                            newListItem.setAttribute('id', party.id)
                            partySelectorList.appendChild(newListItem)

                            // append party to parties list
                            parties.push({
                                id: party.id,
                                name: displayText
                            })
                        })
                    } else {
                        // No Parties Found...
                        let newListItem = document.createElement('li')
                        newListItem.classList.add('dropdown-item')
                        newListItem.onclick = onPartyListItemClick
                        let displayText = `No Parties Found`
                        newListItem.appendChild(
                            document.createTextNode(displayText)
                        )
                        partySelectorList.appendChild(newListItem)
                    }
                },
                err => {
                    console.error("got error: ", err)
                }
            )
        })

        // Initial call to populate parties list
        partySearchSubject.next(getSearchParam())

    </script>

    </body>
    </html>
{{end}}
