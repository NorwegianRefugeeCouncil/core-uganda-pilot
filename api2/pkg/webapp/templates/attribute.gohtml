{{define "attribute"}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <body class="bg-light">

    {{template "navbar"}}

    <div class="container mt-4">
        <div class="row">
            <div class="col">

                <div class="card">
                    <div class="card-body">

                        <form action="/settings/attributes{{if .Attribute}}/{{.Attribute.ID}}{{end}}" method="post">

                            <input type="hidden" id="id-input" name="id">

                            <!-- Name -->
                            <div class="form-floating mb-3 shadow-sm font-monospace">
                                <input id="name-input"
                                       name="name"
                                       type="text"
                                       class="form-control"
                                       value=""
                                       placeholder="Name"
                                       data-cy="name"
                                >
                                <label for="name-input">Name</label>
                            </div>

                            <hr/>

                            <!-- Value Type -->
                            <div class="form-floating mb-3 shadow-sm">
                                <select id="value-type-input"
                                        name="valueType"
                                        class="form-select"
                                        data-cy="type"
                                >
                                    <option>String</option>
                                </select>
                                <label for="value-type-input">Value Type</label>
                            </div>

                            <!-- Subject Type -->
                            <div class="form-floating mb-3 shadow-sm">
                                <select id="subject-type-input"
                                        name="partyTypes"
                                        class="form-select"
                                        data-cy="subject"
                                >
                                    {{range .PartyTypes.Items}}
                                    <option value="{{.ID}}">{{.Name}}</option>
                                    {{end}}
                                </select>
                                <label for="subject-type-input">Subject Type</label>
                            </div>

                            <!-- Personally Identifiable Info -->
                            <div class="form-check form-switch mb-3">
                                <input id="is-pii-input"
                                       name="isPii"
                                       type="checkbox"
                                       class="form-check-input"
                                       data-cy="personal-info-chkbx"
                                       {{if .Attribute.IsPersonallyIdentifiableInfo}}checked{{end}}
                                >
                                <label class="form-check-label" for="is-pii-input">
                                    Is Personally Identifiable Information
                                </label>
                            </div>

                            <!-- Translations -->
                            <div class="card mb-3">
                                <div class="card-body pb-0">
                                    <h5 class="card-title">Translations</h5>
                                </div>
                                <div id="translations" class="list-group list-group-flush mt-2 border-bottom-0">
                                    <!-- Templated -->
                                </div>
                                <div id="language-picker-container" class="card-body border-top">
                                    <div class="form-floating shadow-sm">
                                        <select id="language-picker" class="form-select" data-cy="language">
                                            <!-- Templated -->
                                        </select>
                                        <label for="language-picker">Language</label>
                                    </div>
                                </div>
                            </div>

                            <button class="btn btn-primary">Save</button>

                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    </body>

    <script type="application/javascript">

        const {BehaviorSubject, combineLatest, fromEvent } = rxjs
        const {map} = rxjs.operators

        let languages = [
            {value: "en", name: "English"},
            {value: "fr", name: "French"}
        ]

        {{ if .Attribute }}
        let stateSubject = new BehaviorSubject({
            attribute: {
                name: "{{.Attribute.Name}}",
                valueType: "{{.Attribute.ValueType}}",
                partyTypeIds: "{{.Attribute.PartyTypeIDs}}",
                isPii: {{.Attribute.IsPersonallyIdentifiableInfo}},
                translations: [
                    {{range .Attribute.Translations}}
                    {
                        locale: "{{.Locale}}",
                        long: "{{.LongFormulation}}",
                        short: "{{.ShortFormulation}}",
                    },
                    {{end}}
                ]
            },
            partyTypes: [
                {{range .PartyTypes.Items}}
                {value: "{{.ID}}", name: "{{.Name}}"}
                {{end}}
            ]
        })
        {{else }}
        let stateSubject = new BehaviorSubject({
            attribute: {
                name: "",
                valueType: "",
                partyTypes: ["{{(index .PartyTypes.Items 0).ID}}"],
                isPii: false,
                translations: []
            },
            partyTypes: [
                {{range .PartyTypes.Items}}
                {value: "{{.ID}}", name: "{{.Name}}"},
                {{end}}
            ]
        })
        {{end}}

        let state$ = stateSubject.asObservable()
        let attribute$ = state$.pipe(map(s => s.attribute))
        let name$ = attribute$.pipe(map(a => a.name))
        let valueType$ = attribute$.pipe(map(a => a.valueType))
        let partyTypes = attribute$.pipe(map(a => a.partyTypes))
        let isPii$ = attribute$.pipe(map(a => a.isPii))
        let translations$ = attribute$.pipe(map(a => a.translations))
        let availableLanguages$ = translations$.pipe(
            map(translations => {
                return languages.filter(l => {
                    return !translations.find(t => t.locale === l.value)
                })
            })
        )


        const nameInput = document.getElementById("name-input");
        nameInput.onchange = event => {
            const state = {
                ...stateSubject.value,
                attribute: {
                    ...stateSubject.value.attribute,
                    name: event.target.value,
                }
            }
            stateSubject.next(state);
        }


        name$.subscribe(n => {
            document.getElementById("name-input").value = n
        })

        let removeTranslation = (locale) => {
            stateSubject.next({
                ...stateSubject.value,
                attribute: {
                    ...stateSubject.value.attribute,
                    translations: stateSubject.value.attribute.translations.filter(t => t.locale !== locale)
                }
            })
        }

        document.addEventListener("DOMContentLoaded", function () {
            let languagePicker = document.getElementById("language-picker")
            languagePicker.onchange = (ev) => {
                const state = {
                    ...stateSubject.value,
                    attribute: {
                        ...stateSubject.value.attribute,
                        translations: [
                            ...stateSubject.value.attribute.translations,
                            {
                                locale: ev.target.value,
                                long: "",
                                short: ""
                            }
                        ]
                    }
                }
                stateSubject.next(state)
            }

            availableLanguages$.subscribe(l => {
                languagePicker.innerHTML = ''
                languagePicker.appendChild(languageOptionTemplate("", ""))
                for (let language of l) {
                    languagePicker.appendChild(languageOptionTemplate(language.value, language.name))
                }
                let pickerContainer = document.getElementById("language-picker-container")
                if (l.length === 0) {
                    pickerContainer.classList.add("d-none")
                } else {
                    pickerContainer.classList.remove("d-none")
                }
            })

            translations$.subscribe(t => {
                let translations = document.getElementById("translations")
                translations.innerHTML = ''
                console.log(t)
                for (let translation of t) {
                    let tpl = translationTemplate(translation.locale, translation.long, translation.short)
                    translations.appendChild(tpl)
                }
            })

        });

        const languageOptionTemplate = (value, name) => {
            let option = `<option value="${value}">${name}</option>`
            return new DOMParser().parseFromString(option, "text/html").getElementsByTagName("option")[0]
        }

        const findLanguageName = (locale) => {
            let l = languages.find(l => l.value === locale)
            if (l) {
                return l.name
            }
        }

        function translationTemplate(language, long, short) {
            const doc = `
                <div class="list-group-item py-0">
                    <div class="d-flex flex-row align-items-center">
                        <div class="h-100 pe-3 text-center" style="width: 4.5rem">
                            ${findLanguageName(language)}
                        </div>
                        <div class="flex-grow-1 border-start ps-3 border-end pe-3">
                            <div class="py-3">
                                <div class="form-floating mb-3 shadow-sm">
                                    <input id="i81n-long-${language}"
                                           name="translations.${language}.long"
                                           class="form-control"
                                           type="text"
                                           value="${long}"
                                           placeholder="Long Description"
                                           data-cy="translation-long"
                                    >
                                    <label for="i81n-long-${language}">Long</label>
                                </div>

                                <div class="form-floating shadow-sm">
                                    <input id="i81n-short-${language}"
                                           name="translations.${language}.short"
                                           class="form-control"
                                           type="text"
                                           value="${short}"
                                           placeholder="Short Description"
                                           data-cy="translation-short"
                                    >
                                    <label for="i81n-short-${language}">Short</label>
                                </div>

                            </div>
                        </div>
                        <div class="h-100">
                            <button class="btn-close ms-3"
                                    type="button"
                                    onclick="removeTranslation('${language}')"/>
                        </div>
                    </div>
                </div>`
            return new DOMParser().parseFromString(doc, "text/html").getElementsByTagName("div")[0]
        }

    </script>

    </html>
{{end}}
