{{define "beneficiary"}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <body class="bg-light">

    {{template "navbar"}}

    <div class="container">
        <div class="row">
            <div class="col">
                <div class="mt-3">

                    <form action="/beneficiaries{{if .Beneficiary}}{{if .Beneficiary.ID}}/{{.Beneficiary.ID}}{{end}}{{end}}"
                          method="post">

                        <h4 class="display-6">Attributes</h4>

                        {{ range $index, $attribute := .Attributes.Items}}

                            {{ $values := index $.Beneficiary.Attributes $attribute.ID }}

                            {{range $idx, $value := $values}}

                                <div class="form-floating mb-3 shadow-sm">
                                    <input class="form-control"
                                           name="attribute[{{$attribute.ID}}]"
                                           id="attribute-{{$attribute.ID}}-{{$idx}}"
                                           type="text"
                                           value="{{$value}}"/>
                                    <label for="attribute-{{$attribute.ID}}-{{$idx}}">{{$attribute.Name}}</label>
                                </div>

                            {{end}}

                        {{end}}

                        <h4 class="display-6">Relationships</h4>

                        <div id='relationships-container'>
                            <ul id='relationships-list' class="list-group mb-3">
                                {{ range .Relationships.Items}}
                                    <li class="list-group-item">{{ .FirstParty }}{{ index $.RelationshipTypes .RelationshipTypeID }} {{ .SecondParty }}</li>
                                {{ end }}
                            </ul>
                        </div>

                        <div class="d-flex flex-row mb-3">
                            <div class="form-floating shadow-sm me-2">
                                <select id="relationshipTypeSelector" class="form-select pe-5">
                                    {{range .RelationshipTypes.Items}}
                                        <option value="{{.ID}}">{{.FirstPartyRole}}</option>
                                    {{end}}
                                </select>
                                <label for="relationshipTypeSelector">Relationship Type</label>
                            </div>
                            <div class="form-floating shadow-sm mx-2 flex-grow-1">
                                <select id="relationshipSecondPartySelector" class="form-select">
                                    <option value="" selected></option>
                                    {{range .Parties.Items}}
                                        <option value="{{.ID}}">{{.}}</option>
                                    {{end}}
                                </select>
                                <label for="relationshipSecondPartySelector">Other Party</label>
                            </div>

                            <button class="btn btn-primary ms-2"
                                    id="add-relationship-button"
                                    type='button'>
                                Add
                            </button>
                        </div>

                        <button class="btn btn-primary">Save</button>
                    </form>

                </div>
            </div>
        </div>
    </div>

    </body>

    <script type="application/javascript">

        let {BehaviorSubject} = rxjs;
        let {map} = rxjs.operators;

        console.log('...');

        let relationshipTypes = [
            {{range .RelationshipTypes.Items}}
            {
                id: {{.ID}},
                name: {{.Name}},
                firstPartyRole: {{.FirstPartyRole}},
                secondPartyRole: {{.SecondPartyRole}},
            },
            {{end}}
        ];

        const parties = [
            {{range .Parties.Items}}
            {
                id: {{.ID}},
                name: "{{ . }}",
            },
            {{ end }}
        ];


        let relationshipsSubject = new BehaviorSubject([
            {{range .Relationships.Items}}
            {
                firstParty: {{.FirstParty}},
                secondParty: {{.SecondParty}},
                relationshipTypeId: {{.RelationshipTypeID}}
            },
            {{end}}
        ]);
        let relationships$ = relationshipsSubject.asObservable();

        let displayRelationships$ = relationships$.pipe(
            map(r => {
                return r.map(elem => {
                    let relationshipType = relationshipTypes.find(t => t.id === elem.relationshipTypeId);
                    console.log(relationshipType);
                    if (!relationshipType) {
                        return;
                    }
                    return {
                        ...elem,
                        firstPartyRole: relationshipType.firstPartyRole,
                        secondPartyRole: relationshipType.secondPartyRole,
                        relationshipTypeName: relationshipType.name
                    };
                });
            })
        );

        let stateSubject = new BehaviorSubject({
            entity: {
                attributes: [],
                relationships: []
            }
        });
        let state$ = stateSubject.asObservable();
        let attributes$ = state$.pipe(map(s => s.attributes));

        function addRelationship(relationshipTypeId, secondPartyID) {
            relationshipsSubject.next([
                ...relationshipsSubject.value,
                {
                    relationshipTypeId,
                    firstParty: {{.Beneficiary.ID}},
                    secondParty: secondPartyID
                }
            ]);
        }

        document.addEventListener('DOMContentLoaded', function () {

            document.getElementById('add-relationship-button').onclick = () => {
                let typeSelector = document.getElementById('relationshipTypeSelector');
                let partySelector = document.getElementById('relationshipSecondPartySelector');
                let relationshipType = typeSelector.value;
                let party = partySelector.value;
                addRelationship(relationshipType, party);
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.value = "TODO"; // TODO;
                hiddenInput.id = "todo";
                // document.getElementById('relationships-container).appendChild(hiddenInput);
            };

            displayRelationships$.subscribe(s => {
                const list = document.getElementById('relationships-list');
                s.forEach(item => {
                    const li = document.createElement('li');
                    li.className = "list-group-item";
                    const firstPartyName = parties.find(({id}) => id === item.firstParty).name;
                    const firstPartyRole = relationshipTypes.find(({id}) => id === item.relationshipTypeId).firstPartyRole;
                    const secondPartyName = parties.find(({id}) => id === item.secondParty).name;
                    li.innerText = firstPartyName + " " + firstPartyRole + " " + secondPartyName;
                    list.appendChild(li);
                })

            });

        });


    </script>

    </html>
{{end}}
