{{define "beneficiary"}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <body class="bg-light">

    {{template "navbar"}}

    <div class="container">
        <div class="row">
            <div class="col">
                <div class="mt-3">

                    <form action="/beneficiaries{{if .Beneficiary}}{{if .Beneficiary.ID}}/{{.Beneficiary.ID}}{{end}}{{end}}"
                          method="post">

                        <h4 class="display-6">Attributes</h4>

                        {{ range $index, $attribute := .Attributes.Items}}

                            {{ $values := index $.Beneficiary.Attributes $attribute.ID }}

                            {{ if $values}}
                                {{range $idx, $value := $values}}
                                    <div class="form-floating mb-3">
                                        <input class="form-control"
                                               name="attribute[{{$attribute.ID}}]"
                                               id="attribute-{{$attribute.ID}}-{{$idx}}"
                                               type="text"
                                               value="{{$value}}"/>
                                        <label for="attribute-{{$attribute.ID}}-{{$idx}}">{{$attribute.Name}}</label>
                                    </div>
                                {{end}}
                            {{else}}
                                <div class="form-floating mb-3">
                                    <input class="form-control"
                                           name="attribute[{{$attribute.ID}}]"
                                           id="attribute-{{$attribute.ID}}-0"
                                           type="text"
                                           value=""/>
                                    <label for="attribute-{{$attribute.ID}}-0">{{$attribute.Name}}</label>
                                </div>
                            {{end}}

                        {{end}}

                        <h4 class="display-6">Relationships</h4>

                        <div id='relationships-container'>
                            <ul id='relationships-list' class="list-group mb-3">
                                <!-- Templated -->
                            </ul>
                        </div>

                        <div class="d-flex flex-row mb-3">
                            <div class="form-floating  me-2">
                                <select id="relationshipTypeSelector" class="form-select pe-5">
                                    {{range .RelationshipTypes.Items}}
                                        <option value="{{.ID}}">{{.FirstPartyRole}}</option>
                                    {{end}}
                                </select>
                                <label for="relationshipTypeSelector">Relationship Type</label>
                            </div>
                            <div class="form-floating  mx-2 flex-grow-1">
                                <select id="relationshipSecondPartySelector" class="form-select">
                                    <option value="" selected></option>
                                    {{range .Parties.Items}}
                                        <option value="{{.ID}}">{{.}}</option>
                                    {{end}}
                                </select>
                                <label for="relationshipSecondPartySelector">Other Party</label>
                            </div>

                            <button class="btn btn-primary ms-2"
                                    id="add-relationship-button"
                                    type='button'>
                                Add
                            </button>
                        </div>

                        {{if not .IsNew}}

                            <h4 class="display-6">Cases</h4>

                            <table class="table table-hover table-bordered">

                                <thead>
                                <tr>
                                    <th scope="col">Type</th>
                                    <th scope="col">Status</th>
                                </tr>
                                </thead>
                                <tbody>

                                {{range .Cases}}
                                    <tr>
                                        <td><a href="/cases/{{.Case.ID}}">{{.CaseType.Name}}</a></td>
                                        <td>{{if .Case.Done}}Closed{{else}}Open{{end}}</td>
                                    </tr>
                                {{end}}

                                </tbody>
                            </table>

                            <h4 class="display-6">Open Case</h4>

                            {{range .CaseTypes.Items}}

                                <div>
                                    <a href="/cases/new?caseTypeId={{.ID}}&partyId={{$.Beneficiary.ID}}">{{.Name}}</a>
                                </div>

                            {{end}}

                        {{end}}

                        <button class="btn btn-primary mt-5">Save</button>
                    </form>

                </div>
            </div>
        </div>
    </div>

    </body>

    <script type="application/javascript">

        let {Subject, BehaviorSubject, pipe, Observable} = rxjs;
        let {map, debounceTime, switchMap} = rxjs.operators;
        let {ajax} = rxjs.ajax;

        // Holds the different relationship types
        const relationshipTypes = [
            {{range .RelationshipTypes.Items}}
            {
                id: {{.ID}},
                name: {{.Name}},
                firstPartyRole: {{.FirstPartyRole}},
                secondPartyRole: {{.SecondPartyRole}},
            },
            {{end}}
        ];

        // Holds the different parties (for relationship dropdown select)
        // TODO: use API query to search
        let querySubject = new Subject()
        let query$ = querySubject.asObservable().pipe(
            debounceTime(200),
            switchMap((relationshipTypeId) => {
                const searchParams = new URLSearchParams({
                    "relationshipTypeId": relationshipTypeId,
                    "searchParam": "default"
                })
                const ajaxUrl = "{{.BasePath}}" + "/apis/v1/relationshipparties/picker?" + searchParams.toString()
                return ajax(ajaxUrl)
            })
        )
        const parties = [
            {{range .Parties.Items}}
            {
                id: {{.ID}},
                name: "{{ . }}",
            },
            {{ end }}
        ];

        // Holds the display state
        let stateSubject = new BehaviorSubject({
            attributes: [],
            relationships: [
                {{range .Relationships.Items}}
                {
                    id: {{.ID}},
                    firstParty: {{.FirstParty}},
                    secondParty: {{.SecondParty}},
                    relationshipTypeId: {{.RelationshipTypeID}},
                    isNew: false,
                    markedForDeletion: false,
                },
                {{end}}
            ]
        });

        // Display state observable$
        let state$ = stateSubject.asObservable();

        // Beneficiary attributes observable$
        let attributes$ = state$.pipe(map(s => s.attributes));

        // Beneficiary relationships observable$
        let relationships$ = state$.pipe(map(s => s.relationships))

        // aggregate relationship types and relationships for display purposes
        let displayRelationships$ = relationships$.pipe(
            map(r => {
                return r.map(relationship => {
                    let relationshipType = relationshipTypes.find(t => t.id === relationship.relationshipTypeId);
                    if (!relationshipType) {
                        return;
                    }
                    return {
                        ...relationship,
                        firstPartyRole: relationshipType.firstPartyRole,
                        secondPartyRole: relationshipType.secondPartyRole,
                        relationshipTypeName: relationshipType.name
                    };
                });
            })
        );


        function addRelationship(relationshipTypeId, secondPartyID) {
            const state = stateSubject.value
            stateSubject.next({
                ...state,
                relationships: [
                    ...state.relationships,
                    {
                        relationshipTypeId,
                        firstParty: {{.Beneficiary.ID}},
                        secondParty: secondPartyID
                    }
                ]
            })
        }

        function deleteRelationship(idx) {
            console.log("ok")
            const state = stateSubject.value
            const relationships = state.relationships
            const relationship = relationships[idx]
            if (relationship.id) {
                relationships[idx] = {
                    ...relationship,
                    // toggle marked for deletion
                    markedForDeletion: !relationship.markedForDeletion
                }
                stateSubject.next({
                    ...state,
                    relationships: [
                        ...relationships
                    ]
                })
            } else {
                relationships.splice(idx, 1)
                stateSubject.next({
                    ...state,
                    relationships: [...relationships]
                })
            }
        }

        // On document ready
        document.addEventListener('DOMContentLoaded', function () {

            // Bind add relationship button
            document.getElementById('add-relationship-button').onclick = () => {
                let typeSelector = document.getElementById('relationshipTypeSelector');
                let partySelector = document.getElementById('relationshipSecondPartySelector');
                let relationshipType = typeSelector.value;
                let party = partySelector.value;
                addRelationship(relationshipType, party);
            };

            // Add listener for party filtering on relationship type dropdown
            document.getElementById('relationshipTypeSelector').onchange = (event) => {
                querySubject.next(event.target.value)
            }
            query$.subscribe(
                res => {
                    console.log("got res: ", res)
                },
                err => {
                    console.error("got error: ", err)
                }
            )

            // Render relationships
            displayRelationships$.subscribe(relationships => {
                const list = document.getElementById('relationships-list');
                list.innerHTML = ""
                relationships.forEach((relationship, idx) => {

                    const li = document.createElement('li');
                    li.className = "list-group-item";

                    const firstPartyName = parties.find(({id}) => id === relationship.firstParty).name;
                    const firstPartyRole = relationshipTypes.find(({id}) => id === relationship.relationshipTypeId).firstPartyRole;
                    const secondPartyName = parties.find(({id}) => id === relationship.secondParty).name;

                    const firstPartyLinkNode = document.createElement("a")
                    firstPartyLinkNode.href = "/beneficiaries/" + firstPartyLinkNode
                    firstPartyLinkNode.innerText = firstPartyName

                    const roleSpanNode = document.createElement("span")
                    roleSpanNode.innerText = firstPartyRole.substring(0, 1).toLocaleLowerCase() + firstPartyRole.substring(1)

                    const secondPartyLinkNode = document.createElement("a")
                    secondPartyLinkNode.href = "/beneficiaries/" + secondPartyLinkNode
                    secondPartyLinkNode.innerText = secondPartyName

                    const space1Node = document.createElement("span")
                    space1Node.innerText = " "

                    const space2Node = document.createElement("span")
                    space2Node.innerText = " "

                    const containerNode = document.createElement("span")

                    if (relationship.markedForDeletion) {
                        containerNode.style.textDecoration = "line-through"
                    }

                    if (!relationship.id) {

                        const plusNode = document.createElement("span")
                        plusNode.innerHTML = "+ "
                        containerNode.appendChild(plusNode)
                        containerNode.classList.add("text-success")
                        containerNode.classList.add("fw-bold")
                    }

                    containerNode.appendChild(firstPartyLinkNode)
                    containerNode.appendChild(space1Node)
                    containerNode.appendChild(roleSpanNode)
                    containerNode.appendChild(space2Node)
                    containerNode.appendChild(secondPartyLinkNode)

                    const secondPartyInput = document.createElement("input")
                    secondPartyInput.name = "relationships[" + idx + "].secondPartyId"
                    secondPartyInput.setAttribute("value", relationship.secondParty)
                    secondPartyInput.hidden = true

                    const relationshipTypeIdInput = document.createElement("input")
                    relationshipTypeIdInput.name = "relationships[" + idx + "].relationshipTypeId"
                    relationshipTypeIdInput.setAttribute("value", relationship.relationshipTypeId)
                    relationshipTypeIdInput.hidden = true

                    const closeButton = document.createElement("button")
                    closeButton.type = "button"
                    closeButton.classList.add("btn-close")
                    closeButton.classList.add("float-end")
                    closeButton.onclick = () => {
                        deleteRelationship(idx)
                    }
                    containerNode.appendChild(closeButton)

                    if (relationship.id) {
                        const idHiddenInput = document.createElement("input")
                        idHiddenInput.hidden = true
                        idHiddenInput.name = `relationships[${idx}].id`
                        idHiddenInput.setAttribute("value", relationship.id)
                        li.appendChild(idHiddenInput)
                    }

                    if (relationship.markedForDeletion) {
                        const markedForDeletionHiddenInput = document.createElement("input")
                        markedForDeletionHiddenInput.hidden = true
                        markedForDeletionHiddenInput.name = `relationships[${idx}].markedForDeletion`
                        markedForDeletionHiddenInput.setAttribute("value", "true")
                        li.appendChild(markedForDeletionHiddenInput)
                    }

                    li.appendChild(secondPartyInput)
                    li.appendChild(relationshipTypeIdInput)
                    li.appendChild(containerNode)

                    list.appendChild(li);
                })

            });

        });


    </script>

    </html>
{{end}}
