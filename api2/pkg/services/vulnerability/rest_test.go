package vulnerability

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/nrc-no/core-kafka/pkg/expressions"
	i81n "github.com/nrc-no/core-kafka/pkg/i81n/api/v1"
	"github.com/nrc-no/core-kafka/pkg/subjects/api"
	"github.com/nrc-no/core-kafka/pkg/testhelpers"
	"github.com/stretchr/testify/assert"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestVulnerabilityHandler(t *testing.T) {

	ctx := context.Background()
	mongoClient, err := testhelpers.NewMongoClient(ctx)
	if !assert.NoError(t, err) {
		return
	}
	store := NewStore(mongoClient)
	handler := NewHandler(store)

	v := PostVulnerability{
		Name:        "Food Insecurity",
		SubjectType: api.BeneficiaryType,
		ValueType:   expressions.ValueType{},
		LongFormulation: []i81n.Translation{
			{
				Translation: "Is the beneficiary subject to food insecurity?",
				Locale:      "en",
			},
		},
		ShortFormulation: []i81n.Translation{
			{
				Translation: "Subject to food insecurity?",
				Locale:      "en",
			},
		},
		AttributesForDetermination: []string{
			"firstName",
		},
	}

	bodyBytes, err := json.Marshal(v)
	if !assert.NoError(t, err) {
		return
	}

	req := httptest.NewRequest("POST", "/", bytes.NewReader(bodyBytes))
	recorder := httptest.NewRecorder()

	handler.PostVulnerability(recorder, req)
	assert.Equal(t, http.StatusOK, recorder.Code)

}
