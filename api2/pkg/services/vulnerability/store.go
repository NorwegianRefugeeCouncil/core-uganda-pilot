package vulnerability

import (
	"context"
	"github.com/nrc-no/core-kafka/pkg/services/api"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

type Store struct {
	collection *mongo.Collection
}

func NewStore(mongoClient *mongo.Client, database string) *Store {
	store := &Store{
		collection: mongoClient.Database(database).Collection("vulnerabilities"),
	}
	return store
}

func (v *Store) GetAll(ctx context.Context) ([]*api.Vulnerability, error) {
	cursor, err := v.collection.Find(ctx, bson.M{})
	if err != nil {
		return nil, err
	}
	var ret []*api.Vulnerability
	for {
		if !cursor.Next(ctx) {
			break
		}
		var v api.Vulnerability
		if err := cursor.Decode(&v); err != nil {
			return nil, err
		}
		ret = append(ret, &v)
	}
	if cursor.Err() != nil {
		return nil, cursor.Err()
	}
	return ret, nil
}

func (v *Store) Get(ctx context.Context, id string) (*api.Vulnerability, error) {
	result := v.collection.FindOne(ctx, bson.M{
		"id": id,
	})
	if result.Err() != nil {
		return nil, result.Err()
	}
	var vul api.Vulnerability
	if err := result.Decode(&vul); err != nil {
		return nil, err
	}
	return &vul, nil
}

func (v *Store) Create(ctx context.Context, vulnerability *api.Vulnerability) error {
	_, err := v.collection.InsertOne(ctx, vulnerability)
	if err != nil {
		return err
	}
	return nil
}

func (v *Store) Update(ctx context.Context, vulnerability *api.Vulnerability) error {
	_, err := v.collection.UpdateOne(ctx, bson.M{
		"id": vulnerability.ID,
	}, bson.M{
		"$set": bson.M{
			"attributesForDetermination": vulnerability.AttributesForDetermination,
			"shortFormulation":           vulnerability.ShortFormulation,
			"longFormulation":            vulnerability.LongFormulation,
			"valueType":                  vulnerability.ValueType,
		},
	})
	if err != nil {
		return err
	}
	return nil
}
