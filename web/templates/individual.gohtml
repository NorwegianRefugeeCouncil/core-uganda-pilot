{{define "individual"}}
    {{$hasIntakeCases := (and (not .IsNew) (and .SituationAnalysis .IndividualResponse))}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <body>

    {{template "navbar" .}}

    {{template "individuals_nav" . }}

    <div class="container py-4">
        <div class="mb-3">
            Registration progress
            <span class="badge rounded-pill bg-primary">Steps {{.ProgressLabel}}</span><br>
        </div>
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="attributes-tab" data-bs-toggle="tab" data-bs-target="#attributes"
                        type="button"
                        role="tab" aria-controls="attributes" aria-selected="true">
                    Attributes
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link{{if not $hasIntakeCases}} disabled{{end}}" id="situation-analysis-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#situation-analysis" type="button"
                        role="tab" aria-controls="situation-analysis" aria-selected="false">
                    Situation Analysis
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link{{if not $hasIntakeCases}} disabled{{end}}" id="response-tab"
                        data-bs-toggle="tab" data-bs-target="#response" type="button"
                        role="tab" aria-controls="response" aria-selected="false">
                    Response
                </button>
            </li>
        </ul>
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="attributes" role="tabpanel"
                 aria-labelledby="attributes-tab">
                <div class="d-flex justify-content-start align-items-center my-3">
                    <h1 class="display-4 me-3">Bio Information</h1>
                    <h5><span class="badge bg-primary">{{(index .Progress 0).StageStatus}}</span></h5>
                </div>
                <div class="card mb-3">
                    <div class="card-body">
                        <form id="attributes-form"
                              action="/individuals{{if .Individual}}{{if .Individual.ID}}/{{.Individual.ID}}{{end}}{{end}}">

                            {{ range $index, $attribute := .Attributes.Controls}}
                                {{template "formcontrol" $attribute}}
                            {{end}}

                            <h1 class="display-5 my-3">Relationships</h1>
                            <div id='relationships-container'>
                                <ul id='relationships-list' class="list-group mb-3">
                                    <!-- Templated -->
                                </ul>
                            </div>

                            <div class="d-flex">
                                <div class="me-2">
                                    <label class="form-label" for="relationshipTypeSelector">Relationship Type</label>
                                    <select id="relationshipTypeSelector" class="form-select pe-5"
                                            data-testid="relationship-type">
                                        {{range .FilteredRelationshipTypes.Items}}
                                            <option value="{{.ID}}">{{.FirstPartyRole}}</option>
                                        {{end}}
                                    </select>
                                </div>
                                <div class="mx-2 flex-grow-1 dropdown">
                                    <label for="partySelector" class="form-label">Related Party</label>
                                    <input type="text"
                                           class="form-control"
                                           name="partySelector"
                                           id="partySelector"
                                           data-testid="related-party"
                                           data-bs-toggle="dropdown"
                                           data-bs-auto-close="false"
                                           aria-expanded="false"
                                           autocomplete="off"
                                    />
                                    <ul class="dropdown-menu" id="partySelectorList" aria-labelledby="partySelector">
                                    </ul>
                                </div>

                                <button class="btn btn-primary ms-2"
                                        id="add-relationship-button"
                                        data-testid="add-relationship-btn"
                                        type='button'>
                                    Add
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            {{if  $hasIntakeCases}}
                <div class="tab-pane fade" id="situation-analysis" role="tabpanel"
                     aria-labelledby="situation-analysis-tab">
                    <div class="d-flex justify-content-start align-items-center my-3">
                        <h1 class="display-4 me-3">Situation Analysis</h1>
                        <h5><span class="badge bg-primary">{{(index .Progress 1).StageStatus}}</span></h5>
                    </div>
                    {{if .SituationAnalysisCreator}}
                        <div class="p-3 bg-light mb-3 shadow-sm">
                            <span>Created by </span>
                            <a href="/individuals/{{.SituationAnalysisCreator.ID}}">{{.SituationAnalysisCreator}}</a>
                        </div>
                    {{end}}
                    <div class="card mb-3">
                        <div class="card-body">
                            <form id="situation-analysis-form" action="/cases/{{.SituationAnalysis.ID}}">
                                {{template "form" .SituationAnalysisForm}}
                                <div class="form-check mb-3">
                                    <input id="done-input"
                                           class="form-check-input"
                                           type="checkbox"
                                           name="done"
                                           data-testid="done-check-situation"
                                           {{if .SituationAnalysis.Done}}checked{{end}}>
                                    <label class="form-check-label" for="done-input">
                                        Done
                                    </label>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="response" role="tabpanel" aria-labelledby="response-tab">
                    <div class="d-flex justify-content-start align-items-center my-3">
                        <h1 class="display-4 me-3">Response</h1>
                        <h5><span class="badge bg-primary">{{(index .Progress 2).StageStatus}}</span></h5>
                    </div>
                    {{if .IndividualResponseCreator}}
                        <div class="p-3 bg-light mb-3 shadow-sm">
                            <span>Created by </span>
                            <a href="/individuals/{{.IndividualResponseCreator.ID}}">{{.IndividualResponseCreator}}</a>
                        </div>
                    {{end}}
                    <div class="card mb-3">
                        <div class="card-body">
                            <form id="response-form" action="/cases/{{.IndividualResponse.ID}}">
                                {{template "form" .IndividualResponseForm}}
                                <div class="form-check mb-3">
                                    <input id="done-input"
                                           class="form-check-input"
                                           type="checkbox"
                                           name="done"
                                           data-testid="done-check-response"
                                           {{if .IndividualResponse.Done}}checked{{end}}>
                                    <label class="form-check-label" for="done-input">
                                        Done
                                    </label>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            {{end}}
        </div>
        <button id="form-submit-btn" type="button" class="btn btn-lg btn-primary my-3" data-testid="save-btn">
            Save
        </button>

        {{if not .IsNew}}
            {{if gt (len .Cases) 0}}
                <h1 class="display-5 my-3">Cases</h1>
                <table class="table table-hover table-bordered">
                    <thead>
                    <tr>
                        <th scope="col">Type</th>
                        <th scope="col">Status</th>
                    </tr>
                    </thead>
                    <tbody>

                    {{range .Cases}}
                        <tr>
                            <td><a href="/cases/{{.Case.ID}}">{{.CaseType.Name}}</a></td>
                            <td>{{if .Case.Done}}Closed{{else}}Open{{end}}</td>
                        </tr>
                    {{end}}

                    </tbody>
                </table>
            {{end}}

            <h1 class="display-5 my-3">Open a new case for this beneficiary</h1>
            <div class="list-group">
                {{range .CaseTypes.Items}}
                    <a class="list-group-item list-group-item-action"
                       href="/cases/new?caseTypeId={{.ID}}&partyId={{$.Individual.ID}}">{{.Name}}</a>
                {{end}}
            </div>

        {{end}}


    </div>
	<script type="application/javascript">
		// makeb displayName reative to fullName input to simplify things for users
		const full = document.querySelector('input[name=fullName]');
		const display = document.querySelector('input[name=displayName]');
		full.addEventListener('input', event => {
			const name = event.target.value;
			// put first 3 words in displayName
			display.value = name.split(' ').slice(0, 3).join(' ');
		});
	</script>
    <script type="module">
        import validate from '/static/js/validation.js';

        const currentStage = {{ .Status.CurrentStage }} +2; // CurrentStage starts at -1 to indicate no stage completed
        const forms = ['attributes-form', 'situation-analysis-form', 'response-form']
            .slice(0, currentStage)
            .map(id => document.getElementById(id));
        const submitBtn = document.getElementById('form-submit-btn');

        validate(forms, submitBtn)
    </script>

    <script type="application/javascript">

        let {Subject, BehaviorSubject} = rxjs;
        let {map, debounceTime, switchMap} = rxjs.operators;
        let {ajax} = rxjs.ajax;

        // Holds the different relationship types
        const relationshipTypes = [
            {{range .RelationshipTypes.Items}}
            {
                id: {{.ID}},
                name: {{.Name}},
                firstPartyRole: {{.FirstPartyRole}},
                secondPartyRole: {{.SecondPartyRole}},
                firstPartyTypeId: {{(index .Rules 0).PartyTypeRule.FirstPartyTypeID}},
                secondPartyTypeId: {{(index .Rules 0).PartyTypeRule.SecondPartyTypeID}}
            },
            {{end}}
        ];

        // Handles the search box for the parties dropdown
        let partySearchSubject = new Subject();
        let partySearch$ = partySearchSubject.asObservable().pipe(
            debounceTime(200),
            switchMap((searchParam) => {
                const searchParams = new URLSearchParams({
                    'partyTypeId': getSecondPartyType(),
                    'searchParam': searchParam,
                });
                const ajaxUrl = '/relationships/pickparty?' + searchParams.toString();
                return ajax(ajaxUrl);
            }),
        );

        // Holds the different parties (for relationship dropdown select)
        let parties = [
            {{range .Parties.Items}}
            {
                id: {{.ID}},
                name: "{{ .String }}",
            },
            {{ end }}
            {{range .Teams.Items}}
            {
                id: {{.ID}},
                name: "{{ .String }}",
            },
            {{ end }}
        ];

        // Holds the display state
        let stateSubject = new BehaviorSubject({
            attributes: [],
            relationships: [
                {{range .Relationships.Items}}
                {
                    id: {{.ID}},
                    firstParty: {{.FirstPartyID}},
                    secondParty: {{.SecondPartyID}},
                    relationshipTypeId: {{.RelationshipTypeID}},
                    isNew: false,
                    markedForDeletion: false,
                },
                {{end}}
            ],
        });

        // Display state observable$
        let state$ = stateSubject.asObservable();

        // Individual relationships observable$
        let relationships$ = state$.pipe(map(s => s.relationships));

        // aggregate relationship types and relationships for display purposes
        let displayRelationships$ = relationships$.pipe(
            map(relationships => {
                return relationships.map(relationship => {
                    let relationshipType = relationshipTypes.find(t => t.id === relationship.relationshipTypeId);
                    if (!relationshipType) {
                        return;
                    }
                    return {
                        ...relationship,
                        firstPartyRole: relationshipType.firstPartyRole,
                        secondPartyRole: relationshipType.secondPartyRole,
                        relationshipTypeName: relationshipType.name,
                    };
                });
            }),
        );

        function addRelationship(relationshipTypeId, secondPartyID) {
            const state = stateSubject.value;
            // Check for self-reference
            if (secondPartyID === {{.Individual.ID}}) return;
            // Check for valid party
            const isValidParty = parties.filter(({id}) => id === secondPartyID).length === 1;
            if (!isValidParty) return;
            // Check for duplicate
            const relationshipExists = state.relationships
                .filter(r => r.relationshipTypeId === relationshipTypeId && r.secondParty === secondPartyID)
                .length > 0;
            if (relationshipExists) return;
            stateSubject.next({
                ...state,
                relationships: [
                    ...state.relationships,
                    {
                        relationshipTypeId,
                        firstParty: {{.Individual.ID}},
                        secondParty: secondPartyID,
                    },
                ],
            });
        }

        function deleteRelationship(idx) {
            const state = stateSubject.value;
            const relationships = state.relationships;
            const relationship = relationships[idx];
            if (relationship.id) {
                relationships[idx] = {
                    ...relationship,
                    // toggle marked for deletion
                    markedForDeletion: !relationship.markedForDeletion,
                };
                stateSubject.next({
                    ...state,
                    relationships: [
                        ...relationships,
                    ],
                });
            } else {
                relationships.splice(idx, 1);
                stateSubject.next({
                    ...state,
                    relationships: [...relationships],
                });
            }
        }

        // Returns the secondPartyType ID corresponding to the selection of the relationship type
        // dropdown
        const getSecondPartyType = () => {
            const relationshipTypeSelector = document.getElementById('relationshipTypeSelector');
            let selectedRelationshipType = relationshipTypes.find(
                e => e.id === relationshipTypeSelector.value
                    && e.firstPartyRole === relationshipTypeSelector.options[relationshipTypeSelector.selectedIndex].text,
            );
            return selectedRelationshipType.secondPartyTypeId;
        };

        // Returns the value of the partySelector search box
        const getSearchParam = () => {
            const partySelector = document.getElementById('partySelector');
            return partySelector.textContent;
        };

        // Party List Item click handler - sets the text box value used for searching to the selected item
        // from the dropdown
        const onPartyListItemClick = (event) => {
            document.getElementById('partySelector').value = event.target.textContent;
            document.getElementById('partySelector').setAttribute('data-party-id', event.target.id);
        };

        // Build a party link
        const partyLink = (partyTypeId, partyId) => {
            if (partyTypeId === "{{ .IndividualPartyTypeID }}") {
                return '/individuals/' + partyId;
            }
            if (partyTypeId === "{{ .TeamPartyTypeID }}") {
                return '/teams/' + partyId;
            }
            if (partyTypeId === "{{ .HouseholdPartyTypeID }}") {
                return '/households/' + partyId;
            }
            return '/';
        };

        // On document ready
        document.addEventListener('DOMContentLoaded', function () {

            // Bind add relationship button
            document.getElementById('add-relationship-button').onclick = () => {
                let typeSelector = document.getElementById('relationshipTypeSelector');
                let partySelector = document.getElementById('partySelector');
                let relationshipType = typeSelector.value;
                let party = partySelector.getAttribute('data-party-id');
                addRelationship(relationshipType, party);
            };

            // Override bootstrap dropdown events
            const partySelector = document.querySelector('#partySelector');
            const toggler = new bootstrap.Dropdown(partySelector);
            document.querySelector('#partySelector').onclick = (event) => {
                toggler.show();
            };
            // Hide dropdown on click outside
            document.onclick = event => {
                const partySelectorList = document.querySelector('#partySelectorList');
                const shouldHidePartySelectorList = event.target.id !== 'partySelector' && partySelectorList.classList.contains('show');
                if (shouldHidePartySelectorList) {
                    toggler.hide();
                }
            };

            // Add listener for party selector item click
            document.querySelectorAll('.partySelectorItem').forEach(e => {
                e.onclick = onPartyListItemClick;
            });

            // Add listener for party search box
            partySelector.oninput = (event) => {
                partySearchSubject.next(event.target.value);
            };

            // Add listener for relationship type change
            document.getElementById('relationshipTypeSelector').onchange = (event) => {
                partySearchSubject.next(getSearchParam());
            };

            // Handle party search responses
            partySearch$.subscribe(
                res => {
                    let partySelectorList = document.getElementById('partySelectorList');
                    partySelectorList.innerHTML = '';
                    if (res.response?.length > 0) {
                        let n = 0;
                        res.response.forEach(pickedParty => {
                            const party = pickedParty.party;
                            if (n < {{ .Constants.PartyDropdownLimit }}) {
                                let newListItem = document.createElement('li');
                                newListItem.classList.add('dropdown-item');
                                newListItem.classList.add('partySelectorItem');
                                newListItem.setAttribute('data-testid', 'party-search-result');
                                newListItem.onclick = onPartyListItemClick;
                                let displayText = pickedParty.displayName;
                                newListItem.appendChild(
                                    document.createTextNode(displayText),
                                );
                                newListItem.setAttribute('id', party.id);
                                partySelectorList.appendChild(newListItem);
                            }
                            n++;
                        });
                    } else {
                        // No Parties Found...
                        let newListItem = document.createElement('li');
                        newListItem.classList.add('dropdown-item');
                        let displayText = `No Parties Found`;
                        newListItem.appendChild(
                            document.createTextNode(displayText),
                        );
                        partySelectorList.appendChild(newListItem);
                    }
                },
                err => {
                    console.error('got error: ', err);
                },
            );

            // Render relationships
            displayRelationships$.subscribe(relationships => {
                const list = document.getElementById('relationships-list');
                list.innerHTML = '';
                relationships.forEach((relationship, idx) => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item';
                    let firstPartyName;
                    if (window.location.pathname === '/individuals/new') {
                        const displayName = document.querySelector('input[name="displayName"]')?.value;
                        firstPartyName = displayName.toUpperCase();
                    } else {
                        firstPartyName = parties.find(({ id }) => id === relationship.firstParty)?.name;
                    }
                    li.setAttribute('data-testid', 'relationship');
                    const firstPartyRole = relationshipTypes.find(({ id }) => id === relationship.relationshipTypeId)?.firstPartyRole;
                    const secondPartyName = parties.find(({ id }) => id === relationship.secondParty)?.name;
                    const firstPartyTypeId = relationshipTypes.find(({ id }) => id === relationship.relationshipTypeId).firstPartyTypeId;
                    const secondPartyTypeId = relationshipTypes.find(({ id }) => id === relationship.relationshipTypeId).secondPartyTypeId;

                    const firstPartyLinkNode = document.createElement('a');
                    firstPartyLinkNode.href = partyLink(firstPartyTypeId, relationship.firstParty);
                    firstPartyLinkNode.innerText = firstPartyName;

                    const roleSpanNode = document.createElement('span');
                    roleSpanNode.innerText = firstPartyRole.substring(0, 1).toLocaleLowerCase() + firstPartyRole.substring(1);

                    const secondPartyLinkNode = document.createElement('a');
                    secondPartyLinkNode.href = partyLink(secondPartyTypeId, relationship.secondParty);
                    secondPartyLinkNode.innerText = secondPartyName;

                    const space1Node = document.createElement('span');
                    space1Node.innerText = ' ';

                    const space2Node = document.createElement('span');
                    space2Node.innerText = ' ';

                    const containerNode = document.createElement('span');

                    if (relationship.markedForDeletion) {
                        containerNode.style.textDecoration = 'line-through';
                    }

                    if (!relationship.id) {

                        const plusNode = document.createElement('span');
                        plusNode.innerHTML = '+ ';
                        containerNode.appendChild(plusNode);
                        containerNode.classList.add('text-success');
                        containerNode.classList.add('fw-bold');
                    }

                    containerNode.appendChild(firstPartyLinkNode);
                    containerNode.appendChild(space1Node);
                    containerNode.appendChild(roleSpanNode);
                    containerNode.appendChild(space2Node);
                    containerNode.appendChild(secondPartyLinkNode);

                    const secondPartyInput = document.createElement('input');
                    secondPartyInput.name = 'relationships[' + idx + '].secondPartyId';
                    secondPartyInput.setAttribute('value', relationship.secondParty);
                    secondPartyInput.hidden = true;

                    const relationshipTypeIdInput = document.createElement('input');
                    relationshipTypeIdInput.name = 'relationships[' + idx + '].relationshipTypeId';
                    relationshipTypeIdInput.setAttribute('value', relationship.relationshipTypeId);
                    relationshipTypeIdInput.hidden = true;

                    const closeButton = document.createElement('button');
                    closeButton.type = 'button';
                    closeButton.classList.add('btn-close');
                    closeButton.classList.add('float-end');
                    closeButton.setAttribute('data-testid', 'remove-relationship-btn');
                    closeButton.onclick = () => {
                        deleteRelationship(idx);
                    };
                    containerNode.appendChild(closeButton);

                    if (relationship.id) {
                        const idHiddenInput = document.createElement('input');
                        idHiddenInput.hidden = true;
                        idHiddenInput.name = `relationships[${idx}].id`;
                        idHiddenInput.setAttribute('value', relationship.id);
                        li.appendChild(idHiddenInput);
                    }

                    if (relationship.markedForDeletion) {
                        const markedForDeletionHiddenInput = document.createElement('input');
                        markedForDeletionHiddenInput.hidden = true;
                        markedForDeletionHiddenInput.name = `relationships[${idx}].markedForDeletion`;
                        markedForDeletionHiddenInput.setAttribute('value', 'true');
                        li.appendChild(markedForDeletionHiddenInput);
                    }

                    li.appendChild(secondPartyInput);
                    li.appendChild(relationshipTypeIdInput);
                    li.appendChild(containerNode);

                    list.appendChild(li);
                });

            });

            // Initial call to populate parties list
            partySearchSubject.next(getSearchParam());

        });


    </script>
    </body>
    </html>
{{end}}
