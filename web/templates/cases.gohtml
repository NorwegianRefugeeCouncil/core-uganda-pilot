{{define "cases"}}
    <!doctype html>
    <html lang="en">
    {{template "head"}}
    <style>
        td:first-child, th:first-child {
            padding-left: 1rem;
        }

        td, th {
            padding-top: 1rem !important;
            padding-bottom: 1rem !important;
        }
    </style>
    <body>
    {{template "navbar"}}
    {{template "case_nav"}}
    <div class="container my-4">
        <a data-testid='new-case-btn' href='/cases/new' class='btn btn-primary mb-3'>Open New Case</a>
        <div class="card">
            <div class="card-body p-0">


                <table class="table table-hover">
                    <thead>
                    <tr class="border-0 bg-light border-bottom">
                        <th class="border-0 fw-normal" scope="col" style="width: 3rem">
                            <a class="dropdown-toggle text-decoration-none" href="#"
                               id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
                               aria-expanded="false">
                                <i class="bi bi-record-circle"></i>
                            </a>
                            <div class="dropdown-menu p-2" aria-labelledby="navbarDarkDropdownMenuLink">
                                <div class="form-check mb-1">
                                    <input class="form-check-input filter-checkbox"
                                           type="checkbox"
                                           name="filter[status]"
                                           value="open"
                                           onchange='toggleFilterElem("status", "open")'
                                           id="filter[status][open]">
                                    <label class="form-check-label"
                                           for="filter[status][open]">
                                        Open
                                    </label>
                                </div>
                                <div class="form-check mb-1">
                                    <input class="form-check-input filter-checkbox"
                                           type="checkbox"
                                           name="filter[status]"
                                           value="closed"
                                           onchange='toggleFilterElem("status", "closed")'
                                           id="filter[status][closed]">
                                    <label class="form-check-label"
                                           for="filter[status][closed]">
                                        Closed
                                    </label>
                                </div>
                            </div>
                        </th>
                        <th class="border-0 fw-normal" scope="col">
                            <a class="dropdown-toggle text-decoration-none" href="#"
                               id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
                               aria-expanded="false">
                                Team
                            </a>
                            <ul class="dropdown-menu p-2" aria-labelledby="navbarDarkDropdownMenuLink">
                                {{range $idx, $team := .Teams.Items}}
                                    <div class="form-check mb-1">
                                        <input class="form-check-input filter-checkbox"
                                               type="checkbox"
                                               name="filter[teamId]"
                                               onchange='toggleFilterElem("teamId", "{{$team.ID}}")'
                                               value="{{$team.ID}}"
                                               id="filter[teamId][{{$team.ID}}]">
                                        <label class="form-check-label" for="filter[teamId][{{$team.ID}}]">
                                            {{.Name}}
                                        </label>
                                    </div>
                                {{end}}
                            </ul>
                        </th>
                        <th class="border-0 fw-normal" scope="col">
                            <a class="dropdown-toggle text-decoration-none" href="#"
                               id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown"
                               aria-expanded="false">
                                Case Type
                            </a>
                            <ul class="dropdown-menu p-2" aria-labelledby="navbarDarkDropdownMenuLink">
                                {{range $idx, $caseType := .CaseTypes.Items}}
                                    <div class="form-check mb-1">
                                        <input class="form-check-input filter-checkbox"
                                               type="checkbox"
                                               name="filter[caseTypeId]"
                                               onchange='toggleFilterElem("caseTypeId", "{{$caseType.ID}}")'
                                               value="{{$caseType.ID}}"
                                               id="filter[caseTypeId][{{$caseType.ID}}]">
                                        <label class="form-check-label"
                                               for="filter[caseTypeId][{{$caseType.ID}}]">
                                            {{.Name}}
                                        </label>
                                    </div>
                                {{end}}
                            </ul>
                        </th>
                        <th class="border-0 fw-normal" scope="col">Party</th>
                    </tr>
                    </thead>
                    <tbody>
                    {{ if .Cases.Items}}
                        {{$caseTypes := .CaseTypes}}
                        {{$parties := .Parties}}
                        {{$teams := .Teams}}
                        {{ range .Cases.Items }}
                            <tr onclick="window.location.href = '/cases/{{.ID}}'" style="cursor: pointer;"
                                data-testid="case-row" data-testhref="/cases/{{.ID}}">
                                <td style="width: 3rem">
                                    {{if .Done}}
                                        <i class="bi bi-check-circle"></i>
                                    {{else}}
                                        <i class="bi bi-circle"></i>
                                    {{end}}
                                </td>
                                {{$casetype := $caseTypes.FindByID .CaseTypeID}}
                                {{$team := $teams.FindByID $casetype.TeamID}}
                                <td>
                                    {{$team}}
                                </td>
                                <td class="{{if .Done}}text-muted{{else}}fw-bold{{end}}">{{if $casetype}}{{$casetype.Name}}{{end}}</td>
                                {{$party := $parties.FindByID .PartyID}}
                                <td class="{{if .Done}}text-muted{{end}}">{{if $party}}{{$party.String}}{{end}}</td>
                            </tr>
                        {{end}}
                    {{else}}
                        <tr>
                            <td colspan="3">No cases found</td>
                        </tr>
                    {{end}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    </body>
    <script type='application/javascript'>

        const {BehaviorSubject} = rxjs;
        const {debounceTime, distinctUntilChanged, pairwise, map} = rxjs.operators;

        const filterSubject = new BehaviorSubject({
            'status': [
                {{if .FilterOptions.ClosedOnly}}
                'closed',
                {{end}}
                {{if .FilterOptions.OpenOnly}}
                'open',
                {{end}}
            ],
            'teamId': [
                {{range .FilterOptions.TeamIDs}}
                {{.}},
                {{end}}
            ],
            'caseTypeId': [
                {{range .FilterOptions.CaseTypeIDs}}
                {{.}},
                {{end}}
            ],
        });

        function toggleFilterElem(elem, value) {
            const filter = filterSubject.value;
            let state = filter[elem];
            if (state.includes(value)) {
                state = state.filter(i => i !== value);
            } else {
                state = [...state, value];
            }
            filterSubject.next({
                ...filter,
                [elem]: state,
            });
        }


        function refreshFilterInputs(s) {
            const allInputs = document.getElementsByClassName('filter-checkbox');
            const inputMap = {};
            const inputCheckMap = {};
            for (let input of allInputs) {
                inputMap[input.id] = input;
                inputCheckMap[input.id] = false;
            }

            const keys = Object.keys(s);
            for (let key of keys) {
                const values = s[key];
                for (let value of values) {
                    const inputElemId = `filter[${key}][${value}]`;
                    inputCheckMap[inputElemId] = true;
                }
            }

            for (let inputId in inputMap) {
                if (!!inputCheckMap[inputId] === true) {
                    const input = inputMap[inputId];
                    input.checked = true;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            filterSubject.subscribe(s => {
                refreshFilterInputs(s);
            });
            filterSubject.pipe(
                debounceTime(200),
                distinctUntilChanged((prev, curr) => {
                    return JSON.stringify(prev) === JSON.stringify(curr);
                }),
                pairwise(),
                map(p => p[1]),
            ).subscribe((filter) => {
                const url = new URL(window.location);
                const searchParams = new URLSearchParams();
                const filterKeys = Object.keys(filter);
                for (const filterKey of filterKeys) {
                    for (const filterValue of filter[filterKey]) {
                        searchParams.append(filterKey, filterValue);
                    }
                }
                url.search = searchParams.toString();
                window.location = url.toString();
            });
        });

    </script>
    </html>

{{end}}
