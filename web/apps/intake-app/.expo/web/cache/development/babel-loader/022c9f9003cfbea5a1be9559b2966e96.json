{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { layout } from \"../styles\";\nimport React, { useReducer } from 'react';\nimport NavigationBar from \"./NavigationBar\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport FormsScreen from \"./screens/FormsScreen\";\nimport routes from \"../constants/routes\";\nimport { NavigationTheme } from \"../constants/theme\";\nimport host from \"../constants/host\";\nimport DesignSystemDemoScreen from \"./screens/DesignSystemDemoScreen\";\nimport RecordsScreen from \"./screens/RecordsScreen\";\nimport AddRecordScreen from \"./screens/AddRecordScreen\";\nimport ViewRecordScreen from \"./screens/ViewRecordScreen\";\nimport LoginCallbackScreen from \"./screens/LoginCallbackScreen\";\nimport { initialRecordsState, recordsReducer } from \"../reducers/recordsReducers\";\nexport default function Router() {\n  var Stack = createStackNavigator();\n\n  var _useReducer = useReducer(recordsReducer, initialRecordsState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var linkingConfig = {\n    prefixes: [host],\n    config: {\n      screens: {\n        Forms: routes.forms.name,\n        Records: routes.records.name,\n        AddRecord: routes.addRecord.name,\n        ViewRecord: routes.viewRecord.name,\n        DesignSystem: routes.designSystem.name,\n        LoginCallback: 'callback'\n      }\n    }\n  };\n  return React.createElement(View, {\n    style: layout.container\n  }, React.createElement(NavigationContainer, {\n    theme: NavigationTheme,\n    linking: linkingConfig\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: routes.forms.name\n  }, React.createElement(Stack.Group, {\n    screenOptions: {\n      header: function header(props) {\n        return React.createElement(NavigationBar, props);\n      }\n    }\n  }, React.createElement(Stack.Screen, {\n    name: routes.forms.name,\n    component: FormsScreen,\n    options: {\n      title: routes.forms.title\n    }\n  }), React.createElement(Stack.Screen, {\n    name: 'callback',\n    component: LoginCallbackScreen,\n    options: {\n      title: routes.forms.title\n    }\n  }), React.createElement(Stack.Screen, {\n    name: routes.records.name,\n    options: {\n      title: routes.records.title\n    }\n  }, function (props) {\n    return React.createElement(RecordsScreen, _extends({}, props, {\n      state: state,\n      dispatch: dispatch\n    }));\n  }), React.createElement(Stack.Screen, {\n    name: routes.addRecord.name,\n    options: {\n      title: routes.addRecord.title\n    }\n  }, function (props) {\n    return React.createElement(AddRecordScreen, _extends({}, props, {\n      state: state,\n      dispatch: dispatch\n    }));\n  }), React.createElement(Stack.Screen, {\n    name: routes.viewRecord.name,\n    options: {\n      title: routes.viewRecord.title\n    }\n  }, function (props) {\n    return React.createElement(ViewRecordScreen, _extends({}, props, {\n      state: state,\n      dispatch: dispatch\n    }));\n  }), React.createElement(Stack.Screen, {\n    name: routes.designSystem.name,\n    component: DesignSystemDemoScreen,\n    options: {\n      title: routes.designSystem.title\n    }\n  })))));\n}","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/Router.tsx"],"names":["layout","React","useReducer","NavigationBar","NavigationContainer","createStackNavigator","FormsScreen","routes","NavigationTheme","host","DesignSystemDemoScreen","RecordsScreen","AddRecordScreen","ViewRecordScreen","LoginCallbackScreen","initialRecordsState","recordsReducer","Router","Stack","state","dispatch","linkingConfig","prefixes","config","screens","Forms","forms","name","Records","records","AddRecord","addRecord","ViewRecord","viewRecord","DesignSystem","designSystem","LoginCallback","container","header","props","title"],"mappings":"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","sourcesContent":["import {View} from 'react-native';\nimport {layout} from '../styles';\nimport React, {useReducer} from 'react';\nimport NavigationBar from './NavigationBar';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport FormsScreen from './screens/FormsScreen';\nimport routes from '../constants/routes';\nimport {NavigationTheme} from '../constants/theme';\nimport host from \"../constants/host\";\nimport DesignSystemDemoScreen from \"./screens/DesignSystemDemoScreen\";\nimport RecordsScreen from \"./screens/RecordsScreen\";\nimport AddRecordScreen from \"./screens/AddRecordScreen\";\nimport ViewRecordScreen from \"./screens/ViewRecordScreen\";\nimport LoginCallbackScreen from \"./screens/LoginCallbackScreen\";\nimport {initialRecordsState, recordsReducer, RecordsStoreProps} from \"../reducers/recordsReducers\";\n\nexport type ScreenProps = {\n    navigation: any,\n    route: any,\n    state: RecordsStoreProps,\n    dispatch: any\n}\n\nexport default function Router() {\n    const Stack = createStackNavigator();\n    const [state, dispatch] = useReducer(recordsReducer, initialRecordsState);\n\n    const linkingConfig = {\n        prefixes: [host],\n        config: {\n            screens: {\n                Forms: routes.forms.name,\n                Records: routes.records.name,\n                AddRecord: routes.addRecord.name,\n                ViewRecord: routes.viewRecord.name,\n                DesignSystem: routes.designSystem.name,\n                LoginCallback: 'callback'\n            }\n        }\n    };\n\n    return (\n        <View style={layout.container}>\n            <NavigationContainer theme={NavigationTheme} linking={linkingConfig}>\n                <Stack.Navigator initialRouteName={routes.forms.name}>\n                    <Stack.Group\n                        screenOptions={{\n                            header: (props) => <NavigationBar {...props} />\n                        }}\n                    >\n                        <Stack.Screen\n                            name={routes.forms.name}\n                            component={FormsScreen}\n                            options={{\n                                title: routes.forms.title,\n\n                            }}\n                        />\n                        <Stack.Screen\n                            name={'callback'}\n                            component={LoginCallbackScreen}\n                            options={{\n                                title: routes.forms.title,\n                            }}\n                        />\n                        <Stack.Screen\n                            name={routes.records.name}\n                            options={{\n                                title: routes.records.title\n                            }}\n                        >\n                            {(props) =>\n                                <RecordsScreen {...props} state={state} dispatch={dispatch}/>\n                            }\n                        </Stack.Screen>\n                        <Stack.Screen\n                            name={routes.addRecord.name}\n                            options={{\n                                title: routes.addRecord.title\n                            }}\n                        >\n                            {(props) =>\n                                <AddRecordScreen {...props} state={state} dispatch={dispatch}/>\n                            }\n                        </Stack.Screen>\n                        <Stack.Screen\n                            name={routes.viewRecord.name}\n                            options={{\n                                title: routes.viewRecord.title\n                            }}\n                        >\n                            {(props) =>\n                                <ViewRecordScreen {...props} state={state} dispatch={dispatch}/>\n                            }\n                        </Stack.Screen>\n                        <Stack.Screen\n                            name={routes.designSystem.name}\n                            component={DesignSystemDemoScreen}\n                            options={{\n                                title: routes.designSystem.title\n                            }}\n                        />\n                    </Stack.Group>\n                </Stack.Navigator>\n            </NavigationContainer>\n        </View>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}