{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"windowFeatures\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useMemo, useEffect, useState } from 'react';\nimport { AuthRequest } from \"./AuthRequest\";\nimport { resolveDiscoveryAsync } from \"./Discovery\";\nexport function useAutoDiscovery(issuerOrDiscovery) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      discovery = _useState2[0],\n      setDiscovery = _useState2[1];\n\n  useEffect(function () {\n    var isAllowed = true;\n    resolveDiscoveryAsync(issuerOrDiscovery).then(function (discovery) {\n      if (isAllowed) {\n        setDiscovery(discovery);\n      }\n    });\n    return function () {\n      isAllowed = false;\n    };\n  }, [issuerOrDiscovery]);\n  return discovery;\n}\nexport function useLoadedAuthRequest(config, discovery, AuthRequestInstance) {\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      request = _useState4[0],\n      setRequest = _useState4[1];\n\n  var scopeString = useMemo(function () {\n    var _config$scopes;\n\n    return (_config$scopes = config.scopes) == null ? void 0 : _config$scopes.join(',');\n  }, [config.scopes]);\n  var extraParamsString = useMemo(function () {\n    return JSON.stringify(config.extraParams || {});\n  }, [config.extraParams]);\n  useEffect(function () {\n    var isMounted = true;\n\n    if (discovery) {\n      var _request = new AuthRequestInstance(config);\n\n      _request.makeAuthUrlAsync(discovery).then(function () {\n        if (isMounted) {\n          setRequest(_request);\n        }\n      });\n    }\n\n    return function () {\n      isMounted = false;\n    };\n  }, [discovery == null ? void 0 : discovery.authorizationEndpoint, config.clientId, config.redirectUri, config.responseType, config.prompt, config.clientSecret, config.codeChallenge, config.state, config.usePKCE, scopeString, extraParamsString]);\n  return request;\n}\nexport function useAuthRequestResult(request, discovery) {\n  var customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      result = _useState6[0],\n      setResult = _useState6[1];\n\n  var promptAsync = useCallback(function _callee() {\n    var _customOptions$window;\n\n    var _ref,\n        _ref$windowFeatures,\n        windowFeatures,\n        options,\n        inputOptions,\n        result,\n        _args = arguments;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _ref$windowFeatures = _ref.windowFeatures, windowFeatures = _ref$windowFeatures === void 0 ? {} : _ref$windowFeatures, options = _objectWithoutProperties(_ref, _excluded);\n\n            if (!(!discovery || !request)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n\n          case 4:\n            inputOptions = _objectSpread(_objectSpread(_objectSpread({}, customOptions), options), {}, {\n              windowFeatures: _objectSpread(_objectSpread({}, (_customOptions$window = customOptions.windowFeatures) != null ? _customOptions$window : {}), windowFeatures)\n            });\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(request == null ? void 0 : request.promptAsync(discovery, inputOptions));\n\n          case 7:\n            result = _context.sent;\n            setResult(result);\n            return _context.abrupt(\"return\", result);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [request == null ? void 0 : request.url, discovery == null ? void 0 : discovery.authorizationEndpoint]);\n  return [result, promptAsync];\n}\nexport function useAuthRequest(config, discovery) {\n  var request = useLoadedAuthRequest(config, discovery, AuthRequest);\n\n  var _useAuthRequestResult = useAuthRequestResult(request, discovery),\n      _useAuthRequestResult2 = _slicedToArray(_useAuthRequestResult, 2),\n      result = _useAuthRequestResult2[0],\n      promptAsync = _useAuthRequestResult2[1];\n\n  return [request, result, promptAsync];\n}","map":{"version":3,"sources":["../src/AuthRequestHooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useEffect, useState } from 'react';\n\nimport { AuthRequest } from './AuthRequest';\nimport { AuthRequestConfig, AuthRequestPromptOptions } from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument, IssuerOrDiscovery, resolveDiscoveryAsync } from './Discovery';\n\n/**\n * Fetch the discovery document from an OpenID Connect issuer.\n *\n * @param issuerOrDiscovery\n */\nexport function useAutoDiscovery(issuerOrDiscovery: IssuerOrDiscovery): DiscoveryDocument | null {\n  const [discovery, setDiscovery] = useState<DiscoveryDocument | null>(null);\n\n  useEffect(() => {\n    let isAllowed = true;\n    resolveDiscoveryAsync(issuerOrDiscovery).then((discovery) => {\n      if (isAllowed) {\n        setDiscovery(discovery);\n      }\n    });\n\n    return () => {\n      isAllowed = false;\n    };\n  }, [issuerOrDiscovery]);\n\n  return discovery;\n}\n\nexport function useLoadedAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null,\n  AuthRequestInstance: typeof AuthRequest\n): AuthRequest | null {\n  const [request, setRequest] = useState<AuthRequest | null>(null);\n  const scopeString = useMemo(() => config.scopes?.join(','), [config.scopes]);\n  const extraParamsString = useMemo(\n    () => JSON.stringify(config.extraParams || {}),\n    [config.extraParams]\n  );\n  useEffect(\n    () => {\n      let isMounted = true;\n\n      if (discovery) {\n        const request = new AuthRequestInstance(config);\n        request.makeAuthUrlAsync(discovery).then(() => {\n          if (isMounted) {\n            // @ts-ignore\n            setRequest(request);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      discovery?.authorizationEndpoint,\n      config.clientId,\n      config.redirectUri,\n      config.responseType,\n      config.prompt,\n      config.clientSecret,\n      config.codeChallenge,\n      config.state,\n      config.usePKCE,\n      scopeString,\n      extraParamsString,\n    ]\n  );\n  return request;\n}\n\ntype PromptMethod = (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>;\n\nexport function useAuthRequestResult(\n  request: AuthRequest | null,\n  discovery: DiscoveryDocument | null,\n  customOptions: AuthRequestPromptOptions = {}\n): [AuthSessionResult | null, PromptMethod] {\n  const [result, setResult] = useState<AuthSessionResult | null>(null);\n\n  const promptAsync = useCallback(\n    async ({ windowFeatures = {}, ...options }: AuthRequestPromptOptions = {}) => {\n      if (!discovery || !request) {\n        throw new Error('Cannot prompt to authenticate until the request has finished loading.');\n      }\n      const inputOptions = {\n        ...customOptions,\n        ...options,\n        windowFeatures: {\n          ...(customOptions.windowFeatures ?? {}),\n          ...windowFeatures,\n        },\n      };\n      const result = await request?.promptAsync(discovery, inputOptions);\n      setResult(result);\n      return result;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [request?.url, discovery?.authorizationEndpoint]\n  );\n\n  return [result, promptAsync];\n}\n\n/**\n * Load an authorization request.\n * Returns a loaded request, a response, and a prompt method.\n * When the prompt method completes then the response will be fulfilled.\n *\n * @param config\n * @param discovery\n */\nexport function useAuthRequest(\n  config: AuthRequestConfig,\n  discovery: DiscoveryDocument | null\n): [\n  AuthRequest | null,\n  AuthSessionResult | null,\n  (options?: AuthRequestPromptOptions) => Promise<AuthSessionResult>\n] {\n  const request = useLoadedAuthRequest(config, discovery, AuthRequest);\n  const [result, promptAsync] = useAuthRequestResult(request, discovery);\n  return [request, result, promptAsync];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}