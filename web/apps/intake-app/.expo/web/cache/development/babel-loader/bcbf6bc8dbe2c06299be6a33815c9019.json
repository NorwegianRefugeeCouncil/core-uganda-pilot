{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { ThemeProvider } from \"./theming\";\nimport { Provider as SettingsProvider } from \"./settings\";\nimport MaterialCommunityIcon from \"../components/MaterialCommunityIcon\";\nimport PortalHost from \"../components/Portal/PortalHost\";\nimport DefaultTheme from \"../styles/DefaultTheme\";\nimport DarkTheme from \"../styles/DarkTheme\";\n\nvar Provider = function Provider(_ref) {\n  var props = _extends({}, _ref);\n\n  var colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      reduceMotionEnabled = _React$useState2[0],\n      setReduceMotionEnabled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(colorSchemeName),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      colorScheme = _React$useState4[0],\n      setColorScheme = _React$useState4[1];\n\n  var handleAppearanceChange = function handleAppearanceChange(preferences) {\n    var colorScheme = preferences.colorScheme;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(function () {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener('reduceMotionChanged', setReduceMotionEnabled);\n    }\n\n    return function () {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener('reduceMotionChanged', setReduceMotionEnabled);\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(function () {\n    if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    return function () {\n      if (!props.theme) Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  var getTheme = function getTheme() {\n    var providedTheme = props.theme;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      var theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n      return _objectSpread(_objectSpread({}, theme), {}, {\n        animation: _objectSpread(_objectSpread({}, theme.animation), {}, {\n          scale: reduceMotionEnabled ? 0 : 1\n        })\n      });\n    }\n  };\n\n  var children = props.children,\n      settings = props.settings;\n  return React.createElement(PortalHost, null, React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\n\nexport default Provider;","map":{"version":3,"sources":["Provider.tsx"],"names":["Provider","props","colorSchemeName","Appearance","React","handleAppearanceChange","preferences","colorScheme","setColorScheme","AccessibilityInfo","getTheme","theme","providedTheme","animation","scale","reduceMotionEnabled","settings","icon","MaterialCommunityIcon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { AccessibilityInfo, Appearance, ColorSchemeName } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    if (!props.theme) {\n      AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        AccessibilityInfo.removeEventListener(\n          'reduceMotionChanged',\n          setReduceMotionEnabled\n        );\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    if (!props.theme) Appearance?.addChangeListener(handleAppearanceChange);\n    return () => {\n      if (!props.theme)\n        Appearance?.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}