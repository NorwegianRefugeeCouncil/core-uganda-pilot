{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport SceneView from \"./SceneView\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      defaultScreenOptions = _ref.defaultScreenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange,\n      stackRef = _React$useContext.stackRef;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var config = screens[route.name];\n    var screen = config.props;\n    var navigation = navigations[route.key];\n    var optionsList = [screenOptions].concat(_toConsumableArray(config.options ? config.options.filter(Boolean) : []), [screen.options, options[route.key]]);\n    var customOptions = optionsList.reduce(function (acc, curr) {\n      return _extends(acc, typeof curr !== 'function' ? curr : curr({\n        route: route,\n        navigation: navigation\n      }));\n    }, {});\n\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: customOptions\n    }) : defaultScreenOptions), customOptions);\n\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n              _ = o[_route$key],\n              rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n\n          return rest;\n        }\n\n        return o;\n      });\n    };\n\n    acc[route.key] = {\n      route: route,\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","stackRef","context","navigation","onAction","addListener","addKeyedListener","onRouteFocus","onDispatchAction","onOptionsChange","navigations","useNavigationCache","state","getState","setOptions","router","routes","useRouteCache","config","screens","route","screen","optionsList","options","customOptions","curr","mergedOptions","defaultScreenOptions","clearOptions","o","rest","acc","render"],"mappings":";;;;;;;;;;;;;;AAMA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA;AAIA,OAAA,iBAAA;AACA,OAAA,sBAAA;AACA,OAAA,SAAA;AAUA,OAAA,kBAAA;AACA,OAAA,aAAA;AAwDA,eAAe,SAAA,cAAA,OAmB6B;AAAA,MAd1C,KAc0C,QAd1C,KAc0C;AAAA,MAd1C,OAc0C,QAd1C,OAc0C;AAAA,MAd1C,UAc0C,QAd1C,UAc0C;AAAA,MAd1C,aAc0C,QAd1C,aAc0C;AAAA,MAd1C,oBAc0C,QAd1C,oBAc0C;AAAA,MAd1C,QAc0C,QAd1C,QAc0C;AAAA,MAd1C,QAc0C,QAd1C,QAc0C;AAAA,MAd1C,QAc0C,QAd1C,QAc0C;AAAA,MAd1C,WAc0C,QAd1C,WAc0C;AAAA,MAd1C,gBAc0C,QAd1C,gBAc0C;AAAA,MAd1C,YAc0C,QAd1C,YAc0C;AAAA,MAd1C,MAc0C,QAd1C,MAc0C;AAAA,MAD1CA,OAC0C,QAD1CA,OAC0C;;AAC1C,wBAA8BC,KAAK,CAALA,QAAAA,CAA9B,EAA8BA,CAA9B;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AACA,0BAAwDA,KAAK,CAALA,UAAAA,CAAxD,wBAAwDA,CAAxD;AAAA,MAAM,gBAAN,qBAAM,gBAAN;AAAA,MAAM,eAAN,qBAAM,eAAN;AAAA,MAA2CC,QAA3C,qBAA2CA,QAA3C;;AAIA,MAAMC,OAAO,GAAG,KAAK,CAAL,OAAA,CACd;AAAA,WAAO;AACLC,MAAAA,UADK,EACLA,UADK;AAELC,MAAAA,QAFK,EAELA,QAFK;AAGLC,MAAAA,WAHK,EAGLA,WAHK;AAILC,MAAAA,gBAJK,EAILA,gBAJK;AAKLC,MAAAA,YALK,EAKLA,YALK;AAMLC,MAAAA,gBANK,EAMLA,gBANK;AAOLC,MAAAA,eAPK,EAOLA,eAPK;AAQLR,MAAAA,QAAAA,EAAAA;AARK,KAAP;AAAA,GADc,EAWd,CAAA,UAAA,EAAA,QAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,eAAA,EAXF,QAWE,CAXc,CAAhB;AAuBA,MAAMS,WAAW,GAAGC,kBAAkB,CAAiC;AACrEC,IAAAA,KADqE,EACrEA,KADqE;AAErEC,IAAAA,QAFqE,EAErEA,QAFqE;AAGrEV,IAAAA,UAHqE,EAGrEA,UAHqE;AAIrEW,IAAAA,UAJqE,EAIrEA,UAJqE;AAKrEC,IAAAA,MALqE,EAKrEA,MALqE;AAMrEhB,IAAAA,OAAAA,EAAAA;AANqE,GAAjC,CAAtC;AASA,MAAMiB,MAAM,GAAGC,aAAa,CAACL,KAAK,CAAlC,MAA4B,CAA5B;AAEA,SAAO,MAAM,CAAN,MAAA,CAUL,UAAA,GAAA,EAAA,KAAA,EAAA,CAAA,EAAmB;AACnB,QAAMM,MAAM,GAAGC,OAAO,CAACC,KAAK,CAA5B,IAAsB,CAAtB;AACA,QAAMC,MAAM,GAAGH,MAAM,CAArB,KAAA;AACA,QAAMf,UAAU,GAAGO,WAAW,CAACU,KAAK,CAApC,GAA8B,CAA9B;AAEA,QAAME,WAAW,IAAG,aAAH,4BAIVJ,MAAM,CAANA,OAAAA,GACDA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,CADCA,OACDA,CADCA,GAJa,EAAH,IAQfG,MAAM,CARY,OAAH,EAUfE,OAAO,CAACH,KAAK,CAVf,GAUS,CAVQ,EAAjB;AAaA,QAAMI,aAAa,GAAG,WAAW,CAAX,MAAA,CACpB,UAAA,GAAA,EAAA,IAAA;AAAA,aACE,SAAA,GAAA,EAEE,OAAA,IAAA,KAAA,UAAA,GAAA,IAAA,GAAoCC,IAAI,CAAC;AAAEL,QAAAA,KAAF,EAAEA,KAAF;AAASjB,QAAAA,UAAAA,EAAAA;AAAT,OAAD,CAF1C,CADF;AAAA,KADoB,EAAtB,EAAsB,CAAtB;;AASA,QAAMuB,aAAa,mCACb,OAAA,oBAAA,KAAA,UAAA,GAEAC,oBAAoB,CAAC;AACnBP,MAAAA,KADmB,EACnBA,KADmB;AAEnBjB,MAAAA,UAFmB,EAEnBA,UAFmB;AAGnBoB,MAAAA,OAAO,EAAEC;AAHU,KAAD,CAFpB,GADgB,oBAAH,GASdA,aATc,CAAnB;;AAYA,QAAMI,YAAY,GAAG,SAAfA,YAAe;AAAA,aACnBd,UAAU,CAAEe,UAAAA,CAAD,EAAO;AAChB,YAAIT,KAAK,CAALA,GAAAA,IAAJ,CAAA,EAAoB;AAElB,2BAASA,KAAK,CAAN,GAAR;AAAA,cAAM,CAAN,GAAA,CAAA;AAAA,cAA2BU,IAA3B,4BAAA,CAAA;;AACA,iBAAA,IAAA;AACD;;AAED,eAAA,CAAA;AARJ,OACY,CADS;AAAA,KAArB;;AAWAC,IAAAA,GAAG,CAACX,KAAK,CAATW,GAAG,CAAHA,GAAiB;AACfX,MAAAA,KADe,EACfA,KADe;AAGfjB,MAAAA,UAHe,EAGfA,UAHe;AAIf6B,MAAAA,MAJe,oBAIN;AACP,eACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;AAAmC,UAAA,GAAG,EAAEZ,KAAK,CAA7C,GAAA;AAAmD,UAAA,KAAK,EAAElB;AAA1D,SAAA,EACE,KAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;AAA4B,UAAA,KAAK,EAAEC;AAAnC,SAAA,EACE,KAAA,CAAA,aAAA,CAAC,sBAAD,CAAA,QAAA,EAAA;AAAiC,UAAA,KAAK,EAAEiB;AAAxC,SAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,UAAA,UAAU,EADZ,UAAA;AAEE,UAAA,KAAK,EAFP,KAAA;AAGE,UAAA,MAAM,EAHR,MAAA;AAIE,UAAA,UAAU,EAAER,KAAK,CAALA,MAAAA,CAAAA,CAAAA,EAJd,KAAA;AAKE,UAAA,QAAQ,EALV,QAAA;AAME,UAAA,QAAQ,EANV,QAAA;AAOE,UAAA,OAAO,EAPT,aAAA;AAQE,UAAA,YAAY,EAAEgB;AARhB,SAAA,CADF,CADF,CADF,CADF;AALa,OAAA;AAwBfL,MAAAA,OAAO,EAAEG;AAxBM,KAAjBK;AA2BA,WAAA,GAAA;AAvFK,GAAA,EAAP,EAAO,CAAP;AAyFD","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap> &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}