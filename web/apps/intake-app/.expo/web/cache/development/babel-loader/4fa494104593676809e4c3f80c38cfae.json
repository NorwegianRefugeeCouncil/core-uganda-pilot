{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      status = _ref.status,\n      value = _ref.value,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n        });\n      },\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\nvar RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","rest","checkedColor","disabled","theme","rippleColor","color","context","checked","contextValue","status","value","handlePress","onPress","onValueChange","styles","testID","opacity","container","borderRadius","padding","withTheme","RadioButtonIOSWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}