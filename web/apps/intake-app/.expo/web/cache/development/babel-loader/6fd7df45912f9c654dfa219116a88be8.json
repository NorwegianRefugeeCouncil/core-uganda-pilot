{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n      route = _ref.route,\n      navigation = _ref.navigation,\n      routeState = _ref.routeState,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      options = _ref.options,\n      clearOptions = _ref.clearOptions;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n\n  var _useOptionsGetters = useOptionsGetters({\n    key: route.key,\n    options: options,\n    navigation: navigation\n  }),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter;\n\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var isInitialRef = React.useRef(true);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n  });\n  React.useEffect(function () {\n    return clearOptions;\n  }, []);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["clearOptions","navigatorKeyRef","React","getKey","addOptionsGetter","useOptionsGetters","key","route","options","navigation","setKey","getCurrentState","state","getState","currentRoute","r","setCurrentState","child","setState","routes","isInitialRef","getIsInitial","context","ScreenComponent","screen"],"mappings":"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","sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}