{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"children\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nvar FAR_FAR_AWAY = 30000;\nexport default function ResourceSavingScene(_ref) {\n  var visible = _ref.visible,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Platform.OS === 'web') {\n    return React.createElement(View, _extends({\n      hidden: !visible,\n      style: [{\n        display: visible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: visible ? 'auto' : 'none'\n    }, rest), children);\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: visible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews: Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true,\n    pointerEvents: visible ? 'auto' : 'none',\n    style: visible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingView.tsx"],"names":["FAR_FAR_AWAY","rest","Platform","display","visible","styles","detached","container","flex","overflow","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AASA,IAAMA,YAAY,GAAlB,KAAA;AAEA,eAAe,SAAA,mBAAA,OAKL;AAAA,MALkC,OAKlC,QALkC,OAKlC;AAAA,MALkC,QAKlC,QALkC,QAKlC;AAAA,MALkC,KAKlC,QALkC,KAKlC;AAAA,MADLC,IACK;;AACR,MAAIC,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzB,WACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAEE,MAAA,MAAM,EAAE,CAFV,OAAA;AAGE,MAAA,KAAK,EAAE,CACL;AAAEC,QAAAA,OAAO,EAAEC,OAAO,GAAA,MAAA,GAAY;AAA9B,OADK,EAELC,MAAM,CAFD,SAAA,EAHT,KAGS,CAHT;AAQE,MAAA,aAAa,EAAED,OAAO,GAAA,MAAA,GAAY;AARpC,KAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAeD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EADT,KACS,CADT;AAGE,IAAA,aAAa,EAAED,OAAO,GAAA,MAAA,GAAY;AAHpC,GAAA,EAKE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,WAAW,EADb,KAAA;AAEE,IAAA,qBAAqB,EAGnBF,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAyBA,QAAQ,CAARA,EAAAA,KAAzBA,OAAAA,GAAmD,CAAnDA,OAAAA,GALJ,IAAA;AAOE,IAAA,aAAa,EAAEE,OAAO,GAAA,MAAA,GAPxB,MAAA;AAQE,IAAA,KAAK,EAAEA,OAAO,GAAGC,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAACC;AAR5C,GAAA,EANJ,QAMI,CALF,CADF;AAoBD;AAED,IAAMD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BE,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EADI,CAAA;AAERG,IAAAA,GAAG,EAAEX;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}