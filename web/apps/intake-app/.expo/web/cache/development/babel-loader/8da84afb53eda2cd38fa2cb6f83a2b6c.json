{"ast":null,"code":"import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContainerRefContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n\n    if (!to.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\" + to + \").\");\n    }\n\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["navigation","React","linking","linkTo","to","options","state","getStateFromPath","action","getActionFromState"],"mappings":"AAAA,SAAA,kBAAA,EAAA,gBAAA,EAAA,6BAAA,QAAA,wBAAA;AAKA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,cAAA;AAiBA,eAAe,SAAA,SAAA,GAEX;AACF,MAAMA,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,6BAAmBA,CAAnB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAALA,UAAAA,CAAhB,cAAgBA,CAAhB;AAEA,MAAME,MAAM,GAAG,KAAK,CAAL,WAAA,CACZC,UAAAA,EAAD,EAAuB;AACrB,QAAIJ,UAAU,KAAd,SAAA,EAA8B;AAC5B,YAAM,IAAA,KAAA,CAAN,kFAAM,CAAN;AAGD;;AAED,QAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAE1BA,MAAAA,UAAU,CAAVA,QAAAA,CAAoBI,EAAE,CAAtBJ,MAAAA,EAA+BI,EAAE,CAAjCJ,MAAAA;AACA;AACD;;AAED,QAAI,CAACI,EAAE,CAAFA,UAAAA,CAAL,GAAKA,CAAL,EAAyB;AACvB,YAAM,IAAA,KAAA,oCAAN,EAAM,QAAN;AACD;;AAED,QAAQC,OAAR,GAAA,OAAA,CAAQA,OAAR;AAEA,QAAMC,KAAK,GAAGD,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,gBAAAA,GACVA,OAAO,CAAPA,gBAAAA,CAAAA,EAAAA,EAA6BA,OAAO,CAD1BA,MACVA,CADUA,GAEVE,gBAAgB,CAAA,EAAA,EAAKF,OAAL,KAAA,IAAKA,IAAAA,OAAL,KAAA,KAAA,CAAKA,GAAL,KAAA,CAAKA,GAAAA,OAAO,CAFhC,MAEoB,CAFpB;;AAIA,QAAA,KAAA,EAAW;AACT,UAAMG,MAAM,GAAGC,kBAAkB,CAAA,KAAA,EAAQJ,OAAR,KAAA,IAAQA,IAAAA,OAAR,KAAA,KAAA,CAAQA,GAAR,KAAA,CAAQA,GAAAA,OAAO,CAAhD,MAAiC,CAAjC;;AAEA,UAAIG,MAAM,KAAV,SAAA,EAA0B;AACxBR,QAAAA,UAAU,CAAVA,QAAAA,CAAAA,MAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,UAAU,CAAVA,KAAAA,CAAAA,KAAAA;AACD;AAPH,KAAA,MAQO;AACL,YAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;AACD;AAlCU,GAAA,EAoCb,CAAA,OAAA,EApCF,UAoCE,CApCa,CAAf;AAuCA,SAAA,MAAA;AACD","sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}