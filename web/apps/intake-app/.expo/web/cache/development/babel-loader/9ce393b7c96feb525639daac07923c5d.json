{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\nimport TextInput from \"./TextInput\";\nimport Select from \"./Select\";\nimport { Controller } from \"react-hook-form\";\nimport { FieldKind } from \"@core/api-client\";\nimport { getFieldKind } from \"@core/api-client\";\nimport ReferenceInput from \"./ReferenceInput\";\n\nvar FormControl = function FormControl(_ref) {\n  var fieldDefinition = _ref.fieldDefinition,\n      style = _ref.style,\n      control = _ref.control,\n      name = _ref.name,\n      value = _ref.value;\n  return React.createElement(View, {\n    style: {\n      margin: 10\n    }\n  }, React.createElement(Controller, {\n    name: name,\n    control: control,\n    defaultValue: value,\n    rules: {},\n    render: function render(_ref2) {\n      var _ref2$field = _ref2.field,\n          onChange = _ref2$field.onChange,\n          onBlur = _ref2$field.onBlur,\n          value = _ref2$field.value,\n          ref = _ref2$field.ref,\n          fieldState = _ref2.fieldState,\n          formState = _ref2.formState;\n      var fieldKind = getFieldKind(fieldDefinition.fieldType);\n\n      switch (fieldKind) {\n        case FieldKind.Reference:\n          return React.createElement(ReferenceInput, {\n            fieldDefinition: fieldDefinition,\n            style: style,\n            value: value,\n            onBlur: onBlur,\n            onChange: onChange\n          });\n\n        case FieldKind.Quantity:\n          return React.createElement(TextInput, _extends({\n            fieldDefinition: fieldDefinition,\n            style: style,\n            value: value,\n            onBlur: onBlur,\n            onChange: onChange,\n            isQuantity: true\n          }, fieldState));\n\n        case FieldKind.MultilineText:\n          return React.createElement(TextInput, _extends({\n            fieldDefinition: fieldDefinition,\n            style: style,\n            value: value,\n            onBlur: onBlur,\n            onChange: onChange,\n            isMultiple: true\n          }, fieldState));\n\n        case FieldKind.SingleSelect:\n          return React.createElement(Select, {\n            fieldDefinition: fieldDefinition,\n            style: style,\n            value: value,\n            onBlur: onBlur,\n            onChange: onChange\n          });\n\n        default:\n          return React.createElement(TextInput, _extends({\n            fieldDefinition: fieldDefinition,\n            style: style,\n            value: value,\n            onBlur: onBlur,\n            onChange: onChange\n          }, fieldState));\n      }\n    }\n  }));\n};\n\nexport default FormControl;","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/form/FormControl.tsx"],"names":["React","TextInput","Select","Controller","FieldKind","getFieldKind","ReferenceInput","FormControl","fieldDefinition","style","control","name","value","margin","field","onChange","onBlur","ref","fieldState","formState","fieldKind","fieldType","Reference","Quantity","MultilineText","SingleSelect"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,SAAiBC,UAAjB,QAAkC,iBAAlC;AACA,SAAyBC,SAAzB,QAAyC,kBAAzC;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AACA,OAAOC,cAAP;;AA0BA,IAAMC,WAAuC,GAAG,SAA1CA,WAA0C,OAOtC;AAAA,MALFC,eAKE,QALFA,eAKE;AAAA,MAJFC,KAIE,QAJFA,KAIE;AAAA,MAHFC,OAGE,QAHFA,OAGE;AAAA,MAFFC,IAEE,QAFFA,IAEE;AAAA,MADFC,KACE,QADFA,KACE;AACN,SAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT;AAAb,KACI,oBAAC,UAAD;AACI,IAAA,IAAI,EAAEF,IADV;AAEI,IAAA,OAAO,EAAED,OAFb;AAGI,IAAA,YAAY,EAAEE,KAHlB;AAII,IAAA,KAAK,EAAE,EAJX;AAKI,IAAA,MAAM,EAAE,uBAKE;AAAA,8BAHFE,KAGE;AAAA,UAHMC,QAGN,eAHMA,QAGN;AAAA,UAHgBC,MAGhB,eAHgBA,MAGhB;AAAA,UAHwBJ,KAGxB,eAHwBA,KAGxB;AAAA,UAH+BK,GAG/B,eAH+BA,GAG/B;AAAA,UAFFC,UAEE,SAFFA,UAEE;AAAA,UADFC,SACE,SADFA,SACE;AAEN,UAAMC,SAAS,GAAGf,YAAY,CAACG,eAAe,CAACa,SAAjB,CAA9B;;AAEA,cAAQD,SAAR;AACI,aAAKhB,SAAS,CAACkB,SAAf;AACI,iBACI,oBAAC,cAAD;AACI,YAAA,eAAe,EAAEd,eADrB;AAEI,YAAA,KAAK,EAAEC,KAFX;AAGI,YAAA,KAAK,EAAEG,KAHX;AAII,YAAA,MAAM,EAAEI,MAJZ;AAKI,YAAA,QAAQ,EAAED;AALd,YADJ;;AASJ,aAAKX,SAAS,CAACmB,QAAf;AACI,iBACI,oBAAC,SAAD;AACI,YAAA,eAAe,EAAEf,eADrB;AAEI,YAAA,KAAK,EAAEC,KAFX;AAGI,YAAA,KAAK,EAAEG,KAHX;AAII,YAAA,MAAM,EAAEI,MAJZ;AAKI,YAAA,QAAQ,EAAED,QALd;AAMI,YAAA,UAAU,EAAE;AANhB,aAOQG,UAPR,EADJ;;AAWJ,aAAKd,SAAS,CAACoB,aAAf;AACI,iBACI,oBAAC,SAAD;AACI,YAAA,eAAe,EAAEhB,eADrB;AAEI,YAAA,KAAK,EAAEC,KAFX;AAGI,YAAA,KAAK,EAAEG,KAHX;AAII,YAAA,MAAM,EAAEI,MAJZ;AAKI,YAAA,QAAQ,EAAED,QALd;AAMI,YAAA,UAAU,EAAE;AANhB,aAOQG,UAPR,EADJ;;AAWJ,aAAKd,SAAS,CAACqB,YAAf;AACI,iBACI,oBAAC,MAAD;AACI,YAAA,eAAe,EAAEjB,eADrB;AAEI,YAAA,KAAK,EAAEC,KAFX;AAGI,YAAA,KAAK,EAAEG,KAHX;AAII,YAAA,MAAM,EAAEI,MAJZ;AAKI,YAAA,QAAQ,EAAED;AALd,YADJ;;AASJ;AACI,iBACI,oBAAC,SAAD;AACI,YAAA,eAAe,EAAEP,eADrB;AAEI,YAAA,KAAK,EAAEC,KAFX;AAGI,YAAA,KAAK,EAAEG,KAHX;AAII,YAAA,MAAM,EAAEI,MAJZ;AAKI,YAAA,QAAQ,EAAED;AALd,aAMQG,UANR,EADJ;AA9CR;AAyDH;AAvEL,IADJ,CAFJ;AA8EH,CAtFD;;AAwFA,eAAeX,WAAf","sourcesContent":["import {Text, View, ViewStyle} from \"react-native\";\nimport React from \"react\";\nimport TextInput from \"./TextInput\";\nimport Select from \"./Select\";\nimport {Control, Controller} from \"react-hook-form\";\nimport {FieldDefinition, FieldKind} from \"@core/api-client\";\nimport {getFieldKind} from \"@core/api-client\";\nimport ReferenceInput from \"./ReferenceInput\";\n\n// TODO: move & clean up types\nexport type InputProps = {\n    fieldDefinition: FieldDefinition,\n    style?: ViewStyle,\n    value: any,\n    onChange: any,\n    onBlur?: any,\n    error?: any,\n    invalid?: boolean,\n    isTouched?: boolean,\n    isDirty?: boolean,\n    isMultiple?: boolean,\n    isQuantity?: boolean\n};\n\ntype FormControlProps = {\n    name: string,\n    fieldDefinition: FieldDefinition,\n    style?: ViewStyle,\n    value?: any,\n    control: Control<any, object>,\n    errors?: object\n};\n\nconst FormControl: React.FC<FormControlProps> = (\n    {\n        fieldDefinition,\n        style,\n        control,\n        name,\n        value,\n    }) => {\n    return (\n        // TODO: apply errors to all input types\n        <View style={{margin: 10}}>\n            <Controller\n                name={name}\n                control={control}\n                defaultValue={value}\n                rules={{}}\n                render={(\n                    {\n                        field: {onChange, onBlur, value, ref},\n                        fieldState,\n                        formState,\n                    }) => {\n\n                    const fieldKind = getFieldKind(fieldDefinition.fieldType);\n\n                    switch (fieldKind) {\n                        case FieldKind.Reference:\n                            return (\n                                <ReferenceInput\n                                    fieldDefinition={fieldDefinition}\n                                    style={style}\n                                    value={value}\n                                    onBlur={onBlur}\n                                    onChange={onChange}\n                                />\n                            )\n                        case FieldKind.Quantity:\n                            return (\n                                <TextInput\n                                    fieldDefinition={fieldDefinition}\n                                    style={style}\n                                    value={value}\n                                    onBlur={onBlur}\n                                    onChange={onChange}\n                                    isQuantity={true}\n                                    {...fieldState}\n                                />\n                            )\n                        case FieldKind.MultilineText:\n                            return (\n                                <TextInput\n                                    fieldDefinition={fieldDefinition}\n                                    style={style}\n                                    value={value}\n                                    onBlur={onBlur}\n                                    onChange={onChange}\n                                    isMultiple={true}\n                                    {...fieldState}\n                                />\n                            )\n                        case FieldKind.SingleSelect:\n                            return (\n                                <Select\n                                    fieldDefinition={fieldDefinition}\n                                    style={style}\n                                    value={value}\n                                    onBlur={onBlur}\n                                    onChange={onChange}\n                                />\n                            )\n                        default:\n                            return (\n                                <TextInput\n                                    fieldDefinition={fieldDefinition}\n                                    style={style}\n                                    value={value}\n                                    onBlur={onBlur}\n                                    onChange={onChange}\n                                    {...fieldState}\n                                />\n                            )\n                    }\n                }}\n            />\n        </View>\n    )\n};\n\nexport default FormControl;\n"]},"metadata":{},"sourceType":"module"}