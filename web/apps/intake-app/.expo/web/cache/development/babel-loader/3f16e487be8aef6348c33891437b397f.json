{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SecureStore from \"expo-secure-store\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as CryptoJS from \"react-native-crypto-js\";\nexport var storeEncryptedLocalData = function storeEncryptedLocalData(recordId, key, data) {\n  return SecureStore.setItemAsync(recordId, key).then(function _callee() {\n    var encryptedData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), key);\n            return _context.abrupt(\"return\", AsyncStorage.setItem(recordId, encryptedData.toString()));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\nexport var getEncryptedLocalData = function getEncryptedLocalData(recordId) {\n  return SecureStore.getItemAsync(recordId).then(function _callee2(key) {\n    var data, bytes;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(key == null)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(recordId));\n\n          case 4:\n            data = _context2.sent;\n\n            if (!(data == null)) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(CryptoJS.AES.decrypt(data, key));\n\n          case 9:\n            bytes = _context2.sent;\n            return _context2.abrupt(\"return\", JSON.parse(bytes.toString(CryptoJS.enc.Utf8)));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\nexport var deleteEncryptedLocalData = function deleteEncryptedLocalData(recordId) {\n  return SecureStore.getItemAsync(recordId).then(function (key) {\n    return AsyncStorage.removeItem(recordId);\n  }).then(function (key) {\n    return SecureStore.deleteItemAsync(recordId);\n  });\n};","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/utils/storage.ts"],"names":["SecureStore","AsyncStorage","CryptoJS","storeEncryptedLocalData","recordId","key","data","setItemAsync","then","encryptedData","AES","encrypt","JSON","stringify","setItem","toString","getEncryptedLocalData","getItemAsync","getItem","decrypt","bytes","parse","enc","Utf8","deleteEncryptedLocalData","removeItem","deleteItemAsync"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,wBAA1B;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,QAAD,EAAmBC,GAAnB,EAAgCC,IAAhC,EAA2D;AAC9F,SAAON,WAAW,CAACO,YAAZ,CAAyBH,QAAzB,EAAmCC,GAAnC,EACFG,IADE,CACG;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,YAAAA,aADJ,GACoBP,QAAQ,CAACQ,GAAT,CAAaC,OAAb,CAAqBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAArB,EAA2CD,GAA3C,CADpB;AAAA,6CAEKJ,YAAY,CAACa,OAAb,CAAqBV,QAArB,EAA+BK,aAAa,CAACM,QAAd,EAA/B,CAFL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADH,CAAP;AAKH,CANM;AAQP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACZ,QAAD,EAAsB;AACvD,SAAOJ,WAAW,CAACiB,YAAZ,CAAyBb,QAAzB,EACFI,IADE,CACG,kBAAOH,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACEA,GAAG,IAAI,IADT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAKiBJ,YAAY,CAACiB,OAAb,CAAqBd,QAArB,CALjB;;AAAA;AAKIE,YAAAA,IALJ;;AAAA,kBAMEA,IAAI,IAAI,IANV;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CASkBJ,QAAQ,CAACQ,GAAT,CAAaS,OAAb,CAAqBb,IAArB,EAA2BD,GAA3B,CATlB;;AAAA;AASIe,YAAAA,KATJ;AAAA,8CAUKR,IAAI,CAACS,KAAL,CAAWD,KAAK,CAACL,QAAN,CAAeb,QAAQ,CAACoB,GAAT,CAAaC,IAA5B,CAAX,CAVL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADH,CAAP;AAcH,CAfM;AAiBP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACpB,QAAD,EAAsB;AAC1D,SAAOJ,WAAW,CAACiB,YAAZ,CAAyBb,QAAzB,EACFI,IADE,CACG,UAACH,GAAD,EAAS;AACX,WAAOJ,YAAY,CAACwB,UAAb,CAAwBrB,QAAxB,CAAP;AACH,GAHE,EAIFI,IAJE,CAIG,UAACH,GAAD,EAAS;AACX,WAAOL,WAAW,CAAC0B,eAAZ,CAA4BtB,QAA5B,CAAP;AACH,GANE,CAAP;AAOH,CARM","sourcesContent":["import * as SecureStore from \"expo-secure-store\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as CryptoJS from \"react-native-crypto-js\";\n\nexport const storeEncryptedLocalData = (recordId: string, key: string, data: Record<any, any>) => {\n    return SecureStore.setItemAsync(recordId, key)\n        .then(async () => {\n            const encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), key);\n            return AsyncStorage.setItem(recordId, encryptedData.toString())\n        })\n}\n\nexport const getEncryptedLocalData = (recordId: string) => {\n    return SecureStore.getItemAsync(recordId)\n        .then(async (key) => {\n            if (key == null) {\n                return;\n            }\n\n            const data = await AsyncStorage.getItem(recordId);\n            if (data == null) {\n                return;\n            }\n            const bytes = await CryptoJS.AES.decrypt(data, key);\n            return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n            // TODO: delete data, once extracted to save space. or only after online submit?\n        })\n}\n\nexport const deleteEncryptedLocalData = (recordId: string) => {\n    return SecureStore.getItemAsync(recordId)\n        .then((key) => {\n            return AsyncStorage.removeItem(recordId)\n        })\n        .then((key) => {\n            return SecureStore.deleteItemAsync(recordId);\n        })\n}\n"]},"metadata":{},"sourceType":"module"}