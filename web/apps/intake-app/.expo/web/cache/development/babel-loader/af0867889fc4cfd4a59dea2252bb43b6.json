{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\n\nvar ListAccordion = function ListAccordion(_ref) {\n  var left = _ref.left,\n      right = _ref.right,\n      title = _ref.title,\n      description = _ref.description,\n      children = _ref.children,\n      theme = _ref.theme,\n      titleStyle = _ref.titleStyle,\n      descriptionStyle = _ref.descriptionStyle,\n      _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n      descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n      style = _ref.style,\n      id = _ref.id,\n      testID = _ref.testID,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      expandedProp = _ref.expanded;\n\n  var _React$useState = React.useState(expandedProp || false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expanded = _React$useState2[0],\n      setExpanded = _React$useState2[1];\n\n  var handlePressAction = function handlePressAction() {\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n\n    if (expandedProp === undefined) {\n      setExpanded(function (expanded) {\n        return !expanded;\n      });\n    }\n  };\n\n  var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n  var groupContext = React.useContext(ListAccordionGroupContext);\n\n  if (groupContext !== null && !id) {\n    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n  }\n\n  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n  var handlePress = groupContext && id !== undefined ? function () {\n    return groupContext.onAccordionPress(id);\n  } : handlePressAction;\n  return React.createElement(View, null, React.createElement(View, {\n    style: {\n      backgroundColor: theme.colors.background\n    }\n  }, React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: handlePress,\n    onLongPress: onLongPress,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    testID: testID,\n    delayPressIn: 0,\n    borderless: true\n  }, React.createElement(View, {\n    style: styles.row,\n    pointerEvents: \"none\"\n  }, left ? left({\n    color: isExpanded ? theme.colors.primary : descriptionColor\n  }) : null, React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: isExpanded ? theme.colors.primary : titleColor\n    }, titleStyle]\n  }, title), description && React.createElement(Text, {\n    selectable: false,\n    numberOfLines: descriptionNumberOfLines,\n    style: [styles.description, {\n      color: descriptionColor\n    }, descriptionStyle]\n  }, description)), React.createElement(View, {\n    style: [styles.item, description ? styles.multiline : undefined]\n  }, right ? right({\n    isExpanded: isExpanded\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isExpanded ? 'chevron-up' : 'chevron-down',\n    color: titleColor,\n    size: 24,\n    direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n  }))))), isExpanded ? React.Children.map(children, function (child) {\n    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n      return React.cloneElement(child, {\n        style: [styles.child, child.props.style]\n      });\n    }\n\n    return child;\n  }) : null);\n};\n\nListAccordion.displayName = 'List.Accordion';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expanded","expandedProp","React","handlePressAction","onPress","setExpanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","backgroundColor","background","styles","left","description","right","I18nManager","child","style","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme.colors.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          testID={testID}\n          delayPressIn={0}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: isExpanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description && (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              )}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={titleColor}\n                  size={24}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}