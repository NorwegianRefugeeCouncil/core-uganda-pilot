{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"right\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      right = _ref.right,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n  var font = theme.fonts.medium;\n  var labelMargin = icon ? 32 : 0;\n  return React.createElement(View, _extends({}, rest, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness\n    }, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: {\n      borderRadius: roundness\n    },\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, React.createElement(View, {\n    style: styles.content\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, _objectSpread(_objectSpread({\n      color: contentColor\n    }, font), {}, {\n      marginLeft: labelMargin\n    })]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","rest","roundness","backgroundColor","active","color","colors","contentColor","font","theme","labelMargin","icon","styles","borderRadius","selected","accessibilityLabel","wrapper","content","marginLeft","right","container","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","label","marginRight","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View\n      {...rest}\n      style={[\n        styles.container,\n        { backgroundColor, borderRadius: roundness },\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={{ borderRadius: roundness }}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}