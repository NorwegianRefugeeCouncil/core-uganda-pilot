{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nexport default function useComponent(Component, props) {\n  var propsRef = React.useRef(props);\n  propsRef.current = props;\n  React.useEffect(function () {\n    propsRef.current = null;\n  });\n  return React.useRef(function (rest) {\n    var props = propsRef.current;\n\n    if (props === null) {\n      throw new Error('The returned component must be rendered in the same render phase as the hook.');\n    }\n\n    return React.createElement(Component, _extends({}, props, rest));\n  }).current;\n}","map":{"version":3,"sources":["useComponent.tsx"],"names":["propsRef","React","rest","props"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,eAAe,SAAA,YAAA,CAAA,SAAA,EAAA,KAAA,EAGW;AACxB,MAAMA,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CADO,KACPA,CAAjB;AAKAD,EAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,IAAAA;AADFC,GAAAA;AAIA,SAAO,KAAK,CAAL,MAAA,CAAcC,UAAAA,IAAD,EAAkD;AACpE,QAAMC,KAAK,GAAGH,QAAQ,CAAtB,OAAA;;AAEA,QAAIG,KAAK,KAAT,IAAA,EAAoB;AAClB,YAAM,IAAA,KAAA,CAAN,+EAAM,CAAN;AAJkE;;AAUpE,WAAO,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAP,IAAO,CAAA,CAAP;AAVK,GAAA,EAAP,OAAA;AAYD","sourcesContent":["import * as React from 'react';\n\nexport default function useComponent<\n  T extends React.ComponentType<any>,\n  P extends {}\n>(Component: T, props: P) {\n  const propsRef = React.useRef<P | null>(props);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n\n  return React.useRef((rest: Omit<React.ComponentProps<T>, keyof P>) => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    // @ts-expect-error: the props should be fine here\n    return <Component {...props} {...rest} />;\n  }).current;\n}\n"]},"metadata":{},"sourceType":"module"}