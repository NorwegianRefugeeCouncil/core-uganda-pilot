{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { FAB, Title } from 'react-native-paper';\nimport { layout } from \"../../styles\";\nimport routes from \"../../constants/routes\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useApiClient from \"../../utils/clients\";\nimport uuidv4 from 'uuid';\nimport { RECORD_ACTIONS } from \"../../reducers/recordsReducers\";\n\nvar RecordsScreen = function RecordsScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route,\n      state = _ref.state,\n      dispatch = _ref.dispatch;\n  var _route$params = route.params,\n      formId = _route$params.formId,\n      databaseId = _route$params.databaseId;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var client = useApiClient();\n  React.useEffect(function () {\n    client.listRecords({\n      formId: formId,\n      databaseId: databaseId\n    }).then(function (data) {\n      var _data$response;\n\n      dispatch({\n        type: RECORD_ACTIONS.GET_RECORDS,\n        payload: {\n          formId: formId,\n          records: (_data$response = data.response) == null ? void 0 : _data$response.items\n        }\n      });\n      setIsLoading(false);\n    });\n  }, [client]);\n  return React.createElement(View, {\n    style: [layout.container, layout.body]\n  }, React.createElement(Title, null, routes.records.title), !isLoading && React.createElement(View, null, React.createElement(FlatList, {\n    style: {\n      width: '100%'\n    },\n    data: state.formsById[formId].records,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(TouchableOpacity, {\n        key: item.id,\n        onPress: function onPress() {\n          return navigation.navigate(routes.viewRecord.name, {\n            recordId: item.id,\n            formId: formId\n          });\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          flex: 1\n        }\n      }, React.createElement(View, {\n        style: {\n          justifyContent: 'center',\n          paddingRight: 12\n        }\n      }, React.createElement(Text, null, item.id))));\n    }\n  }), React.createElement(FlatList, {\n    style: {\n      width: '100%'\n    },\n    data: state.formsById[formId].localRecords,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item,\n          index = _ref3.index;\n      return React.createElement(TouchableOpacity, {\n        key: index,\n        onPress: function onPress() {\n          return navigation.navigate(routes.addRecord.name, {\n            recordId: item,\n            formId: formId\n          });\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          flex: 1\n        }\n      }, React.createElement(View, {\n        style: {\n          justifyContent: 'center',\n          paddingRight: 12\n        }\n      }, React.createElement(Text, null, item))));\n    }\n  })), React.createElement(FAB, {\n    style: layout.fab,\n    icon: \"plus\",\n    color: 'white',\n    onPress: function onPress() {\n      return navigation.navigate(routes.addRecord.name, {\n        formId: formId,\n        recordId: uuidv4()\n      });\n    }\n  }));\n};\n\nexport default RecordsScreen;","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/screens/RecordsScreen.tsx"],"names":["React","FAB","Title","layout","routes","useApiClient","uuidv4","RECORD_ACTIONS","RecordsScreen","navigation","route","state","dispatch","params","formId","databaseId","useState","isLoading","setIsLoading","client","useEffect","listRecords","then","data","type","GET_RECORDS","payload","records","response","items","container","body","title","width","formsById","item","id","navigate","viewRecord","name","recordId","flexDirection","flex","justifyContent","paddingRight","localRecords","index","addRecord","fab"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,KAAb,QAAyB,oBAAzB;AACA,SAAQC,MAAR;AACA,OAAOC,MAAP;;;;;AAEA,OAAOC,YAAP;AACA,OAAOC,MAAP,MAAmB,MAAnB;AAEA,SAAQC,cAAR;;AAEA,IAAMC,aAAoC,GAAG,SAAvCA,aAAuC,OAA0C;AAAA,MAAxCC,UAAwC,QAAxCA,UAAwC;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AACnF,sBAA6BF,KAAK,CAACG,MAAnC;AAAA,MAAOC,MAAP,iBAAOA,MAAP;AAAA,MAAeC,UAAf,iBAAeA,UAAf;;AACA,wBAAkCf,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,MAAM,GAAGd,YAAY,EAA3B;AAEAL,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AAClBD,IAAAA,MAAM,CAACE,WAAP,CAAmB;AAACP,MAAAA,MAAM,EAANA,MAAD;AAASC,MAAAA,UAAU,EAAVA;AAAT,KAAnB,EACKO,IADL,CACU,UAACC,IAAD,EAAU;AAAA;;AACZX,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cAAc,CAACkB,WADhB;AAC6BC,QAAAA,OAAO,EAAE;AACvCZ,UAAAA,MAAM,EAANA,MADuC;AAEvCa,UAAAA,OAAO,oBAAEJ,IAAI,CAACK,QAAP,qBAAE,eAAeC;AAFe;AADtC,OAAD,CAAR;AAMAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KATL;AAUH,GAXD,EAWG,CAACC,MAAD,CAXH;AAaA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAChB,MAAM,CAAC2B,SAAR,EAAmB3B,MAAM,CAAC4B,IAA1B;AAAb,KACI,oBAAC,KAAD,QAAQ3B,MAAM,CAACuB,OAAP,CAAeK,KAAvB,CADJ,EAEK,CAACf,SAAD,IACG,oBAAC,IAAD,QACI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAE;AAACgB,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,IAAI,EAAEtB,KAAK,CAACuB,SAAN,CAAgBpB,MAAhB,EAAwBa,OAFlC;AAGI,IAAA,UAAU,EAAE;AAAA,UAAEQ,IAAF,SAAEA,IAAF;AAAA,aACR,oBAAC,gBAAD;AACI,QAAA,GAAG,EAAEA,IAAI,CAACC,EADd;AAEI,QAAA,OAAO,EAAE;AAAA,iBAAM3B,UAAU,CAAC4B,QAAX,CAAoBjC,MAAM,CAACkC,UAAP,CAAkBC,IAAtC,EAA4C;AAACC,YAAAA,QAAQ,EAAEL,IAAI,CAACC,EAAhB;AAAoBtB,YAAAA,MAAM,EAANA;AAApB,WAA5C,CAAN;AAAA;AAFb,SAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAC2B,UAAAA,aAAa,EAAE,KAAhB;AAAuBC,UAAAA,IAAI,EAAE;AAA7B;AAAb,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,cAAc,EAAE,QAAjB;AAA2BC,UAAAA,YAAY,EAAE;AAAzC;AAAb,SACI,oBAAC,IAAD,QAAOT,IAAI,CAACC,EAAZ,CADJ,CADJ,CAJJ,CADQ;AAAA;AAHhB,IADJ,EAiBI,oBAAC,QAAD;AACI,IAAA,KAAK,EAAE;AAACH,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,IAAI,EAAEtB,KAAK,CAACuB,SAAN,CAAgBpB,MAAhB,EAAwB+B,YAFlC;AAGI,IAAA,UAAU,EAAE;AAAA,UAAEV,IAAF,SAAEA,IAAF;AAAA,UAAQW,KAAR,SAAQA,KAAR;AAAA,aACR,oBAAC,gBAAD;AACI,QAAA,GAAG,EAAEA,KADT;AAEI,QAAA,OAAO,EAAE;AAAA,iBAAMrC,UAAU,CAAC4B,QAAX,CAAoBjC,MAAM,CAAC2C,SAAP,CAAiBR,IAArC,EAA2C;AAACC,YAAAA,QAAQ,EAAEL,IAAX;AAAiBrB,YAAAA,MAAM,EAANA;AAAjB,WAA3C,CAAN;AAAA;AAFb,SAII,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAC2B,UAAAA,aAAa,EAAE,KAAhB;AAAuBC,UAAAA,IAAI,EAAE;AAA7B;AAAb,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,cAAc,EAAE,QAAjB;AAA2BC,UAAAA,YAAY,EAAE;AAAzC;AAAb,SACI,oBAAC,IAAD,QAAOT,IAAP,CADJ,CADJ,CAJJ,CADQ;AAAA;AAHhB,IAjBJ,CAHR,EAuCI,oBAAC,GAAD;AACI,IAAA,KAAK,EAAEhC,MAAM,CAAC6C,GADlB;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAE,OAHX;AAII,IAAA,OAAO,EAAE;AAAA,aAAMvC,UAAU,CAAC4B,QAAX,CAAoBjC,MAAM,CAAC2C,SAAP,CAAiBR,IAArC,EAA2C;AAACzB,QAAAA,MAAM,EAANA,MAAD;AAAS0B,QAAAA,QAAQ,EAAElC,MAAM;AAAzB,OAA3C,CAAN;AAAA;AAJb,IAvCJ,CADJ;AAgDH,CAnED;;AAqEA,eAAeE,aAAf","sourcesContent":["import React from 'react';\nimport {FAB, Title} from 'react-native-paper';\nimport {layout} from '../../styles';\nimport routes from '../../constants/routes';\nimport {FlatList, Text, TouchableOpacity, View} from 'react-native';\nimport useApiClient from \"../../utils/clients\";\nimport uuidv4 from 'uuid';\nimport {ScreenProps} from \"../Router\";\nimport {RECORD_ACTIONS} from \"../../reducers/recordsReducers\";\n\nconst RecordsScreen: React.FC<ScreenProps> = ({navigation, route, state, dispatch}) => {\n    const {formId, databaseId} = route.params;\n    const [isLoading, setIsLoading] = React.useState(true);\n\n    const client = useApiClient();\n\n    React.useEffect(() => {\n        client.listRecords({formId, databaseId})\n            .then((data) => {\n                dispatch({\n                    type: RECORD_ACTIONS.GET_RECORDS, payload: {\n                        formId,\n                        records: data.response?.items\n                    }\n                })\n                setIsLoading(false)\n            })\n    }, [client]);\n\n    return (\n        <View style={[layout.container, layout.body]}>\n            <Title>{routes.records.title}</Title>\n            {!isLoading && (\n                <View>\n                    <FlatList\n                        style={{width: '100%'}}\n                        data={state.formsById[formId].records}\n                        renderItem={({item}) => (\n                            <TouchableOpacity\n                                key={item.id}\n                                onPress={() => navigation.navigate(routes.viewRecord.name, {recordId: item.id, formId})}\n                            >\n                                <View style={{flexDirection: 'row', flex: 1}}>\n                                    <View style={{justifyContent: 'center', paddingRight: 12}}>\n                                        <Text>{item.id}</Text>\n                                    </View>\n                                </View>\n                            </TouchableOpacity>\n                        )}\n                    />\n                    <FlatList\n                        style={{width: '100%'}}\n                        data={state.formsById[formId].localRecords}\n                        renderItem={({item, index}) => (\n                            <TouchableOpacity\n                                key={index}\n                                onPress={() => navigation.navigate(routes.addRecord.name, {recordId: item, formId})}\n                            >\n                                <View style={{flexDirection: 'row', flex: 1}}>\n                                    <View style={{justifyContent: 'center', paddingRight: 12}}>\n                                        <Text>{item}</Text>\n                                    </View>\n                                </View>\n                            </TouchableOpacity>\n                        )}\n                    />\n                </View>\n            )}\n\n            <FAB\n                style={layout.fab}\n                icon=\"plus\"\n                color={'white'}\n                onPress={() => navigation.navigate(routes.addRecord.name, {formId, recordId: uuidv4()})}\n            />\n        </View>\n    );\n};\n\nexport default RecordsScreen;\n"]},"metadata":{},"sourceType":"module"}