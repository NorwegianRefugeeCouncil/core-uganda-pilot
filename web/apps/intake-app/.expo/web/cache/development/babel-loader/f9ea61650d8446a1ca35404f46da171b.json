{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"mode\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInputOutlined from \"./TextInputOutlined\";\nimport TextInputFlat from \"./TextInputFlat\";\nimport TextInputIcon from \"./Adornment/TextInputIcon\";\nimport TextInputAffix from \"./Adornment/TextInputAffix\";\nimport { withTheme } from \"../../core/theming\";\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\n\nvar TextInput = function (_React$Component) {\n  _inherits(TextInput, _React$Component);\n\n  var _super = _createSuper(TextInput);\n\n  function TextInput() {\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(_args));\n\n    _defineProperty(_assertThisInitialized(_this), \"validInputValue\", _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      labeled: new Animated.Value(_this.validInputValue ? 0 : 1),\n      error: new Animated.Value(_this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: _this.validInputValue,\n      labelLayout: {\n        measured: false,\n        width: 0,\n        height: 0\n      },\n      leftLayout: {\n        width: null,\n        height: null\n      },\n      rightLayout: {\n        width: null,\n        height: null\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showPlaceholder\", function () {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n      }\n\n      _this.timer = setTimeout(function () {\n        return _this.setState({\n          placeholder: _this.props.placeholder\n        });\n      }, 50);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hidePlaceholder\", function () {\n      return _this.setState({\n        placeholder: ''\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"timer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"root\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"showError\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideError\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restoreLabel\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"minimizeLabel\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onLeftAffixLayoutChange\", function (event) {\n      _this.setState({\n        leftLayout: {\n          height: event.nativeEvent.layout.height,\n          width: event.nativeEvent.layout.width\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRightAffixLayoutChange\", function (event) {\n      _this.setState({\n        rightLayout: {\n          width: event.nativeEvent.layout.width,\n          height: event.nativeEvent.layout.height\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(args);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (args) {\n      if (!_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(args);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChangeText\", function (value) {\n      if (!_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        value: value\n      });\n\n      _this.props.onChangeText && _this.props.onChangeText(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayoutAnimatedText\", function (e) {\n      _this.setState({\n        labelLayout: {\n          width: e.nativeEvent.layout.width,\n          height: e.nativeEvent.layout.height,\n          measured: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"forceFocus\", function () {\n      var _this$root;\n\n      return (_this$root = _this.root) === null || _this$root === void 0 ? void 0 : _this$root.focus();\n    });\n\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var isFocusChanged = prevState.focused !== this.state.focused;\n      var isValueChanged = prevState.value !== this.state.value;\n      var isLabelLayoutChanged = prevState.labelLayout !== this.state.labelLayout;\n      var isLabelChanged = prevProps.label !== this.props.label;\n      var isErrorChanged = prevProps.error !== this.props.error;\n\n      if (isFocusChanged || isValueChanged || isLabelLayoutChanged) {\n        if (this.state.value || this.state.focused) {\n          this.minimizeLabel();\n        } else {\n          this.restoreLabel();\n        }\n      }\n\n      if (isFocusChanged || isLabelChanged) {\n        if (this.state.focused || !this.props.label) {\n          this.showPlaceholder();\n        } else {\n          this.hidePlaceholder();\n        }\n      }\n\n      if (isErrorChanged) {\n        if (this.props.error) {\n          this.showError();\n        } else {\n          this.hideError();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      return mode === 'outlined' ? React.createElement(TextInputOutlined, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        forceFocus: this.forceFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText,\n        onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,\n        onRightAffixLayoutChange: this.onRightAffixLayoutChange\n      })) : React.createElement(TextInputFlat, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        forceFocus: this.forceFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText,\n        onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,\n        onRightAffixLayoutChange: this.onRightAffixLayoutChange\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return {\n        value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n      };\n    }\n  }]);\n\n  return TextInput;\n}(React.Component);\n\n_defineProperty(TextInput, \"Icon\", TextInputIcon);\n\n_defineProperty(TextInput, \"Affix\", TextInputAffix);\n\n_defineProperty(TextInput, \"defaultProps\", {\n  mode: 'flat',\n  dense: false,\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\n\nexport default withTheme(TextInput);","map":{"version":3,"sources":["TextInput.tsx"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","TextInputIcon","TextInputAffix","mode","dense","disabled","error","multiline","editable","render","props","value","nextProps","prevState","labeled","Animated","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","componentDidUpdate","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","prevProps","isErrorChanged","componentWillUnmount","clearTimeout","setTimeout","scale","toValue","duration","useNativeDriver","ios","default","event","args","e","setNativeProps","isFocused","clear","focus","blur","rest","ref","onRightAffixLayoutChange","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, State } from './types';\nimport type { $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  // @component ./Adornment/TextInputIcon.tsx\n  static Icon = TextInputIcon;\n\n  // @component ./Adornment/TextInputAffix.tsx\n  static Affix = TextInputAffix;\n\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n  validInputValue =\n    this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n\n  state = {\n    labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value: this.validInputValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n    leftLayout: {\n      width: null,\n      height: null,\n    },\n    rightLayout: {\n      width: null,\n      height: null,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged =\n      prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = prevProps.label !== this.props.label;\n    const isErrorChanged = prevProps.error !== this.props.error;\n\n    if (\n      isFocusChanged ||\n      isValueChanged ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      isLabelLayoutChanged\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    this.timer = (setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    ) as unknown) as NodeJS.Timeout;\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: NodeJS.Timeout;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      leftLayout: {\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      },\n    });\n  };\n\n  private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      rightLayout: {\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      },\n    });\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  forceFocus = () => {\n    return this.root?.focus();\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}