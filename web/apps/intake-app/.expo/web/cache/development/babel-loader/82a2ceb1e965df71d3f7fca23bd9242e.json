{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport { Snackbar, Switch } from 'react-native-paper';\nimport { common, layout } from \"../../styles\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useApiClient from \"../../utils/clients\";\nimport { useForm } from \"react-hook-form\";\nimport * as Network from \"expo-network\";\nimport FormControl from \"../form/FormControl\";\nimport { getEncryptedLocalData, storeEncryptedLocalData } from \"../../utils/storage\";\nimport { RECORD_ACTIONS } from \"../../reducers/recordsReducers\";\nimport { getEncryptionKey } from \"../../utils/getEncryptionKey\";\n\nvar AddRecordScreen = function AddRecordScreen(_ref) {\n  var route = _ref.route,\n      dispatch = _ref.dispatch;\n  var isWeb = Platform.OS === 'web';\n  var _route$params = route.params,\n      formId = _route$params.formId,\n      recordId = _route$params.recordId;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      form = _React$useState4[0],\n      setForm = _React$useState4[1];\n\n  var _React$useState5 = React.useState(!isWeb),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      simulateOffline = _React$useState6[0],\n      setSimulateOffline = _React$useState6[1];\n\n  var _React$useState7 = React.useState(!simulateOffline),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      isConnected = _React$useState8[0],\n      setIsConnected = _React$useState8[1];\n\n  var _React$useState9 = React.useState(!isConnected),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      showSnackbar = _React$useState10[0],\n      setShowSnackbar = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      hasLocalData = _React$useState12[0],\n      setHasLocalData = _React$useState12[1];\n\n  var client = useApiClient();\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState,\n      reset = _useForm.reset;\n\n  React.useEffect(function () {\n    client.getForm({\n      id: formId\n    }).then(function (data) {\n      setForm(data.response);\n      setIsLoading(false);\n    });\n  }, []);\n\n  var onSubmitOffline = function onSubmitOffline(data) {\n    var key;\n    return _regeneratorRuntime.async(function onSubmitOffline$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            key = getEncryptionKey();\n            storeEncryptedLocalData(recordId, key, data).then(function () {\n              setHasLocalData(true);\n              dispatch({\n                type: RECORD_ACTIONS.ADD_LOCAL_RECORD,\n                payload: {\n                  formId: formId,\n                  localRecord: recordId\n                }\n              });\n            }).catch(function () {\n              setHasLocalData(false);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onSubmit = function onSubmit(data) {\n    if (isConnected || isWeb) {\n      client.createRecord({\n        object: {\n          formId: formId,\n          values: data\n        }\n      });\n    } else {\n      onSubmitOffline(data);\n    }\n  };\n\n  React.useEffect(function () {\n    if (!isWeb && recordId) {\n      getEncryptedLocalData(recordId).then(function (data) {\n        setHasLocalData(!!data);\n        reset(data);\n      });\n    }\n  }, [isWeb, recordId]);\n  React.useEffect(function () {\n    Network.getNetworkStateAsync().then(function (networkState) {}).catch(function () {\n      return setIsLoading(true);\n    });\n  }, [simulateOffline]);\n  return React.createElement(ScrollView, {\n    contentContainerStyle: [layout.container, layout.body, common.darkBackground]\n  }, React.createElement(View, {\n    style: []\n  }, !isWeb && React.createElement(View, {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    }\n  }, React.createElement(Switch, {\n    value: simulateOffline,\n    onValueChange: function onValueChange() {\n      setSimulateOffline(!simulateOffline);\n      setIsConnected(simulateOffline);\n      setShowSnackbar(!simulateOffline);\n    }\n  }), React.createElement(Text, null, \" simulate being offline \")), hasLocalData && React.createElement(View, {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n  }, React.createElement(Text, null, \"There is locally stored data for this individual.\")), hasLocalData && isConnected && React.createElement(View, {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n  }, React.createElement(Text, null, \"Do you want to upload it?\"), React.createElement(Button, {\n    title: \"Submit local data\",\n    onPress: handleSubmit(onSubmit)\n  })), !isLoading && React.createElement(View, {\n    style: {\n      width: '100%'\n    }\n  }, form == null ? void 0 : form.fields.map(function (field) {\n    return React.createElement(FormControl, {\n      key: field.code,\n      fieldDefinition: field,\n      style: {\n        width: '100%'\n      },\n      control: control,\n      name: field.id,\n      errors: formState.errors\n    });\n  }), React.createElement(Button, {\n    title: \"Submit\",\n    onPress: handleSubmit(onSubmit)\n  }))), React.createElement(Snackbar, {\n    visible: showSnackbar,\n    onDismiss: function onDismiss() {\n      return setShowSnackbar(false);\n    },\n    action: {\n      label: 'Got it',\n      onPress: function onPress() {\n        return setShowSnackbar(false);\n      }\n    }\n  }, \"No internet connection. Submitted data will be stored locally.\"));\n};\n\nexport default AddRecordScreen;","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/screens/AddRecordScreen.tsx"],"names":["React","Snackbar","Switch","common","layout","useApiClient","useForm","Network","FormControl","getEncryptedLocalData","storeEncryptedLocalData","RECORD_ACTIONS","getEncryptionKey","AddRecordScreen","route","dispatch","isWeb","Platform","OS","params","formId","recordId","useState","isLoading","setIsLoading","form","setForm","simulateOffline","setSimulateOffline","isConnected","setIsConnected","showSnackbar","setShowSnackbar","hasLocalData","setHasLocalData","client","control","handleSubmit","formState","reset","useEffect","getForm","id","then","data","response","onSubmitOffline","key","type","ADD_LOCAL_RECORD","payload","localRecord","catch","onSubmit","createRecord","object","values","getNetworkStateAsync","networkState","container","body","darkBackground","display","flexDirection","width","fields","map","field","code","errors","label","onPress"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Snackbar, Switch} from 'react-native-paper';\nimport {common, layout} from '../../styles';\nimport {Button, Platform, ScrollView, Text, View} from 'react-native';\nimport useApiClient from \"../../utils/clients\";\nimport {FormDefinition} from \"@core/api-client\";\nimport {useForm} from \"react-hook-form\";\nimport * as Network from \"expo-network\";\nimport FormControl from \"../form/FormControl\";\nimport {getEncryptedLocalData, storeEncryptedLocalData} from \"../../utils/storage\";\nimport {RECORD_ACTIONS} from \"../../reducers/recordsReducers\";\nimport {getEncryptionKey} from \"../../utils/getEncryptionKey\";\n\nconst AddRecordScreen: React.FC<any> = ({route, dispatch}) => {\n    const isWeb = Platform.OS === 'web';\n    const {formId, recordId} = route.params;\n\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [form, setForm] = React.useState<FormDefinition>();\n    const [simulateOffline, setSimulateOffline] = React.useState(!isWeb); // TODO: for testing, remove\n    const [isConnected, setIsConnected] = React.useState(!simulateOffline);\n    const [showSnackbar, setShowSnackbar] = React.useState(!isConnected);\n    const [hasLocalData, setHasLocalData] = React.useState(false);\n\n    const client = useApiClient();\n    const {control, handleSubmit, formState, reset} = useForm();\n\n    React.useEffect(() => {\n        client.getForm({id: formId})\n            .then((data) => {\n                setForm(data.response)\n                setIsLoading(false)\n            })\n        // TODO add catch\n    }, []);\n\n    const onSubmitOffline = async (data: any) => {\n        const key = getEncryptionKey();\n\n        storeEncryptedLocalData(recordId, key, data)\n            .then(() => {\n                setHasLocalData(true)\n                dispatch({\n                    type: RECORD_ACTIONS.ADD_LOCAL_RECORD, payload: {\n                        formId,\n                        localRecord: recordId\n                    }\n                })\n            })\n            .catch(() => {\n                setHasLocalData(false)\n            });\n\n    }\n    const onSubmit = (data: any) => {\n        if (isConnected || isWeb) {\n            client.createRecord({object: {formId, values: data}})\n        } else {\n            onSubmitOffline(data);\n        }\n    };\n\n    // check for locally stored data on mobile device\n    React.useEffect(() => {\n        if (!isWeb && recordId) {\n\n            getEncryptedLocalData(recordId)\n                .then((data) => {\n                    setHasLocalData(!!data);\n                    reset(data);\n                });\n            }\n    }, [isWeb, recordId])\n\n    // react to network changes\n    React.useEffect(() => {\n        Network.getNetworkStateAsync()\n            .then((networkState) => {\n                // TODO: uncomment, use real network state\n                // setIsConnected(networkState.type != NetworkStateType.NONE); // NONE\n            })\n            .catch(() => setIsLoading(true))\n    }, [simulateOffline])\n\n    return (\n        <ScrollView contentContainerStyle={[layout.container, layout.body, common.darkBackground]}>\n\n            <View style={[]}>\n                {/* simulate network changes, for testing */}\n                {!isWeb && (\n                    <View style={{display: \"flex\", flexDirection: \"row\"}}>\n                        <Switch\n                            value={simulateOffline}\n                            onValueChange={() => {\n                                setSimulateOffline(!simulateOffline)\n                                setIsConnected(simulateOffline)\n                                setShowSnackbar(!simulateOffline)\n                            }}\n                        />\n                        <Text> simulate being offline </Text>\n                    </View>\n                )}\n\n                {/* upload data collected offline */}\n                {hasLocalData && (\n                    <View style={{display: \"flex\", flexDirection: \"column\"}}>\n                        <Text>\n                            There is locally stored data for this individual.\n                        </Text>\n                    </View>\n                )}\n                {hasLocalData && isConnected && (\n                    <View style={{display: \"flex\", flexDirection: \"column\"}}>\n                        <Text>\n                            Do you want to upload it?\n                        </Text>\n                        <Button\n                            title=\"Submit local data\"\n                            onPress={handleSubmit(onSubmit)}\n                        />\n                    </View>\n                )}\n                {!isLoading && (\n                    <View style={{width: '100%'}}>\n                        {form?.fields.map((field) => {\n                            return (\n                                <FormControl\n                                    key={field.code}\n                                    fieldDefinition={field}\n                                    style={{width: '100%'}}\n                                    // value={''} // take value from record\n                                    control={control}\n                                    name={field.id}\n                                    errors={formState.errors}\n                                />\n                            )\n                        })}\n                        <Button\n                            title=\"Submit\"\n                            onPress={handleSubmit(onSubmit)}\n                        />\n                    </View>\n                )}\n            </View>\n            <Snackbar\n                visible={showSnackbar}\n                onDismiss={() => setShowSnackbar(false)}\n                action={{\n                    label: 'Got it',\n                    onPress: () => setShowSnackbar(false)\n                }}\n            >\n                No internet connection. Submitted data will be stored locally.\n            </Snackbar>\n        </ScrollView>\n    );\n};\n\nexport default AddRecordScreen;\n"]},"metadata":{},"sourceType":"module"}