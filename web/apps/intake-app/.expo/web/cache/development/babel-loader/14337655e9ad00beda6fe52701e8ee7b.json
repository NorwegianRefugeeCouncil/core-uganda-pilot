{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { common, layout } from \"../../styles\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useApiClient from \"../../utils/clients\";\nimport { useForm } from \"react-hook-form\";\nimport FormControl from \"../form/FormControl\";\n\nvar ViewRecordScreen = function ViewRecordScreen(_ref) {\n  var route = _ref.route,\n      state = _ref.state;\n  var _route$params = route.params,\n      formId = _route$params.formId,\n      recordId = _route$params.recordId;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      form = _React$useState4[0],\n      setForm = _React$useState4[1];\n\n  var client = useApiClient();\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      reset = _useForm.reset;\n\n  React.useEffect(function () {\n    client.getForm({\n      id: formId\n    }).then(function (data) {\n      setForm(data.response);\n    });\n  }, [formId]);\n  React.useEffect(function () {\n    if (form) {\n      reset(state.formsById[formId].recordsById[recordId].values);\n      setIsLoading(false);\n    }\n  }, [form]);\n  return React.createElement(View, {\n    style: [layout.container, layout.body, common.darkBackground]\n  }, React.createElement(ScrollView, null, !isLoading && React.createElement(View, null, form == null ? void 0 : form.fields.map(function (field) {\n    return React.createElement(FormControl, {\n      key: field.code,\n      fieldDefinition: field,\n      style: {\n        width: '100%'\n      },\n      control: control,\n      name: field.id\n    });\n  }))));\n};\n\nexport default ViewRecordScreen;","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/screens/ViewRecordScreen.tsx"],"names":["React","common","layout","useApiClient","useForm","FormControl","ViewRecordScreen","route","state","params","formId","recordId","useState","isLoading","setIsLoading","form","setForm","client","control","reset","useEffect","getForm","id","then","data","response","formsById","recordsById","values","container","body","darkBackground","fields","map","field","code","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,MAAhB;;;AAEA,OAAOC,YAAP;AAEA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAOC,WAAP;;AAEA,IAAMC,gBAA+B,GAAG,SAAlCA,gBAAkC,OAAoB;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AACxD,sBAA2BD,KAAK,CAACE,MAAjC;AAAA,MAAOC,MAAP,iBAAOA,MAAP;AAAA,MAAeC,QAAf,iBAAeA,QAAf;;AAEA,wBAAkCX,KAAK,CAACY,QAAN,CAAe,IAAf,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,yBAAwBd,KAAK,CAACY,QAAN,EAAxB;AAAA;AAAA,MAAOG,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,MAAM,GAAGd,YAAY,EAA3B;;AACA,iBAAyBC,OAAO,EAAhC;AAAA,MAAOc,OAAP,YAAOA,OAAP;AAAA,MAAgBC,KAAhB,YAAgBA,KAAhB;;AAEAnB,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AAClBH,IAAAA,MAAM,CAACI,OAAP,CAAe;AAACC,MAAAA,EAAE,EAAEZ;AAAL,KAAf,EACKa,IADL,CACU,UAACC,IAAD,EAAU;AACZR,MAAAA,OAAO,CAACQ,IAAI,CAACC,QAAN,CAAP;AACH,KAHL;AAIH,GALD,EAKG,CAACf,MAAD,CALH;AAOAV,EAAAA,KAAK,CAACoB,SAAN,CAAgB,YAAM;AAClB,QAAIL,IAAJ,EAAU;AACNI,MAAAA,KAAK,CAACX,KAAK,CAACkB,SAAN,CAAgBhB,MAAhB,EAAwBiB,WAAxB,CAAoChB,QAApC,EAA8CiB,MAA/C,CAAL;AACAd,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GALD,EAKG,CAACC,IAAD,CALH;AAOA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACb,MAAM,CAAC2B,SAAR,EAAmB3B,MAAM,CAAC4B,IAA1B,EAAgC7B,MAAM,CAAC8B,cAAvC;AAAb,KACI,oBAAC,UAAD,QACK,CAAClB,SAAD,IACG,oBAAC,IAAD,QACKE,IADL,oBACKA,IAAI,CAAEiB,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAW;AACzB,WACI,oBAAC,WAAD;AACI,MAAA,GAAG,EAAEA,KAAK,CAACC,IADf;AAEI,MAAA,eAAe,EAAED,KAFrB;AAGI,MAAA,KAAK,EAAE;AAACE,QAAAA,KAAK,EAAE;AAAR,OAHX;AAII,MAAA,OAAO,EAAElB,OAJb;AAKI,MAAA,IAAI,EAAEgB,KAAK,CAACZ;AALhB,MADJ;AASH,GAVA,CADL,CAFR,CADJ,CADJ;AAqBH,CA5CD;;AA8CA,eAAehB,gBAAf","sourcesContent":["import React from 'react';\nimport {common, layout} from '../../styles';\nimport {ScrollView, View} from 'react-native';\nimport useApiClient from \"../../utils/clients\";\nimport {FormDefinition} from \"@core/api-client\";\nimport {useForm} from \"react-hook-form\";\nimport FormControl from \"../form/FormControl\";\n\nconst ViewRecordScreen: React.FC<any> = ({route, state}) => {\n    const {formId, recordId} = route.params;\n\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [form, setForm] = React.useState<FormDefinition>();\n\n    const client = useApiClient();\n    const {control, reset} = useForm();\n\n    React.useEffect(() => {\n        client.getForm({id: formId})\n            .then((data) => {\n                setForm(data.response)\n            })\n    }, [formId]);\n\n    React.useEffect(() => {\n        if (form) {\n            reset(state.formsById[formId].recordsById[recordId].values)\n            setIsLoading(false)\n        }\n    }, [form])\n\n    return (\n        <View style={[layout.container, layout.body, common.darkBackground]}>\n            <ScrollView>\n                {!isLoading && (\n                    <View>\n                        {form?.fields.map((field) => {\n                            return (\n                                <FormControl\n                                    key={field.code}\n                                    fieldDefinition={field}\n                                    style={{width: '100%'}}\n                                    control={control}\n                                    name={field.id}\n                                />\n                            )\n                        })}\n                    </View>\n                )}\n            </ScrollView>\n        </View>\n    );\n};\n\nexport default ViewRecordScreen;\n"]},"metadata":{},"sourceType":"module"}