{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"size\", \"style\", \"theme\", \"visible\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { white, black } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nimport getContrastingColor from \"../utils/getContrastingColor\";\nvar defaultSize = 20;\n\nvar Badge = function Badge(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      opacity = _React$useRef.current;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = getContrastingColor(backgroundColor, white, black);\n  var borderRadius = size / 2;\n  return React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [_objectSpread(_objectSpread({\n      opacity: opacity,\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5\n    }, theme.fonts.regular), {}, {\n      lineHeight: size,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }), styles.container, restStyle]\n  }, rest), children);\n};\n\nexport default withTheme(Badge);\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","size","visible","rest","current","opacity","React","Animated","isFirstRendering","animation","scale","toValue","duration","useNativeDriver","backgroundColor","theme","restStyle","StyleSheet","textColor","getContrastingColor","borderRadius","color","fontSize","lineHeight","height","minWidth","styles","withTheme","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,SAAA,KAAA,EAAA,KAAA;AACA,SAAA,SAAA;AACA,OAAA,mBAAA;AAEA,IAAMA,WAAW,GAAjB,EAAA;;AAkDA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOD;AAAA,MAPE,QAOF,QAPE,QAOF;AAAA,uBALXC,IAKW;AAAA,MALXA,IAKW,0BAPE,WAOF;AAAA,MAPE,KAOF,QAPE,KAOF;AAAA,MAPE,KAOF,QAPE,KAOF;AAAA,0BAFXC,OAEW;AAAA,MAFXA,OAEW,6BAPE,IAOF;AAAA,MADRC,IACQ;;AACX,sBAA6BG,KAAK,CAALA,MAAAA,CAC3B,IAAIC,QAAQ,CAAZ,KAAA,CAAmBL,OAAO,GAAA,CAAA,GAD5B,CACE,CAD2BI,CAA7B;AAAA,MAAiBD,OAAjB,iBAAQD,OAAR;;AAGA,MAAMI,gBAAgB,GAAGF,KAAK,CAALA,MAAAA,CAAzB,IAAyBA,CAAzB;AAEA,MACeI,KADf,GAAA,KAAA,CACED,SADF,CACeC,KADf;AAIAJ,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AAEpB,QAAIE,gBAAgB,CAApB,OAAA,EAA8B;AAC5BA,MAAAA,gBAAgB,CAAhBA,OAAAA,GAAAA,KAAAA;AACA;AACD;;AAEDD,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,OAAAA,EAAyB;AACvBI,MAAAA,OAAO,EAAET,OAAO,GAAA,CAAA,GADO,CAAA;AAEvBU,MAAAA,QAAQ,EAAE,MAFa,KAAA;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzBN,EAAAA,KAAAA;AAPFD,GAAAA,EAYG,CAAA,OAAA,EAAA,OAAA,EAZHA,KAYG,CAZHA;;AAcA,cAGKW,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAHL,EAAA;AAAA,oCACEH,eADF;AAAA,MACEA,eADF,sCACoBC,KAAK,CAALA,MAAAA,CADd,YAAN;AAAA,MAEKC,SAFL;;AAKA,MAAME,SAAS,GAAGC,mBAAmB,CAAA,eAAA,EAAA,KAAA,EAArC,KAAqC,CAArC;AAEA,MAAMC,YAAY,GAAGnB,IAAI,GAAzB,CAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,aAAa,EADf,CAAA;AAEE,IAAA,KAAK,EAAE;AAEHI,MAAAA,OADF,EACEA,OAFG;AAGHS,MAAAA,eAFF,EAEEA,eAHG;AAIHO,MAAAA,KAAK,EAHP,SADK;AAKHC,MAAAA,QAAQ,EAAErB,IAAI,GAJhB;AADK,OAMAc,KAAK,CAALA,KAAAA,CALL,OADK;AAOHQ,MAAAA,UAAU,EANZ,IADK;AAQHC,MAAAA,MAAM,EAPR,IADK;AASHC,MAAAA,QAAQ,EARV,IADK;AAUHL,MAAAA,YAAAA,EAAAA;AAVG,QAYLM,MAAM,CAZD,SAAA,EAAA,SAAA;AAFT,GAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAxCF,CAAA;;AAiEA,eAAeC,SAAS,CAAxB,KAAwB,CAAxB;AAEA,IAAMD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BE,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EADA,UAAA;AAETC,IAAAA,SAAS,EAFA,QAAA;AAGTC,IAAAA,iBAAiB,EAHR,QAAA;AAITC,IAAAA,iBAAiB,EAJR,CAAA;AAKTC,IAAAA,QAAQ,EAAE;AALD;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}