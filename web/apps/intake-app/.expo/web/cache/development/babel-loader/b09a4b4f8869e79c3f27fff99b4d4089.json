{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default function useKeyboardManager(isEnabled) {\n  var previouslyFocusedTextInputRef = React.useRef(undefined);\n  var startTimestampRef = React.useRef(0);\n  var keyboardTimeoutRef = React.useRef();\n  var clearKeyboardTimeout = React.useCallback(function () {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n  var onPageChangeStart = React.useCallback(function () {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n    var input = TextInput.State.currentlyFocusedInput();\n    input === null || input === void 0 ? void 0 : input.blur();\n    previouslyFocusedTextInputRef.current = input;\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n  var onPageChangeConfirm = React.useCallback(function (force) {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    if (force) {\n      Keyboard.dismiss();\n    } else {\n      var input = previouslyFocusedTextInputRef.current;\n      input === null || input === void 0 ? void 0 : input.blur();\n    }\n\n    previouslyFocusedTextInputRef.current = undefined;\n  }, [clearKeyboardTimeout, isEnabled]);\n  var onPageChangeCancel = React.useCallback(function () {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n    var input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(function () {\n          input === null || input === void 0 ? void 0 : input.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input === null || input === void 0 ? void 0 : input.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      return clearKeyboardTimeout();\n    };\n  }, [clearKeyboardTimeout]);\n  return {\n    onPageChangeStart: onPageChangeStart,\n    onPageChangeConfirm: onPageChangeConfirm,\n    onPageChangeCancel: onPageChangeCancel\n  };\n}","map":{"version":3,"sources":["useKeyboardManager.tsx"],"names":["previouslyFocusedTextInputRef","React","startTimestampRef","keyboardTimeoutRef","clearKeyboardTimeout","clearTimeout","onPageChangeStart","isEnabled","input","TextInput","Date","onPageChangeConfirm","force","Keyboard","onPageChangeCancel","setTimeout"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { HostComponent, Keyboard, TextInput } from 'react-native';\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default function useKeyboardManager(isEnabled: () => boolean) {\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  const previouslyFocusedTextInputRef = React.useRef<InputRef>(undefined);\n  const startTimestampRef = React.useRef<number>(0);\n  const keyboardTimeoutRef = React.useRef<any>();\n\n  const clearKeyboardTimeout = React.useCallback(() => {\n    if (keyboardTimeoutRef.current !== undefined) {\n      clearTimeout(keyboardTimeoutRef.current);\n      keyboardTimeoutRef.current = undefined;\n    }\n  }, []);\n\n  const onPageChangeStart = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    const input: InputRef = TextInput.State.currentlyFocusedInput();\n\n    // When a page change begins, blur the currently focused input\n    input?.blur();\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    previouslyFocusedTextInputRef.current = input;\n\n    // Store timestamp for touch start\n    startTimestampRef.current = Date.now();\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  const onPageChangeConfirm = React.useCallback(\n    (force: boolean) => {\n      if (!isEnabled()) {\n        return;\n      }\n\n      clearKeyboardTimeout();\n\n      if (force) {\n        // Always dismiss input, even if we don't have a ref to it\n        // We might not have the ref if onPageChangeStart was never called\n        // This can happen if page change was not from a gesture\n        Keyboard.dismiss();\n      } else {\n        const input = previouslyFocusedTextInputRef.current;\n\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        input?.blur();\n      }\n\n      // Cleanup the ID on successful page change\n      previouslyFocusedTextInputRef.current = undefined;\n    },\n    [clearKeyboardTimeout, isEnabled]\n  );\n\n  const onPageChangeCancel = React.useCallback(() => {\n    if (!isEnabled()) {\n      return;\n    }\n\n    clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = previouslyFocusedTextInputRef.current;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - startTimestampRef.current < 100) {\n        keyboardTimeoutRef.current = setTimeout(() => {\n          input?.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }, 100);\n      } else {\n        input?.focus();\n        previouslyFocusedTextInputRef.current = undefined;\n      }\n    }\n  }, [clearKeyboardTimeout, isEnabled]);\n\n  React.useEffect(() => {\n    return () => clearKeyboardTimeout();\n  }, [clearKeyboardTimeout]);\n\n  return {\n    onPageChangeStart,\n    onPageChangeConfirm,\n    onPageChangeCancel,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}