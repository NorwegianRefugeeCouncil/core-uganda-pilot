{"ast":null,"code":"var _global$contexts;\n\nimport * as React from 'react';\nvar contexts = '__react_navigation__elements_contexts';\nglobal[contexts] = (_global$contexts = global[contexts]) !== null && _global$contexts !== void 0 ? _global$contexts : new Map();\nexport default function getNamedContext(name, initialValue) {\n  var context = global[contexts].get(name);\n\n  if (context) {\n    return context;\n  }\n\n  context = React.createContext(initialValue);\n  context.displayName = name;\n  global[contexts].set(name, context);\n  return context;\n}","map":{"version":3,"sources":["getNamedContext.tsx"],"names":["contexts","global","context","React"],"mappings":";;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,IAAMA,QAAQ,GAAd,uCAAA;AAOAC,MAAM,CAANA,QAAM,CAANA,GAAAA,CAAAA,gBAAAA,GAAmBA,MAAM,CAAzBA,QAAyB,CAAzBA,MAAAA,IAAAA,IAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,gBAAAA,GAAuC,IAAvCA,GAAuC,EAAvCA;AAEA,eAAe,SAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAGK;AAClB,MAAIC,OAAO,GAAGD,MAAM,CAANA,QAAM,CAANA,CAAAA,GAAAA,CAAd,IAAcA,CAAd;;AAEA,MAAA,OAAA,EAAa;AACX,WAAA,OAAA;AACD;;AAEDC,EAAAA,OAAO,GAAGC,KAAK,CAALA,aAAAA,CAAVD,YAAUC,CAAVD;AACAA,EAAAA,OAAO,CAAPA,WAAAA,GAAAA,IAAAA;AAEAD,EAAAA,MAAM,CAANA,QAAM,CAANA,CAAAA,GAAAA,CAAAA,IAAAA,EAAAA,OAAAA;AAEA,SAAA,OAAA;AACD","sourcesContent":["import * as React from 'react';\n\nconst contexts = '__react_navigation__elements_contexts';\n\ndeclare global {\n  var __react_navigation__elements_contexts: Map<string, React.Context<any>>;\n}\n\n// We use a global variable to keep our contexts so that we can reuse same contexts across packages\nglobal[contexts] = global[contexts] ?? new Map<string, React.Context<any>>();\n\nexport default function getNamedContext<T>(\n  name: string,\n  initialValue: T\n): React.Context<T> {\n  let context = global[contexts].get(name);\n\n  if (context) {\n    return context;\n  }\n\n  context = React.createContext<T>(initialValue);\n  context.displayName = name;\n\n  global[contexts].set(name, context);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}