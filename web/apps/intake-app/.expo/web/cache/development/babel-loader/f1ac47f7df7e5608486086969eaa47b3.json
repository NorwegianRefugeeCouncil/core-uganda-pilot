{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useNavigationState(selector) {\n  var navigation = useNavigation();\n\n  var _React$useState = React.useState(function () {\n    return selector(navigation.getState());\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      setResult = _React$useState2[1];\n\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","useNavigation","React","selector","selectorRef","unsubscribe","e","setResult"],"mappings":";AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,OAAA,aAAA;AAWA,eAAe,SAAA,kBAAA,CAAA,QAAA,EAEV;AACH,MAAMA,UAAU,GAAGC,aADhB,EACH;;AAIA,wBAAsBC,KAAK,CAALA,QAAAA,CAAe;AAAA,WAAMC,QAAQ,CAACH,UAAU,CAL3D,QAKiDA,EAAD,CAAd;AAAA,GAAfE,CAAtB;AAAA;AAAA,MAAM,SAAN;;AAGA,MAAME,WAAW,GAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBE,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AADFF,GAAAA;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMG,WAAW,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiCC,UAAAA,CAAD,EAAO;AACzDC,MAAAA,SAAS,CAACH,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CAA9BC,KAAUH,CAAD,CAATG;AADF,KAAoB,CAApB;AAIA,WAAA,WAAA;AALFL,GAAAA,EAMG,CANHA,UAMG,CANHA;AAQA,SAAOC,QAAQ,CAACH,UAAU,CAA1B,QAAgBA,EAAD,CAAf;AACD","sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]},"metadata":{},"sourceType":"module"}