{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\nimport { Text } from \"react-native-paper\";\nimport { darkTheme } from \"../../constants/theme\";\nimport { Picker } from '@react-native-picker/picker';\n\nvar Select = function Select(_ref) {\n  var _fieldDefinition$opti;\n\n  var fieldDefinition = _ref.fieldDefinition,\n      style = _ref.style,\n      value = _ref.value,\n      onChange = _ref.onChange;\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedValue = _React$useState2[0],\n      setSelectedValue = _React$useState2[1];\n\n  return React.createElement(View, {\n    style: style\n  }, fieldDefinition.name && React.createElement(Text, {\n    theme: darkTheme\n  }, fieldDefinition.name), fieldDefinition.description && React.createElement(Text, {\n    theme: darkTheme,\n    style: {\n      fontSize: 10\n    }\n  }, fieldDefinition.description), React.createElement(Picker, {\n    selectedValue: selectedValue,\n    style: {\n      height: 50,\n      width: 150\n    },\n    onValueChange: function onValueChange(itemValue) {\n      setSelectedValue(itemValue);\n      onChange(itemValue);\n    }\n  }, (_fieldDefinition$opti = fieldDefinition.options) == null ? void 0 : _fieldDefinition$opti.map(function (option) {\n    return React.createElement(Picker.Item, {\n      key: option,\n      label: option,\n      value: option\n    });\n  })));\n};\n\nexport default Select;","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/form/Select.tsx"],"names":["React","Text","darkTheme","Picker","Select","fieldDefinition","style","value","onChange","useState","selectedValue","setSelectedValue","name","description","fontSize","height","width","itemValue","options","map","option"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,SAAQC,SAAR;AAEA,SAAQC,MAAR,QAAqB,6BAArB;;AAEA,IAAMC,MAA4B,GAAG,SAA/BA,MAA+B,OAM3B;AAAA;;AAAA,MAJFC,eAIE,QAJFA,eAIE;AAAA,MAHFC,KAGE,QAHFA,KAGE;AAAA,MAFFC,KAEE,QAFFA,KAEE;AAAA,MADFC,QACE,QADFA,QACE;;AAEN,wBAA0CR,KAAK,CAACS,QAAN,CAAeF,KAAf,CAA1C;AAAA;AAAA,MAAOG,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL;AAAb,KACKD,eAAe,CAACO,IAAhB,IAAwB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV;AAAb,KAAyBG,eAAe,CAACO,IAAzC,CAD7B,EAEKP,eAAe,CAACQ,WAAhB,IACG,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,SAAb;AAAwB,IAAA,KAAK,EAAE;AAACY,MAAAA,QAAQ,EAAE;AAAX;AAA/B,KACKT,eAAe,CAACQ,WADrB,CAHR,EAOI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAEH,aADnB;AAEI,IAAA,KAAK,EAAE;AAACK,MAAAA,MAAM,EAAE,EAAT;AAAaC,MAAAA,KAAK,EAAE;AAApB,KAFX;AAGI,IAAA,aAAa,EAAE,uBAACC,SAAD,EAAe;AAC1BN,MAAAA,gBAAgB,CAACM,SAAD,CAAhB;AACAT,MAAAA,QAAQ,CAACS,SAAD,CAAR;AACH;AANL,8BAQKZ,eAAe,CAACa,OARrB,qBAQK,sBAAyBC,GAAzB,CAA6B,UAACC,MAAD;AAAA,WAC1B,oBAAC,MAAD,CAAQ,IAAR;AACI,MAAA,GAAG,EAAEA,MADT;AAEI,MAAA,KAAK,EAAEA,MAFX;AAGI,MAAA,KAAK,EAAEA;AAHX,MAD0B;AAAA,GAA7B,CARL,CAPJ,CADJ;AA2BH,CArCD;;AAuCA,eAAehB,MAAf","sourcesContent":["import {View} from \"react-native\";\nimport React from \"react\";\nimport {Text} from \"react-native-paper\";\nimport {darkTheme} from \"../../constants/theme\";\nimport {InputProps} from \"./FormControl\";\nimport {Picker} from '@react-native-picker/picker';\n\nconst Select: React.FC<InputProps> = (\n    {\n        fieldDefinition,\n        style,\n        value,\n        onChange,\n    }) => {\n\n    const [selectedValue, setSelectedValue] = React.useState(value);\n\n    return (\n        <View style={style}>\n            {fieldDefinition.name && <Text theme={darkTheme}>{fieldDefinition.name}</Text>}\n            {fieldDefinition.description &&(\n                <Text theme={darkTheme} style={{fontSize: 10}}>\n                    {fieldDefinition.description}\n                </Text>\n            )}\n            <Picker\n                selectedValue={selectedValue}\n                style={{height: 50, width: 150}}\n                onValueChange={(itemValue) => {\n                    setSelectedValue(itemValue)\n                    onChange(itemValue)\n                }}\n            >\n                {fieldDefinition.options?.map((option) => (\n                    <Picker.Item\n                        key={option}\n                        label={option}\n                        value={option}\n                    />\n                ))}\n            </Picker>\n        </View>\n\n    );\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}