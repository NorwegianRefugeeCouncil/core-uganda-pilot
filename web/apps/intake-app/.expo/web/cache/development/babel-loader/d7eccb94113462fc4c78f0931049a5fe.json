{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport { withTheme } from \"../../core/theming\";\n\nvar TouchableRipple = function TouchableRipple(_ref) {\n  var style = _ref.style,\n      _background = _ref.background,\n      _ref$borderless = _ref.borderless,\n      borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n      disabledProp = _ref.disabled,\n      rippleColor = _ref.rippleColor,\n      _underlayColor = _ref.underlayColor,\n      children = _ref.children,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var handlePressIn = function handlePressIn(e) {\n    var _touches$;\n\n    var centered = rest.centered,\n        onPressIn = rest.onPressIn;\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n    var dark = theme.dark,\n        colors = theme.colors;\n    var calculatedRippleColor = rippleColor || color(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();\n    var button = e.currentTarget;\n    var style = window.getComputedStyle(button);\n    var dimensions = button.getBoundingClientRect();\n    var touchX;\n    var touchY;\n    var _e$nativeEvent = e.nativeEvent,\n        changedTouches = _e$nativeEvent.changedTouches,\n        touches = _e$nativeEvent.touches;\n    var touch = (_touches$ = touches === null || touches === void 0 ? void 0 : touches[0]) !== null && _touches$ !== void 0 ? _touches$ : changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0];\n\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      var _touch$locationX, _touch$locationY;\n\n      touchX = (_touch$locationX = touch.locationX) !== null && _touch$locationX !== void 0 ? _touch$locationX : e.pageX;\n      touchY = (_touch$locationY = touch.locationY) !== null && _touch$locationY !== void 0 ? _touch$locationY : e.pageY;\n    }\n\n    var size = centered ? Math.min(dimensions.width, dimensions.height) * 1.25 : Math.max(dimensions.width, dimensions.height) * 2;\n    var container = document.createElement('span');\n    container.setAttribute('data-paper-ripple', '');\n\n    _extends2(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden'\n    });\n\n    var ripple = document.createElement('span');\n\n    _extends2(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n      transitionProperty: 'transform opacity',\n      transitionDuration: \"\".concat(Math.min(size * 1.5, 350), \"ms\"),\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n      left: \"\".concat(touchX, \"px\"),\n      top: \"\".concat(touchY, \"px\"),\n      width: \"\".concat(size, \"px\"),\n      height: \"\".concat(size, \"px\")\n    });\n\n    container.appendChild(ripple);\n    button.appendChild(container);\n    requestAnimationFrame(function () {\n      requestAnimationFrame(function () {\n        _extends2(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1'\n        });\n      });\n    });\n  };\n\n  var handlePressOut = function handlePressOut(e) {\n    var _rest$onPressOut;\n\n    (_rest$onPressOut = rest.onPressOut) === null || _rest$onPressOut === void 0 ? void 0 : _rest$onPressOut.call(rest, e);\n    var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n    requestAnimationFrame(function () {\n      requestAnimationFrame(function () {\n        containers.forEach(function (container) {\n          var ripple = container.firstChild;\n\n          _extends2(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0\n          });\n\n          setTimeout(function () {\n            var parentNode = container.parentNode;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  var disabled = disabledProp || !rest.onPress;\n  return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    disabled: disabled\n  }), React.createElement(View, {\n    style: [styles.touchable, borderless && styles.borderless, style]\n  }, React.Children.only(children)));\n};\n\nTouchableRipple.supported = true;\nvar styles = StyleSheet.create({\n  touchable: _objectSpread({\n    position: 'relative'\n  }, Platform.OS === 'web' && {\n    cursor: 'pointer'\n  }),\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nexport default withTheme(TouchableRipple);","map":{"version":3,"sources":["TouchableRipple.tsx"],"names":["TouchableRipple","background","borderless","disabled","underlayColor","rest","handlePressIn","e","onPressIn","colors","calculatedRippleColor","rippleColor","color","dark","button","style","window","dimensions","touches","touch","changedTouches","centered","touchX","touchY","size","Math","container","document","Object","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","width","height","requestAnimationFrame","handlePressOut","containers","setTimeout","parentNode","disabledProp","styles","React","touchable","Platform","cursor","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,SAAA;;AA8EA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAUX;AAAA,MAVY,KAUZ,QAVY,KAUZ;AAAA,MAVY,WAUZ,QARXC,UAQW;AAAA,6BAPXC,UAOW;AAAA,MAPXA,UAOW,gCAVY,KAUZ;AAAA,MAVY,YAUZ,QANXC,QAMW;AAAA,MAVY,WAUZ,QAVY,WAUZ;AAAA,MAVY,cAUZ,QAJXC,aAIW;AAAA,MAVY,QAUZ,QAVY,QAUZ;AAAA,MAVY,KAUZ,QAVY,KAUZ;AAAA,MADRC,IACQ;;AACX,MAAMC,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,CAAD,EAAY;AAAA,QAAA,SAAA;;AAChC,QAAM,QAAN,GAAA,IAAA,CAAM,QAAN;AAAA,QAAkBC,SAAlB,GAAA,IAAA,CAAkBA,SAAlB;AAEAA,IAAAA,SAAS,KAATA,IAAAA,IAAAA,SAAS,KAAA,KAATA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAS,CAATA,CAAS,CAATA;AAEA,QAAM,IAAN,GAAA,KAAA,CAAM,IAAN;AAAA,QAAcC,MAAd,GAAA,KAAA,CAAcA,MAAd;AACA,QAAMC,qBAAqB,GACzBC,WAAW,IACXC,KAAK,CAACH,MAAM,CAAZG,IAAK,CAALA,CAAAA,KAAAA,CACSC,IAAI,GAAA,IAAA,GADbD,GAAAA,EAAAA,GAAAA,GAFF,MAEEA,EAFF;AAOA,QAAME,MAAM,GAAGP,CAAC,CAAhB,aAAA;AACA,QAAMQ,KAAK,GAAGC,MAAM,CAANA,gBAAAA,CAAd,MAAcA,CAAd;AACA,QAAMC,UAAU,GAAGH,MAAM,CAAzB,qBAAmBA,EAAnB;AAEA,QAAA,MAAA;AACA,QAAA,MAAA;AAEA,yBAAoCP,CAAC,CAArC,WAAA;AAAA,QAAM,cAAN,kBAAM,cAAN;AAAA,QAAwBW,OAAxB,kBAAwBA,OAAxB;AACA,QAAMC,KAAK,GAAA,CAAA,SAAA,GAAGD,OAAH,KAAA,IAAGA,IAAAA,OAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,OAAO,CAAV,CAAU,CAAV,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAmBE,cAAnB,KAAA,IAAmBA,IAAAA,cAAnB,KAAA,KAAA,CAAmBA,GAAnB,KAAA,CAAmBA,GAAAA,cAAc,CArBZ,CAqBY,CAA5C;;AAGA,QAAIC,QAAQ,IAAI,CAAhB,KAAA,EAAwB;AACtBC,MAAAA,MAAM,GAAGL,UAAU,CAAVA,KAAAA,GAATK,CAAAA;AACAC,MAAAA,MAAM,GAAGN,UAAU,CAAVA,MAAAA,GAATM,CAAAA;AAFF,KAAA,MAGO;AAAA,UAAA,gBAAA,EAAA,gBAAA;;AACLD,MAAAA,MAAM,GAAA,CAAA,gBAAA,GAAGH,KAAK,CAAR,SAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,gBAAA,GAAsBZ,CAAC,CAA7Be,KAAAA;AACAC,MAAAA,MAAM,GAAA,CAAA,gBAAA,GAAGJ,KAAK,CAAR,SAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,gBAAA,GAAsBZ,CAAC,CAA7BgB,KAAAA;AA7B8B;;AAiChC,QAAMC,IAAI,GAAGH,QAAQ,GAEjBI,IAAI,CAAJA,GAAAA,CAASR,UAAU,CAAnBQ,KAAAA,EAA2BR,UAAU,CAArCQ,MAAAA,IAFiB,IAAA,GAIjBA,IAAI,CAAJA,GAAAA,CAASR,UAAU,CAAnBQ,KAAAA,EAA2BR,UAAU,CAArCQ,MAAAA,IArC4B,CAiChC;AAOA,QAAMC,SAAS,GAAGC,QAAQ,CAARA,aAAAA,CAAlB,MAAkBA,CAAlB;AAEAD,IAAAA,SAAS,CAATA,YAAAA,CAAAA,mBAAAA,EAAAA,EAAAA;;AAEAE,cAAcF,SAAS,CAAvBE,KAAAA,EAA+B;AAC7BC,MAAAA,QAAQ,EADqB,UAAA;AAE7BC,MAAAA,aAAa,EAFgB,MAAA;AAG7BC,MAAAA,GAAG,EAH0B,GAAA;AAI7BC,MAAAA,IAAI,EAJyB,GAAA;AAK7BC,MAAAA,KAAK,EALwB,GAAA;AAM7BC,MAAAA,MAAM,EANuB,GAAA;AAO7BC,MAAAA,mBAAmB,EAAEpB,KAAK,CAPG,mBAAA;AAQ7BqB,MAAAA,oBAAoB,EAAErB,KAAK,CARE,oBAAA;AAS7BsB,MAAAA,uBAAuB,EAAEtB,KAAK,CATD,uBAAA;AAU7BuB,MAAAA,sBAAsB,EAAEvB,KAAK,CAVA,sBAAA;AAW7BwB,MAAAA,QAAQ,EAAElB,QAAQ,GAAA,SAAA,GAAe;AAXJ,KAA/BO;;AAeA,QAAMY,MAAM,GAAGb,QAAQ,CAARA,aAAAA,CAAf,MAAeA,CAAf;;AAEAC,cAAcY,MAAM,CAApBZ,KAAAA,EAA4B;AAC1BC,MAAAA,QAAQ,EADkB,UAAA;AAE1BC,MAAAA,aAAa,EAFa,MAAA;AAG1BW,MAAAA,eAAe,EAHW,qBAAA;AAI1BC,MAAAA,YAAY,EAJc,KAAA;AAO1BC,MAAAA,kBAAkB,EAPQ,mBAAA;AAQ1BC,MAAAA,kBAAkB,EAAA,GAAA,MAAA,CAAKnB,IAAI,CAAJA,GAAAA,CAASD,IAAI,GAAbC,GAAAA,EAAL,GAAKA,CAAL,EARQ,IAQR,CARQ;AAS1BoB,MAAAA,wBAAwB,EATE,QAAA;AAU1BC,MAAAA,eAAe,EAVW,QAAA;AAa1BC,MAAAA,SAAS,EAbiB,mDAAA;AAc1BC,MAAAA,OAAO,EAdmB,KAAA;AAiB1BhB,MAAAA,IAAI,EAAA,GAAA,MAAA,CAAA,MAAA,EAjBsB,IAiBtB,CAjBsB;AAkB1BD,MAAAA,GAAG,EAAA,GAAA,MAAA,CAAA,MAAA,EAlBuB,IAkBvB,CAlBuB;AAmB1BkB,MAAAA,KAAK,EAAA,GAAA,MAAA,CAAA,IAAA,EAnBqB,IAmBrB,CAnBqB;AAoB1BC,MAAAA,MAAM,EAAA,GAAA,MAAA,CAAA,IAAA,EAAA,IAAA;AApBoB,KAA5BtB;;AAwBAF,IAAAA,SAAS,CAATA,WAAAA,CAAAA,MAAAA;AACAZ,IAAAA,MAAM,CAANA,WAAAA,CAtFgC,SAsFhCA;AAKAqC,IAAAA,qBAAqB,CAAC,YAAM;AAC1BA,MAAAA,qBAAqB,CAAC,YAAM;AAC1BvB,kBAAcY,MAAM,CAApBZ,KAAAA,EAA4B;AAC1BmB,UAAAA,SAAS,EADiB,6CAAA;AAE1BC,UAAAA,OAAO,EAAE;AAFiB,SAA5BpB;AADFuB,OAAqB,CAArBA;AADFA,KAAqB,CAArBA;AA3FF,GAAA;;AAqGA,MAAMC,cAAc,GAAI7C,SAAlB6C,cAAkB7C,CAAAA,CAAD,EAAY;AAAA,QAAA,gBAAA;;AACjC,KAAA,gBAAA,GAAA,IAAI,CAAJ,UAAA,MAAA,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAEA,QAAM8C,UAAU,GAAG9C,CAAC,CAADA,aAAAA,CAAAA,gBAAAA,CAAnB,qBAAmBA,CAAnB;AAIA4C,IAAAA,qBAAqB,CAAC,YAAM;AAC1BA,MAAAA,qBAAqB,CAAC,YAAM;AAC1BE,QAAAA,UAAU,CAAVA,OAAAA,CAAoB3B,UAAAA,SAAD,EAAe;AAChC,cAAMc,MAAM,GAAGd,SAAS,CAAxB,UAAA;;AAEAE,oBAAcY,MAAM,CAApBZ,KAAAA,EAA4B;AAC1BgB,YAAAA,kBAAkB,EADQ,OAAA;AAE1BI,YAAAA,OAAO,EAAE;AAFiB,WAA5BpB;;AAMA0B,UAAAA,UAAU,CAAC,YAAM;AACf,gBAAQC,UAAR,GAAA,SAAA,CAAQA,UAAR;;AAEA,gBAAA,UAAA,EAAgB;AACdA,cAAAA,UAAU,CAAVA,WAAAA,CAAAA,SAAAA;AACD;AALO,WAAA,EAAVD,GAAU,CAAVA;AATFD,SAAAA;AADFF,OAAqB,CAArBA;AADFA,KAAqB,CAArBA;AAPF,GAAA;;AA8BA,MAAMhD,QAAQ,GAAGqD,YAAY,IAAI,CAACnD,IAAI,CAAtC,OAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,SAAS,EAFX,aAAA;AAGE,IAAA,UAAU,EAHZ,cAAA;AAIE,IAAA,QAAQ,EAAEF;AAJZ,GAAA,CAAA,EAME,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACsD,MAAM,CAAP,SAAA,EAAmBvD,UAAU,IAAIuD,MAAM,CAAvC,UAAA,EAAA,KAAA;AAAb,GAAA,EACGC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CARP,QAQOA,CADH,CANF,CADF;AAhJF,CAAA;;AAiKA1D,eAAe,CAAfA,SAAAA,GAAAA,IAAAA;AAEA,IAAMyD,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BE,EAAAA,SAAS;AACP9B,IAAAA,QAAQ,EADC;AAAF,KAEH+B,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAyB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAFtB,CADsB;AAK/B3D,EAAAA,UAAU,EAAE;AACVqC,IAAAA,QAAQ,EAAE;AADA;AALmB,CAAlB,CAAf;AAUA,eAAeuB,SAAS,CAAxB,eAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]},"metadata":{},"sourceType":"module"}