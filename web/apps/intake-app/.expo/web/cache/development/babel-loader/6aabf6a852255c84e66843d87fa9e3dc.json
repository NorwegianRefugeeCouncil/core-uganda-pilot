{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport invariant from 'invariant';\nimport qs from 'qs';\nexport function buildQueryString(input) {\n  return qs.stringify(input);\n}\nexport function getQueryParams(url) {\n  var _parsedSearch$errorCo;\n\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n  var parsedSearch = qs.parse(queryString, {\n    parseArrays: false\n  });\n  var errorCode = (_parsedSearch$errorCo = parsedSearch.errorCode) != null ? _parsedSearch$errorCo : null;\n  invariant(typeof errorCode === 'string' || errorCode === null, \"The \\\"errorCode\\\" parameter must be a string if specified\");\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  var params = _objectSpread(_objectSpread({}, parsedSearch), parsedHash);\n\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}","map":{"version":3,"sources":["../src/QueryParams.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,SAAP,MAAsB,WAAtB;AACA,OAAO,EAAP,MAAe,IAAf;AAEA,OAAM,SAAU,gBAAV,CAA2B,KAA3B,EAAwD;AAC5D,SAAO,EAAE,CAAC,SAAH,CAAa,KAAb,CAAP;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAoC;AAAA;;AAIxC,MAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAd;AACA,MAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB;AACA,MAAM,gBAAgB,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,GAAf,CAAzB;AACA,MAAM,WAAW,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,MAAjB,GAA0B,CAA3B,CAApC;AAGA,MAAM,YAAY,GAAG,EAAE,CAAC,KAAH,CAAS,WAAT,EAAsB;AAAE,IAAA,WAAW,EAAE;AAAf,GAAtB,CAArB;AAGA,MAAM,SAAS,4BAAI,YAAY,CAAC,SAAjB,oCAA8B,IAA7C;AACA,EAAA,SAAS,CACP,OAAO,SAAP,KAAqB,QAArB,IAAiC,SAAS,KAAK,IADxC,8DAAT;AAIA,SAAO,YAAY,CAAC,SAApB;AAGA,MAAI,UAAU,GAAG,EAAjB;;AACA,MAAI,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ,IAAA,UAAU,GAAG,EAAE,CAAC,KAAH,CAAS,IAAT,CAAb;AACD;;AAGD,MAAM,MAAM,mCACP,YADO,GAEP,UAFO,CAAZ;;AAKA,SAAO;AACL,IAAA,SAAS,EAAT,SADK;AAEL,IAAA,MAAM,EAAN;AAFK,GAAP;AAID","sourcesContent":["import invariant from 'invariant';\nimport qs from 'qs';\n\nexport function buildQueryString(input: Record<string, string>): string {\n  return qs.stringify(input);\n}\n\nexport function getQueryParams(url: string): {\n  errorCode: string | null;\n  params: { [key: string]: string };\n} {\n  const parts = url.split('#');\n  const hash = parts[1];\n  const partsWithoutHash = parts[0].split('?');\n  const queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  const parsedSearch = qs.parse(queryString, { parseArrays: false });\n\n  // Pull errorCode off of params\n  const errorCode = (parsedSearch.errorCode ?? null) as string | null;\n  invariant(\n    typeof errorCode === 'string' || errorCode === null,\n    `The \"errorCode\" parameter must be a string if specified`\n  );\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  const params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}