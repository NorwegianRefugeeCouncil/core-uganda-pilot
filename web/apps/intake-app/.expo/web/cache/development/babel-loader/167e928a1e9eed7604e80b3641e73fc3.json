{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from \"../constants\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref5;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\".concat(captalize(side));\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\".concat(captalize(side));\n      return _ref5 = {}, _defineProperty(_ref5, marginKey, isAffix ? 0 : offset), _defineProperty(_ref5, paddingKey, isAffix ? offset : inputOffset), _ref5;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig,\n      left = _ref6.left,\n      right = _ref6.right,\n      onAffixChange = _ref6.onAffixChange,\n      textStyle = _ref6.textStyle,\n      visible = _ref6.visible,\n      topPosition = _ref6.topPosition,\n      isTextInputFocused = _ref6.isTextInputFocused,\n      forceFocus = _ref6.forceFocus,\n      paddingHorizontal = _ref6.paddingHorizontal;\n\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref7) {\n      var type = _ref7.type,\n          side = _ref7.side;\n      var inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: \"\".concat(side, \"-\").concat(type, \"-adornment\"),\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","mode","adornmentStyleAdjustmentForNativeInput","isLeftSide","inputModeAdornemntOffset","InputMode","ADORNMENT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","currentStyle","text","TextInputAdornment","paddingHorizontal","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","topPosition","forceFocus","onAffixChange","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}