{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"url\", \"proxyOptions\"],\n    _excluded2 = [\"useProxy\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from \"./AuthRequest.types\";\nimport { AuthError } from \"./Errors\";\nimport * as PKCE from \"./PKCE\";\nimport * as QueryParams from \"./QueryParams\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nimport { TokenResponse } from \"./TokenRequest\";\nvar _authLock = false;\nexport var AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n\n    _classCallCheck(this, AuthRequest);\n\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandom(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");\n      }\n\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");\n      }\n\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");\n      }\n    }\n\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, \"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");\n    invariant(this.redirectUri, \"`AuthRequest` requires a valid `redirectUri`. Ex: \" + Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    }));\n  }\n\n  _createClass(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      return _regeneratorRuntime.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.usePKCE) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.ensureCodeIsSetupAsync());\n\n            case 3:\n              return _context.abrupt(\"return\", {\n                responseType: this.responseType,\n                clientId: this.clientId,\n                redirectUri: this.redirectUri,\n                scopes: this.scopes,\n                clientSecret: this.clientSecret,\n                codeChallenge: this.codeChallenge,\n                codeChallengeMethod: this.codeChallengeMethod,\n                prompt: this.prompt,\n                state: this.state,\n                extraParams: this.extraParams,\n                usePKCE: this.usePKCE\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"promptAsync\",\n    value: function promptAsync(discovery) {\n      var _ref,\n          url,\n          proxyOptions,\n          options,\n          startUrl,\n          returnUrl,\n          result,\n          useProxy,\n          openOptions,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.async(function promptAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              url = _ref.url, proxyOptions = _ref.proxyOptions, options = _objectWithoutProperties(_ref, _excluded);\n\n              if (url) {\n                _context2.next = 16;\n                break;\n              }\n\n              if (this.url) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.t0 = this;\n              _context2.t1 = discovery;\n              _context2.t2 = _objectSpread;\n              _context2.t3 = _objectSpread({}, options);\n              _context2.t4 = {};\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(this.makeAuthUrlAsync(discovery));\n\n            case 11:\n              _context2.t5 = _context2.sent;\n              _context2.t6 = {\n                url: _context2.t5\n              };\n              _context2.t7 = (0, _context2.t2)(_context2.t3, _context2.t4, _context2.t6);\n              return _context2.abrupt(\"return\", _context2.t0.promptAsync.call(_context2.t0, _context2.t1, _context2.t7));\n\n            case 15:\n              url = this.url;\n\n            case 16:\n              invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n              startUrl = url;\n              returnUrl = this.redirectUri;\n\n              if (options.useProxy) {\n                returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions == null ? void 0 : proxyOptions.path, proxyOptions);\n                startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n              }\n\n              if (!_authLock) {\n                _context2.next = 23;\n                break;\n              }\n\n              if (__DEV__) {\n                console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n              }\n\n              return _context2.abrupt(\"return\", {\n                type: 'locked'\n              });\n\n            case 23:\n              _authLock = true;\n              _context2.prev = 24;\n              useProxy = options.useProxy, openOptions = _objectWithoutProperties(options, _excluded2);\n              _context2.next = 28;\n              return _regeneratorRuntime.awrap(WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions));\n\n            case 28:\n              result = _context2.sent;\n\n            case 29:\n              _context2.prev = 29;\n              _authLock = false;\n              return _context2.finish(29);\n\n            case 32:\n              if (!(result.type === 'opened')) {\n                _context2.next = 34;\n                break;\n              }\n\n              throw new Error('An unexpected error occurred');\n\n            case 34:\n              if (!(result.type !== 'success')) {\n                _context2.next = 36;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                type: result.type\n              });\n\n            case 36:\n              return _context2.abrupt(\"return\", this.parseReturnUrl(result.url));\n\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[24,, 29, 32]], Promise);\n    }\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n          params = _QueryParams$getQuery.params,\n          errorCode = _QueryParams$getQuery.errorCode;\n\n      var state = params.state,\n          _params$error = params.error,\n          error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n\n      if (state !== this.state) {\n        parsedError = new AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new AuthError(_objectSpread({\n          error: error\n        }, params));\n      }\n\n      if (params.access_token) {\n        authentication = TokenResponse.fromQueryParams(params);\n      }\n\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: function makeAuthUrlAsync(discovery) {\n      var _request$scopes;\n\n      var request, params, extra, query;\n      return _regeneratorRuntime.async(function makeAuthUrlAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.getAuthRequestConfigAsync());\n\n            case 2:\n              request = _context3.sent;\n\n              if (request.state) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('Cannot make request URL without a valid `state` loaded');\n\n            case 5:\n              params = {};\n\n              if (request.codeChallenge) {\n                params.code_challenge = request.codeChallenge;\n              }\n\n              for (extra in request.extraParams) {\n                if (extra in request.extraParams) {\n                  params[extra] = request.extraParams[extra];\n                }\n              }\n\n              if (request.usePKCE && request.codeChallengeMethod) {\n                params.code_challenge_method = request.codeChallengeMethod;\n              }\n\n              if (request.clientSecret) {\n                params.client_secret = request.clientSecret;\n              }\n\n              if (request.prompt) {\n                params.prompt = request.prompt;\n              }\n\n              params.redirect_uri = request.redirectUri;\n              params.client_id = request.clientId;\n              params.response_type = request.responseType;\n              params.state = request.state;\n\n              if ((_request$scopes = request.scopes) != null && _request$scopes.length) {\n                params.scope = request.scopes.join(' ');\n              }\n\n              query = QueryParams.buildQueryString(params);\n              this.url = discovery.authorizationEndpoint + \"?\" + query;\n              return _context3.abrupt(\"return\", this.url);\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function ensureCodeIsSetupAsync() {\n      var _await$PKCE$buildCode, codeVerifier, codeChallenge;\n\n      return _regeneratorRuntime.async(function ensureCodeIsSetupAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this.codeVerifier) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(PKCE.buildCodeAsync());\n\n            case 4:\n              _await$PKCE$buildCode = _context4.sent;\n              codeVerifier = _await$PKCE$buildCode.codeVerifier;\n              codeChallenge = _await$PKCE$buildCode.codeChallenge;\n              this.codeVerifier = codeVerifier;\n              this.codeChallenge = codeChallenge;\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return AuthRequest;\n}();","map":{"version":3,"sources":["../src/AuthRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n/**\n * Implements an authorization request.\n *\n * [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, proxyOptions, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions?.path, proxyOptions);\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}