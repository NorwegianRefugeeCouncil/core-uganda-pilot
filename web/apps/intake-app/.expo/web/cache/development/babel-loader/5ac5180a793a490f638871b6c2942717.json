{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"theme\", \"alpha\", \"family\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"./Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar StyledText = function StyledText(_ref) {\n  var theme = _ref.theme,\n      alpha = _ref.alpha,\n      family = _ref.family,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  var font = theme.fonts[family];\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n  return React.createElement(Text, _extends({}, rest, {\n    style: [styles.text, _objectSpread(_objectSpread({\n      color: textColor\n    }, font), {}, {\n      writingDirection: writingDirection\n    }), style]\n  }));\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(StyledText);","map":{"version":3,"sources":["StyledText.tsx"],"names":["StyledText","rest","textColor","color","theme","font","writingDirection","I18nManager","styles","text","textAlign","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAGA,OAAA,IAAA;AACA,SAAA,SAAA;;AASA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAAqD;AAAA,MAApD,KAAoD,QAApD,KAAoD;AAAA,MAApD,KAAoD,QAApD,KAAoD;AAAA,MAApD,MAAoD,QAApD,MAAoD;AAAA,MAApD,KAAoD,QAApD,KAAoD;AAAA,MAAlBC,IAAkB;;AACtE,MAAMC,SAAS,GAAGC,KAAK,CAACC,KAAK,CAALA,MAAAA,CAAND,IAAK,CAALA,CAAAA,KAAAA,CAAAA,KAAAA,EAAAA,GAAAA,GAAlB,MAAkBA,EAAlB;AACA,MAAME,IAAI,GAAGD,KAAK,CAALA,KAAAA,CAAb,MAAaA,CAAb;AACA,MAAME,gBAAgB,GAAGC,WAAW,CAAXA,KAAAA,GAAAA,KAAAA,GAAzB,KAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACLC,MAAM,CADD,IAAA;AAEHL,MAAAA,KAAK,EAAP;AAFK,OAEL,IAFK;AAEwBG,MAAAA,gBAAAA,EAAAA;AAFxB,QAAA,KAAA;AAFT,GAAA,CAAA,CADF;AALF,CAAA;;AAiBA,IAAME,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AADyB,CAAlB,CAAf;AAMA,eAAeC,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"module"}