{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession, openAuthSessionAsync } from 'expo-web-browser';\nimport { AuthRequest } from \"./AuthRequest\";\nimport { CodeChallengeMethod, Prompt, ResponseType } from \"./AuthRequest.types\";\nimport { fetchDiscoveryAsync, resolveDiscoveryAsync } from \"./Discovery\";\nimport { generateHexStringAsync } from \"./PKCE\";\nimport { getQueryParams } from \"./QueryParams\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nvar _authLock = false;\nexport function startAsync(options) {\n  var authUrl, returnUrl, startUrl, showInRecents, result, _getQueryParams, params, errorCode;\n\n  return _regeneratorRuntime.async(function startAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          authUrl = options.authUrl;\n\n          if (authUrl) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n\n        case 3:\n          if (!_authLock) {\n            _context.next = 6;\n            break;\n          }\n\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n\n          return _context.abrupt(\"return\", {\n            type: 'locked'\n          });\n\n        case 6:\n          returnUrl = options.returnUrl || sessionUrlProvider.getDefaultReturnUrl();\n          startUrl = sessionUrlProvider.getStartUrl(authUrl, returnUrl);\n          showInRecents = options.showInRecents || false;\n          _authLock = true;\n          _context.prev = 10;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl, showInRecents));\n\n        case 13:\n          result = _context.sent;\n\n        case 14:\n          _context.prev = 14;\n          _authLock = false;\n          return _context.finish(14);\n\n        case 17:\n          if (result) {\n            _context.next = 19;\n            break;\n          }\n\n          throw new Error('Unexpected missing AuthSession result');\n\n        case 19:\n          if (result.url) {\n            _context.next = 25;\n            break;\n          }\n\n          if (!result.type) {\n            _context.next = 24;\n            break;\n          }\n\n          return _context.abrupt(\"return\", result);\n\n        case 24:\n          throw new Error('Unexpected AuthSession result with missing type');\n\n        case 25:\n          _getQueryParams = getQueryParams(result.url), params = _getQueryParams.params, errorCode = _getQueryParams.errorCode;\n          return _context.abrupt(\"return\", {\n            type: errorCode ? 'error' : 'success',\n            params: params,\n            errorCode: errorCode,\n            authentication: null,\n            url: result.url\n          });\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[10,, 14, 17]], Promise);\n}\nexport function dismiss() {\n  dismissAuthSession();\n}\nexport var getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\nexport function getRedirectUrl(path) {\n  return sessionUrlProvider.getRedirectUrl(path);\n}\nexport function makeRedirectUri() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      native = _ref.native,\n      scheme = _ref.scheme,\n      isTripleSlashed = _ref.isTripleSlashed,\n      queryParams = _ref.queryParams,\n      path = _ref.path,\n      preferLocalhost = _ref.preferLocalhost,\n      useProxy = _ref.useProxy;\n\n  if (Platform.OS !== 'web' && native && [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(Constants.executionEnvironment)) {\n    return native;\n  }\n\n  if (!useProxy || Platform.OS === 'web') {\n    var url = Linking.createURL(path || '', {\n      isTripleSlashed: isTripleSlashed,\n      scheme: scheme,\n      queryParams: queryParams\n    });\n\n    if (preferLocalhost) {\n      var ipAddress = url.match(/\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/);\n\n      if (ipAddress != null && ipAddress.length) {\n        var _url$split = url.split(ipAddress[0]),\n            _url$split2 = _slicedToArray(_url$split, 2),\n            protocol = _url$split2[0],\n            _path = _url$split2[1];\n\n        return protocol + \"localhost\" + _path;\n      }\n    }\n\n    return url;\n  }\n\n  return sessionUrlProvider.getRedirectUrl(path);\n}\nexport function loadAsync(config, issuerOrDiscovery) {\n  var request, discovery;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          request = new AuthRequest(config);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(resolveDiscoveryAsync(issuerOrDiscovery));\n\n        case 3:\n          discovery = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(request.makeAuthUrlAsync(discovery));\n\n        case 6:\n          return _context2.abrupt(\"return\", request);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _openWebBrowserAsync(startUrl, returnUrl, showInRecents) {\n  var result;\n  return _regeneratorRuntime.async(function _openWebBrowserAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(openAuthSessionAsync(startUrl, returnUrl, {\n            showInRecents: showInRecents\n          }));\n\n        case 2:\n          result = _context3.sent;\n\n          if (!(result.type === 'cancel' || result.type === 'dismiss')) {\n            _context3.next = 5;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {\n            type: result.type\n          });\n\n        case 5:\n          return _context3.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { useAutoDiscovery, useAuthRequest } from \"./AuthRequestHooks\";\nexport { AuthError, TokenError } from \"./Errors\";\nexport { AuthRequest, CodeChallengeMethod, Prompt, ResponseType, resolveDiscoveryAsync, fetchDiscoveryAsync, generateHexStringAsync };\nexport { TokenResponse, AccessTokenRequest, RefreshTokenRequest, RevokeTokenRequest, revokeAsync, refreshAsync, exchangeCodeAsync, fetchUserInfoAsync } from \"./TokenRequest\";\nexport * from \"./TokenRequest.types\";","map":{"version":3,"sources":["../src/AuthSession.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession, openAuthSessionAsync } from 'expo-web-browser';\n\nimport { AuthRequest } from './AuthRequest';\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  Prompt,\n  ResponseType,\n} from './AuthRequest.types';\nimport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n} from './AuthSession.types';\nimport {\n  DiscoveryDocument,\n  fetchDiscoveryAsync,\n  Issuer,\n  IssuerOrDiscovery,\n  ProviderMetadata,\n  resolveDiscoveryAsync,\n} from './Discovery';\nimport { generateHexStringAsync } from './PKCE';\nimport { getQueryParams } from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\n\nlet _authLock = false;\n\nexport async function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const authUrl = options.authUrl;\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  const returnUrl = options.returnUrl || sessionUrlProvider.getDefaultReturnUrl();\n  const startUrl = sessionUrlProvider.getStartUrl(authUrl, returnUrl);\n  const showInRecents = options.showInRecents || false;\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl, showInRecents);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  const { params, errorCode } = getQueryParams(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    authentication: null,\n    url: result.url,\n  };\n}\n\nexport function dismiss() {\n  dismissAuthSession();\n}\n\nexport const getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\n\n/**\n * @deprecated Use `makeRedirectUri({ path, useProxy })` instead.\n *\n * @param path\n */\nexport function getRedirectUrl(path?: string): string {\n  return sessionUrlProvider.getRedirectUrl(path);\n}\n\n/**\n * Create a redirect url for the current platform.\n *\n * - **Web:** Generates a path based on the current \\`window.location\\`. For production web apps you should hard code the URL.\n * - **Managed:** Uses the `scheme` property of your `app.config.js` or `app.json`.\n *   - **Proxy:** Uses auth.expo.io as the base URL for the path. This only works in Expo client and standalone environments.\n * - **Bare workflow:** Provide either the `scheme` or a manual `native` property to use.\n *\n * @param options Additional options for configuring the path.\n *\n * @example\n * ```ts\n * const redirectUri = makeRedirectUri({\n *   scheme: 'my-scheme',\n *   path: 'redirect'\n * });\n * // Custom app: my-scheme://redirect\n * // Expo Go: exp://127.0.0.1:19000/--/redirect\n * // Web dev: https://localhost:19006/redirect\n * // Web prod: https://yourwebsite.com/redirect\n *\n * const redirectUri2 = makeRedirectUri({\n *   scheme: 'scheme2',\n *   preferLocalhost: true,\n *   isTripleSlashed: true,\n * });\n * // Custom app: scheme2:///\n * // Expo Go: exp://localhost:19000\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n *\n * const redirectUri3 = makeRedirectUri({\n *   useProxy: true,\n * });\n * // Custom app: https://auth.expo.io/@username/slug\n * // Expo Go: https://auth.expo.io/@username/slug\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n */\nexport function makeRedirectUri({\n  native,\n  scheme,\n  isTripleSlashed,\n  queryParams,\n  path,\n  preferLocalhost,\n  useProxy,\n}: AuthSessionRedirectUriOptions = {}): string {\n  if (\n    Platform.OS !== 'web' &&\n    native &&\n    [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(\n      Constants.executionEnvironment\n    )\n  ) {\n    // Should use the user-defined native scheme in standalone builds\n    return native;\n  }\n  if (!useProxy || Platform.OS === 'web') {\n    const url = Linking.createURL(path || '', {\n      isTripleSlashed,\n      scheme,\n      queryParams,\n    });\n\n    if (preferLocalhost) {\n      const ipAddress = url.match(\n        /\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/\n      );\n      // Only replace if an IP address exists\n      if (ipAddress?.length) {\n        const [protocol, path] = url.split(ipAddress[0]);\n        return `${protocol}localhost${path}`;\n      }\n    }\n\n    return url;\n  }\n  // Attempt to use the proxy\n  return sessionUrlProvider.getRedirectUrl(path);\n}\n\n/**\n * Build an `AuthRequest` and load it before returning.\n *\n * @param config\n * @param issuerOrDiscovery\n */\nexport async function loadAsync(\n  config: AuthRequestConfig,\n  issuerOrDiscovery: IssuerOrDiscovery\n): Promise<AuthRequest> {\n  const request = new AuthRequest(config);\n  const discovery = await resolveDiscoveryAsync(issuerOrDiscovery);\n  await request.makeAuthUrlAsync(discovery);\n  return request;\n}\n\nasync function _openWebBrowserAsync(startUrl: string, returnUrl: string, showInRecents: boolean) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  const result = await openAuthSessionAsync(startUrl, returnUrl, { showInRecents });\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nexport { useAutoDiscovery, useAuthRequest } from './AuthRequestHooks';\nexport { AuthError, TokenError } from './Errors';\n\nexport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  DiscoveryDocument,\n  Issuer,\n  IssuerOrDiscovery,\n  Prompt,\n  ProviderMetadata,\n  ResponseType,\n  resolveDiscoveryAsync,\n  fetchDiscoveryAsync,\n  generateHexStringAsync,\n};\n\nexport {\n  // Token classes\n  TokenResponse,\n  AccessTokenRequest,\n  RefreshTokenRequest,\n  RevokeTokenRequest,\n  // Token methods\n  revokeAsync,\n  refreshAsync,\n  exchangeCodeAsync,\n  fetchUserInfoAsync,\n} from './TokenRequest';\n\n// Token types\nexport * from './TokenRequest.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}