{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"subtitle\", \"subtitleStyle\", \"onPress\", \"style\", \"titleRef\", \"titleStyle\", \"theme\", \"title\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\n\nvar AppbarContent = function AppbarContent(_ref) {\n  var _ref$color = _ref.color,\n      titleColor = _ref$color === void 0 ? white : _ref$color,\n      subtitle = _ref.subtitle,\n      subtitleStyle = _ref.subtitleStyle,\n      onPress = _ref.onPress,\n      style = _ref.style,\n      titleRef = _ref.titleRef,\n      titleStyle = _ref.titleStyle,\n      theme = _ref.theme,\n      title = _ref.title,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var fonts = theme.fonts;\n  var subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: onPress,\n    disabled: !onPress\n  }, React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest), React.createElement(Text, {\n    ref: titleRef,\n    style: [_objectSpread({\n      color: titleColor\n    }, Platform.OS === 'ios' ? fonts.regular : fonts.medium), styles.title, titleStyle],\n    numberOfLines: 1,\n    accessible: true,\n    accessibilityTraits: \"header\",\n    accessibilityRole: Platform.OS === 'web' ? 'heading' : 'header'\n  }, title), subtitle ? React.createElement(Text, {\n    style: [styles.subtitle, {\n      color: subtitleColor\n    }, subtitleStyle],\n    numberOfLines: 1\n  }, subtitle) : null));\n};\n\nAppbarContent.displayName = 'Appbar.Content';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14\n  }\n});\nexport default withTheme(AppbarContent);\nvar AppbarContentWithTheme = withTheme(AppbarContent);\nexport { AppbarContentWithTheme as AppbarContent };","map":{"version":3,"sources":["AppbarContent.tsx"],"names":["AppbarContent","color","titleColor","rest","fonts","subtitleColor","onPress","styles","Platform","subtitle","container","flex","paddingHorizontal","title","fontSize","withTheme","AppbarContentWithTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAA,IAAA;AAEA,SAAA,SAAA;AACA,SAAA,KAAA;;AA+DA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAWT;AAAA,wBAVXC,KAUW;AAAA,MAVJC,UAUI,2BAXU,KAWV;AAAA,MAXU,QAWV,QAXU,QAWV;AAAA,MAXU,aAWV,QAXU,aAWV;AAAA,MAXU,OAWV,QAXU,OAWV;AAAA,MAXU,KAWV,QAXU,KAWV;AAAA,MAXU,QAWV,QAXU,QAWV;AAAA,MAXU,UAWV,QAXU,UAWV;AAAA,MAXU,KAWV,QAXU,KAWV;AAAA,MAXU,KAWV,QAXU,KAWV;AAAA,MADRC,IACQ;;AACX,MAAQC,KAAR,GAAA,KAAA,CAAQA,KAAR;AAEA,MAAMC,aAAa,GAAGJ,KAAK,CAALA,UAAK,CAALA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAAtB,MAAsBA,EAAtB;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,IAAA,OAAO,EAAjC,OAAA;AAA4C,IAAA,QAAQ,EAAE,CAACK;AAAvD,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAA,KAAA;AAAb,GAAA,EAAA,IAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,GAAG,EADL,QAAA;AAEE,IAAA,KAAK,EAAE;AAEHN,MAAAA,KAAK,EADP;AADK,OAGCO,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAwBJ,KAAK,CAA7BI,OAAAA,GAAwCJ,KAAK,CAAjD,MAHG,GAKLG,MAAM,CALD,KAAA,EAFT,UAES,CAFT;AAUE,IAAA,aAAa,EAVf,CAAA;AAWE,IAAA,UAAU,EAXZ,IAAA;AAYE,IAAA,mBAAmB,EAZrB,QAAA;AAcE,IAAA,iBAAiB,EAAEC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,SAAAA,GAAoC;AAdzD,GAAA,EADF,KACE,CADF,EAmBGC,QAAQ,GACP,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACF,MAAM,CAAP,QAAA,EAAkB;AAAEN,MAAAA,KAAK,EAAEI;AAAT,KAAlB,EADT,aACS,CADT;AAEE,IAAA,aAAa,EAAE;AAFjB,GAAA,EADO,QACP,CADO,GArBf,IAEI,CADF,CADF;AAhBF,CAAA;;AAkDAL,aAAa,CAAbA,WAAAA,GAAAA,gBAAAA;AAEA,IAAMO,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,iBAAiB,EAAE;AAFV,GADoB;AAK/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAEN,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,GAA6B;AADlC,GALwB;AAQ/BC,EAAAA,QAAQ,EAAE;AACRK,IAAAA,QAAQ,EAAEN,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,EAAAA,GAA6B;AAD/B;AARqB,CAAlB,CAAf;AAaA,eAAeO,SAAS,CAAxB,aAAwB,CAAxB;AAGA,IAAMC,sBAAsB,GAAGD,SAAS,CAAxC,aAAwC,CAAxC;AAEA,SAASC,sBAAsB,IAA/B,aAAA","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-content.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor = white,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  style,\n  titleRef,\n  titleStyle,\n  theme,\n  title,\n  ...rest\n}: Props) => {\n  const { fonts } = theme;\n\n  const subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n\n  return (\n    <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n      <View style={[styles.container, style]} {...rest}>\n        <Text\n          ref={titleRef}\n          style={[\n            {\n              color: titleColor,\n              ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n            },\n            styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityTraits=\"header\"\n          // @ts-expect-error React Native doesn't accept 'heading' as it's web-only\n          accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n        >\n          {title}\n        </Text>\n        {subtitle ? (\n          <Text\n            style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nconst AppbarContentWithTheme = withTheme(AppbarContent);\n// @component-docs ignore-next-line\nexport { AppbarContentWithTheme as AppbarContent };\n"]},"metadata":{},"sourceType":"module"}