{"ast":null,"code":"import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from \"./ServerContext\";\nexport default React.forwardRef(function ServerContainer(_ref, ref) {\n  var children = _ref.children,\n      location = _ref.location;\n  React.useEffect(function () {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  var current = {};\n\n  if (ref) {\n    var value = {\n      getCurrentOptions: function getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      ref.current = value;\n    }\n  }\n\n  return React.createElement(ServerContext.Provider, {\n    value: {\n      location: location\n    }\n  }, React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["location","React","console","current","value","getCurrentOptions","ref"],"mappings":"AAAA,SAAA,oBAAA,QAAA,wBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,aAAA;AAcA,eAAe,KAAK,CAAL,UAAA,CAAiB,SAAA,eAAA,OAAA,GAAA,EAG9B;AAAA,MAFA,QAEA,QAFA,QAEA;AAAA,MAFYA,QAEZ,QAFYA,QAEZ;AACAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,sFAAAA;AADFD,GAAAA,EAAAA,EAAAA;AAMA,MAAME,OAA6B,GAAnC,EAAA;;AAEA,MAAA,GAAA,EAAS;AACP,QAAMC,KAAK,GAAG;AACZC,MAAAA,iBADY,+BACQ;AAClB,eAAOF,OAAO,CAAd,OAAA;AACD;AAHW,KAAd;;AAUA,QAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAC7BG,MAAAA,GAAG,CAAHA,KAAG,CAAHA;AADF,KAAA,MAEO;AAELA,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AACD;AACF;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,aAAD,CAAA,QAAA,EAAA;AAAwB,IAAA,KAAK,EAAE;AAAEN,MAAAA,QAAAA,EAAAA;AAAF;AAA/B,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,EAAA;AAA+B,IAAA,KAAK,EAAEG;AAAtC,GAAA,EAFJ,QAEI,CADF,CADF;AA/BF,CAAe,CAAf","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}