{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoNetwork from \"./ExpoNetwork\";\nimport { NetworkStateType } from \"./Network.types\";\nexport { NetworkStateType };\nexport function getNetworkStateAsync() {\n  return _regeneratorRuntime.async(function getNetworkStateAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoNetwork.getNetworkStateAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoNetwork.getNetworkStateAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getIpAddressAsync() {\n  return _regeneratorRuntime.async(function getIpAddressAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoNetwork.getIpAddressAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoNetwork.getIpAddressAsync());\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getMacAddressAsync() {\n  var interfaceName,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getMacAddressAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          interfaceName = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;\n          console.warn('Network.getMacAddressAsync has been deprecated and will be removed in a future SDK version. To uniquely identify a device, use the expo-application module instead.');\n          return _context3.abrupt(\"return\", '02:00:00:00:00:00');\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAirplaneModeEnabledAsync() {\n  return _regeneratorRuntime.async(function isAirplaneModeEnabledAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoNetwork.isAirplaneModeEnabledAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoNetwork.isAirplaneModeEnabledAsync());\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Network.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAEA,OAAO,WAAP;AACA,SAAuB,gBAAvB;AAEA,SAAuB,gBAAvB;AAqBA,OAAO,SAAe,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,oBADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,cAAxB,EAAwC,sBAAxC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,WAAW,CAAC,oBAAZ,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBP,OAAO,SAAe,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,iBADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,cAAxB,EAAwC,mBAAxC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,WAAW,CAAC,iBAAZ,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBP,OAAO,SAAe,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC,UAAA,aAAlC,8DAAiE,IAAjE;AACL,UAAA,OAAO,CAAC,IAAR,CACE,qKADF;AADK,4CAIE,mBAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBP,OAAO,SAAe,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,WAAW,CAAC,0BADZ;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,cAAxB,EAAwC,4BAAxC,CAFH;;AAAA;AAAA;AAAA,2CAIQ,WAAW,CAAC,0BAAZ,EAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoNetwork from './ExpoNetwork';\nimport { NetworkState, NetworkStateType } from './Network.types';\n\nexport { NetworkState, NetworkStateType };\n\n// @needsAudit\n/**\n * Gets the device's current network connection state.\n *\n * On web, `navigator.connection.type` is not available on browsers. So if there is an active\n * network connection, the field `type` returns `NetworkStateType.UNKNOWN`. Otherwise, it returns\n * `NetworkStateType.NONE`.\n * @return A `Promise` that fulfils with a `NetworkState` object.\n *\n * @example\n * ```ts\n * await Network.getNetworkStateAsync();\n * // {\n * //   type: NetworkStateType.CELLULAR,\n * //   isConnected: true,\n * //   isInternetReachable: true,\n * // }\n * ```\n */\nexport async function getNetworkStateAsync(): Promise<NetworkState> {\n  if (!ExpoNetwork.getNetworkStateAsync) {\n    throw new UnavailabilityError('expo-network', 'getNetworkStateAsync');\n  }\n  return await ExpoNetwork.getNetworkStateAsync();\n}\n\n// @needsAudit\n/**\n * Gets the device's current IPv4 address. Returns `0.0.0.0`` if the IP address could not be retrieved.\n *\n * On web, this method uses the third-party [`ipify service`](https://www.ipify.org/) to get the\n * public IP address of the current device.\n * @return A `Promise` that fulfils with a `string` of the current IP address of the device's main\n * network interface. Can only be IPv4 address.\n *\n * @example\n * ```ts\n * await Network.getIpAddressAsync();\n * // \"92.168.32.44\"\n * ```\n */\nexport async function getIpAddressAsync(): Promise<string> {\n  if (!ExpoNetwork.getIpAddressAsync) {\n    throw new UnavailabilityError('expo-network', 'getIpAddressAsync');\n  }\n  return await ExpoNetwork.getIpAddressAsync();\n}\n\n// @needsAudit\n/**\n * Gets the specified network interface's MAC address.\n *\n * > Beginning with iOS 7 and Android 11, non-system applications can no longer access the device's\n * MAC address. In SDK 41 and above, this method will always resolve to a predefined value that\n * isn't useful.\n *\n * If you need to identify the device, use the `getIosIdForVendorAsync()` method / `androidId`\n * property of the `expo-application` unimodule instead.\n *\n * @deprecated This method is deprecated and will be removed in a future SDK version.\n *\n * @param interfaceName A string representing interface name (`eth0`, `wlan0`) or `null` (default),\n * meaning the method should fetch the MAC address of the first available interface.\n *\n * @return A `Promise` that fulfils with the value `'02:00:00:00:00:00'`.\n */\nexport async function getMacAddressAsync(interfaceName: string | null = null): Promise<string> {\n  console.warn(\n    'Network.getMacAddressAsync has been deprecated and will be removed in a future SDK version. To uniquely identify a device, use the expo-application module instead.'\n  );\n  return '02:00:00:00:00:00';\n}\n\n// @needsAudit\n/**\n * __Android only.__ Tells if the device is in airplane mode.\n * @return Returns a `Promise` that fulfils with a `boolean` value for whether the device is in\n * airplane mode or not.\n *\n * @example\n * ```ts\n * await Network.isAirplaneModeEnabledAsync();\n * // false\n * ```\n */\nexport async function isAirplaneModeEnabledAsync(): Promise<boolean> {\n  if (!ExpoNetwork.isAirplaneModeEnabledAsync) {\n    throw new UnavailabilityError('expo-network', 'isAirplaneModeEnabledAsync');\n  }\n  return await ExpoNetwork.isAirplaneModeEnabledAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}