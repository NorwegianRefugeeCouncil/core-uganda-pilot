{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Button = function Button(_ref) {\n  var disabled = _ref.disabled,\n      compact = _ref.compact,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n      dark = _ref.dark,\n      loading = _ref.loading,\n      icon = _ref.icon,\n      buttonColor = _ref.color,\n      children = _ref.children,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      accessibilityLabel = _ref.accessibilityLabel,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      style = _ref.style,\n      theme = _ref.theme,\n      contentStyle = _ref.contentStyle,\n      labelStyle = _ref.labelStyle,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _StyleSheet$flatten;\n\n  var _React$useRef = React.useRef(new Animated.Value(mode === 'contained' ? 2 : 0)),\n      elevation = _React$useRef.current;\n\n  React.useEffect(function () {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n\n  var _ref2 = StyleSheet.flatten(labelStyle) || {},\n      customLabelColor = _ref2.color,\n      customLabelSize = _ref2.fontSize;\n\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n\n  var elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  var iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevationRes\n    }, buttonStyle, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"sources":["Button.tsx"],"names":["Button","mode","color","uppercase","rest","current","elevation","React","Animated","handlePressIn","scale","theme","toValue","duration","useNativeDriver","handlePressOut","roundness","font","backgroundColor","colors","borderColor","borderWidth","StyleSheet","textColor","isDark","rippleColor","buttonStyle","borderRadius","touchableStyle","style","fontSize","customLabelSize","textStyle","elevationRes","disabled","iconStyle","styles","compact","testID","icon","loading","button","minWidth","borderStyle","content","flexDirection","alignItems","justifyContent","marginLeft","marginRight","iconReverse","label","textAlign","letterSpacing","marginVertical","marginHorizontal","compactLabel","uppercaseLabel","textTransform","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(mode === 'contained' ? 2 : 0)\n  );\n  React.useEffect(() => {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation: elevationRes } as ViewStyle,\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}