{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport Header from \"./Header\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentHeaderBack = React.useContext(HeaderBackContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _self, _self2;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var _scene$descriptor$opt = scene.descriptor.options,\n        header = _scene$descriptor$opt.header,\n        headerMode = _scene$descriptor$opt.headerMode,\n        _scene$descriptor$opt2 = _scene$descriptor$opt.headerShown,\n        headerShown = _scene$descriptor$opt2 === void 0 ? true : _scene$descriptor$opt2,\n        headerTransparent = _scene$descriptor$opt.headerTransparent,\n        headerStyleInterpolator = _scene$descriptor$opt.headerStyleInterpolator;\n\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n\n    var isFocused = focusedRoute.key === scene.descriptor.route.key;\n    var previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    var headerBack = parentHeaderBack;\n\n    if (previousScene) {\n      var _previousScene$descri = previousScene.descriptor,\n          options = _previousScene$descri.options,\n          route = _previousScene$descri.route;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    }\n\n    var previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    var nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n\n    var _ref2 = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {},\n        _ref2$headerShown = _ref2.headerShown,\n        previousHeaderShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n        previousHeaderMode = _ref2.headerMode;\n\n    var nextHeaderlessScene = self.slice(i + 1).find(function (scene) {\n      var _ref3 = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {},\n          _ref3$headerShown = _ref3.headerShown,\n          currentHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown,\n          currentHeaderMode = _ref3.headerMode;\n\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n\n    var _ref4 = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {},\n        nextHeaderlessGestureDirection = _ref4.gestureDirection;\n\n    var isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;\n    var props = {\n      layout: layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["style","focusedRoute","getFocusedRoute","parentHeaderBack","React","mode","i","self","headerShown","headerStyleInterpolator","scene","headerMode","isFocused","previousScene","getPreviousScene","route","headerBack","title","getHeaderTitle","previousDescriptor","nextDescriptor","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","currentHeaderShown","currentHeaderMode","gestureDirection","nextHeaderlessGestureDirection","isHeaderStatic","props","layout","back","progress","options","navigation","styleInterpolator","forNoAnimation","onContentHeightChange","e","height","styles","header","position","top","left","right"],"mappings":"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","sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport Header from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? { title: getHeaderTitle(options, route.name) }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}