{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\nimport { Text } from \"react-native-paper\";\nimport { darkTheme } from \"../../constants/theme\";\n\nvar ReferenceInput = function ReferenceInput(_ref) {\n  var fieldDefinition = _ref.fieldDefinition,\n      style = _ref.style,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      error = _ref.error,\n      invalid = _ref.invalid,\n      isTouched = _ref.isTouched,\n      isDirty = _ref.isDirty,\n      isMultiple = _ref.isMultiple,\n      isQuantity = _ref.isQuantity;\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedValue = _React$useState2[0],\n      setSelectedValue = _React$useState2[1];\n\n  return React.createElement(View, {\n    style: style\n  }, fieldDefinition.name && React.createElement(Text, {\n    theme: darkTheme\n  }, fieldDefinition.name), fieldDefinition.description && React.createElement(Text, {\n    theme: darkTheme,\n    style: {\n      fontSize: 10\n    }\n  }, fieldDefinition.description), isTouched && isDirty && error && React.createElement(Text, null, error.message == '' ? 'invalid' : error.message));\n};\n\nexport default ReferenceInput;","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/form/ReferenceInput.tsx"],"names":["React","Text","darkTheme","ReferenceInput","fieldDefinition","style","value","onChange","onBlur","error","invalid","isTouched","isDirty","isMultiple","isQuantity","useState","selectedValue","setSelectedValue","name","description","fontSize","message"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAmBC,IAAnB,QAA8B,oBAA9B;AACA,SAAQC,SAAR;;AAIA,IAAMC,cAAoC,GAAG,SAAvCA,cAAuC,OAanC;AAAA,MAXFC,eAWE,QAXFA,eAWE;AAAA,MAVFC,KAUE,QAVFA,KAUE;AAAA,MATFC,KASE,QATFA,KASE;AAAA,MARFC,QAQE,QARFA,QAQE;AAAA,MAPFC,MAOE,QAPFA,MAOE;AAAA,MANFC,KAME,QANFA,KAME;AAAA,MALFC,OAKE,QALFA,OAKE;AAAA,MAJFC,SAIE,QAJFA,SAIE;AAAA,MAHFC,OAGE,QAHFA,OAGE;AAAA,MAFFC,UAEE,QAFFA,UAEE;AAAA,MADFC,UACE,QADFA,UACE;;AAEN,wBAA0Cd,KAAK,CAACe,QAAN,CAAeT,KAAf,CAA1C;AAAA;AAAA,MAAOU,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEZ;AAAb,KACKD,eAAe,CAACc,IAAhB,IAAwB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhB;AAAb,KAAyBE,eAAe,CAACc,IAAzC,CAD7B,EAEKd,eAAe,CAACe,WAAhB,IACG,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,SAAb;AAAwB,IAAA,KAAK,EAAE;AAACkB,MAAAA,QAAQ,EAAE;AAAX;AAA/B,KACKhB,eAAe,CAACe,WADrB,CAHR,EAsCKR,SAAS,IAAIC,OAAb,IAAwBH,KAAxB,IACG,oBAAC,IAAD,QACKA,KAAK,CAACY,OAAN,IAAiB,EAAjB,GAAsB,SAAtB,GAAkCZ,KAAK,CAACY,OAD7C,CAvCR,CADJ;AA+CH,CAhED;;AAkEA,eAAelB,cAAf","sourcesContent":["import {View} from \"react-native\";\nimport React from \"react\";\nimport {DataTable, Text} from \"react-native-paper\";\nimport {darkTheme} from \"../../constants/theme\";\nimport {InputProps} from \"./FormControl\";\n// import {Picker} from \"@react-native-picker/picker\";\n\nconst ReferenceInput: React.FC<InputProps> = (\n    {\n        fieldDefinition,\n        style,\n        value,\n        onChange,\n        onBlur,\n        error,\n        invalid,\n        isTouched,\n        isDirty,\n        isMultiple,\n        isQuantity\n    }) => {\n\n    const [selectedValue, setSelectedValue] = React.useState(value);\n\n    return (\n        <View style={style}>\n            {fieldDefinition.name && <Text theme={darkTheme}>{fieldDefinition.name}</Text>}\n            {fieldDefinition.description &&(\n                <Text theme={darkTheme} style={{fontSize: 10}}>\n                    {fieldDefinition.description}\n                </Text>\n            )}\n            {/*<DataTable>*/}\n            {/*    <DataTable.Header>*/}\n            {/*        <DataTable.Title>Dessert</DataTable.Title>*/}\n            {/*        <DataTable.Title numeric>Calories</DataTable.Title>*/}\n            {/*        <DataTable.Title numeric>Fat</DataTable.Title>*/}\n            {/*    </DataTable.Header>*/}\n\n            {/*    <DataTable.Row>*/}\n            {/*        <DataTable.Cell>Frozen yogurt</DataTable.Cell>*/}\n            {/*        <DataTable.Cell numeric>159</DataTable.Cell>*/}\n            {/*        <DataTable.Cell numeric>6.0</DataTable.Cell>*/}\n            {/*    </DataTable.Row>*/}\n\n            {/*    <DataTable.Row>*/}\n            {/*        <DataTable.Cell>Ice cream sandwich</DataTable.Cell>*/}\n            {/*        <DataTable.Cell numeric>237</DataTable.Cell>*/}\n            {/*        <DataTable.Cell numeric>8.0</DataTable.Cell>*/}\n            {/*    </DataTable.Row>*/}\n\n            {/*    <DataTable.Pagination*/}\n            {/*        page={page}*/}\n            {/*        numberOfPages={3}*/}\n            {/*        onPageChange={(page) => setPage(page)}*/}\n            {/*        label=\"1-2 of 6\"*/}\n            {/*        optionsPerPage={optionsPerPage}*/}\n            {/*        itemsPerPage={itemsPerPage}*/}\n            {/*        setItemsPerPage={setItemsPerPage}*/}\n            {/*        showFastPagination*/}\n            {/*        optionsLabel={'Rows per page'}*/}\n            {/*    />*/}\n            {/*</DataTable>*/}\n            {isTouched && isDirty && error && (\n                <Text>\n                    {error.message == '' ? 'invalid' : error.message}\n                </Text>\n            )}\n        </View>\n\n    );\n};\n\nexport default ReferenceInput;\n"]},"metadata":{},"sourceType":"module"}