{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Fragment, useCallback, useEffect, useMemo, useState } from 'react';\nimport { axiosInstance } from \"../utils/clients\";\nimport { CodeChallengeMethod, exchangeCodeAsync, makeRedirectUri, ResponseType, useAuthRequest, useAutoDiscovery } from 'expo-auth-session';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Constants from \"expo-constants\";\nexport var AuthWrapper = function AuthWrapper(props) {\n  var _Constants$manifest, _Constants$manifest$e, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest3, _Constants$manifest3$;\n\n  var children = props.children;\n  var clientId = (_Constants$manifest = Constants.manifest) == null ? void 0 : (_Constants$manifest$e = _Constants$manifest.extra) == null ? void 0 : _Constants$manifest$e.client_id;\n  var useProxy = useMemo(function () {\n    return Platform.select({\n      web: false,\n      default: false\n    });\n  }, []);\n  var redirectUri = useMemo(function () {\n    return makeRedirectUri({\n      scheme: 'nrccore'\n    });\n  }, []);\n  var discovery = useAutoDiscovery((_Constants$manifest2 = Constants.manifest) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : _Constants$manifest2$.issuer);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loggedIn = _useState2[0],\n      setLoggedIn = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tokenResponse = _useState4[0],\n      setTokenResponse = _useState4[1];\n\n  var _useAuthRequest = useAuthRequest({\n    clientId: clientId,\n    usePKCE: true,\n    responseType: ResponseType.Code,\n    codeChallengeMethod: CodeChallengeMethod.S256,\n    scopes: (_Constants$manifest3 = Constants.manifest) == null ? void 0 : (_Constants$manifest3$ = _Constants$manifest3.extra) == null ? void 0 : _Constants$manifest3$.scopes,\n    redirectUri: redirectUri\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  React.useEffect(function () {\n    if (!discovery) {\n      return;\n    }\n\n    if (!(request != null && request.codeVerifier)) {\n      return;\n    }\n\n    if (!response || response.type !== \"success\") {\n      return;\n    }\n\n    var exchangeConfig = {\n      code: response.params.code,\n      clientId: clientId,\n      redirectUri: redirectUri,\n      extraParams: {\n        \"code_verifier\": request == null ? void 0 : request.codeVerifier\n      }\n    };\n    exchangeCodeAsync(exchangeConfig, discovery).then(function (a) {\n      setTokenResponse(a);\n    }).catch(function (err) {\n      setTokenResponse(undefined);\n    });\n  }, [request == null ? void 0 : request.codeVerifier, response, discovery]);\n  useEffect(function () {\n    if (!discovery) {\n      return;\n    }\n\n    if (tokenResponse != null && tokenResponse.shouldRefresh()) {\n      var _Constants$manifest4, _Constants$manifest4$;\n\n      var refreshConfig = {\n        clientId: clientId,\n        scopes: (_Constants$manifest4 = Constants.manifest) == null ? void 0 : (_Constants$manifest4$ = _Constants$manifest4.extra) == null ? void 0 : _Constants$manifest4$.scopes,\n        extraParams: {}\n      };\n      tokenResponse == null ? void 0 : tokenResponse.refreshAsync(refreshConfig, discovery).then(function (resp) {\n        setTokenResponse(resp);\n      }).catch(function (err) {\n        setTokenResponse(undefined);\n      });\n    }\n  }, [tokenResponse == null ? void 0 : tokenResponse.shouldRefresh(), discovery]);\n  useEffect(function () {\n    if (tokenResponse) {\n      if (!loggedIn) {\n        setLoggedIn(true);\n      }\n    } else {\n      if (loggedIn) {\n        setLoggedIn(false);\n      }\n    }\n  }, [tokenResponse, loggedIn]);\n  useEffect(function () {\n    var interceptor = axiosInstance.interceptors.request.use(function (value) {\n      if (!(tokenResponse != null && tokenResponse.accessToken)) {\n        return value;\n      }\n\n      if (!value.headers) {\n        value.headers = {};\n      }\n\n      value.headers[\"Authorization\"] = \"Bearer \" + tokenResponse.accessToken;\n      return value;\n    });\n    return function () {\n      axiosInstance.interceptors.request.eject(interceptor);\n    };\n  }, [tokenResponse == null ? void 0 : tokenResponse.accessToken]);\n  var handleLogin = useCallback(function () {\n    promptAsync({\n      useProxy: useProxy\n    }).then(function (response) {\n      console.log(\"PROMPT RESPONSE\", response);\n    }).catch(function (err) {\n      console.log(\"PROMPT ERROR\", err);\n    });\n  }, [useProxy, promptAsync]);\n\n  if (!loggedIn) {\n    return React.createElement(Button, {\n      title: \"Login\",\n      disabled: !request,\n      onPress: handleLogin\n    });\n  }\n\n  return React.createElement(Fragment, null, children);\n};","map":{"version":3,"sources":["/home/nilueps/GolandProjects/core/web/apps/intake-app/src/components/AuthWrapper.tsx"],"names":["React","Fragment","useCallback","useEffect","useMemo","useState","axiosInstance","CodeChallengeMethod","exchangeCodeAsync","makeRedirectUri","ResponseType","useAuthRequest","useAutoDiscovery","Constants","AuthWrapper","props","children","clientId","manifest","extra","client_id","useProxy","Platform","select","web","default","redirectUri","scheme","discovery","issuer","loggedIn","setLoggedIn","tokenResponse","setTokenResponse","usePKCE","responseType","Code","codeChallengeMethod","S256","scopes","request","response","promptAsync","codeVerifier","type","exchangeConfig","code","params","extraParams","then","a","catch","err","undefined","shouldRefresh","refreshConfig","refreshAsync","resp","interceptor","interceptors","use","value","accessToken","headers","eject","handleLogin","console","log"],"mappings":"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","sourcesContent":["import React, {FC, Fragment, useCallback, useEffect, useMemo, useState} from 'react';\nimport {axiosInstance} from \"../utils/clients\"\nimport {\n    CodeChallengeMethod,\n    exchangeCodeAsync,\n    makeRedirectUri,\n    ResponseType,\n    TokenResponse,\n    useAuthRequest,\n    useAutoDiscovery,\n} from 'expo-auth-session';\nimport {Button, Platform} from \"react-native\";\nimport Constants from \"expo-constants\";\n\nexport const AuthWrapper: FC = props => {\n    const {children} = props\n    const clientId = Constants.manifest?.extra?.client_id\n    const useProxy = useMemo(() => Platform.select({web: false, default: false}), []);\n    const redirectUri = useMemo(() => makeRedirectUri({scheme: 'nrccore'}), [])\n    const discovery = useAutoDiscovery(Constants.manifest?.extra?.issuer);\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [tokenResponse, setTokenResponse] = useState<TokenResponse>()\n\n    const [request, response, promptAsync] = useAuthRequest(\n        {\n            clientId,\n            usePKCE: true,\n            responseType: ResponseType.Code,\n            codeChallengeMethod: CodeChallengeMethod.S256,\n            scopes: Constants.manifest?.extra?.scopes,\n            redirectUri,\n        },\n        discovery\n    );\n\n    React.useEffect(() => {\n        if (!discovery) {\n            return;\n        }\n        if (!request?.codeVerifier) {\n            return;\n        }\n        if (!response || response.type !== \"success\") {\n            return;\n        }\n\n        const exchangeConfig = {\n            code: response.params.code,\n            clientId,\n            redirectUri,\n            extraParams: {\n                \"code_verifier\": request?.codeVerifier,\n            }\n        }\n\n        exchangeCodeAsync(exchangeConfig, discovery)\n            .then(a => {\n                setTokenResponse(a)\n            })\n            .catch((err) => {\n                setTokenResponse(undefined)\n            })\n\n    }, [request?.codeVerifier, response, discovery]);\n\n    useEffect(() => {\n        if (!discovery) {\n            return\n        }\n        if (tokenResponse?.shouldRefresh()) {\n            const refreshConfig = {\n                clientId: clientId,\n                scopes: Constants.manifest?.extra?.scopes,\n                extraParams: {}\n            }\n            tokenResponse?.refreshAsync(refreshConfig, discovery)\n                .then(resp => {\n                    setTokenResponse(resp)\n                })\n                .catch((err) => {\n                    setTokenResponse(undefined)\n                })\n        }\n    }, [tokenResponse?.shouldRefresh(), discovery])\n\n    useEffect(() => {\n        if (tokenResponse) {\n            if (!loggedIn) {\n                setLoggedIn(true)\n            }\n        } else {\n            if (loggedIn) {\n                setLoggedIn(false)\n            }\n        }\n    }, [tokenResponse, loggedIn])\n\n\n    useEffect(() => {\n        const interceptor = axiosInstance.interceptors.request.use(value => {\n            if (!tokenResponse?.accessToken) {\n                return value\n            }\n            if (!value.headers) {\n                value.headers = {}\n            }\n            value.headers[\"Authorization\"] = `Bearer ${tokenResponse.accessToken}`\n            return value\n        })\n        return () => {\n            axiosInstance.interceptors.request.eject(interceptor)\n        }\n    }, [tokenResponse?.accessToken])\n\n    const handleLogin = useCallback(() => {\n        promptAsync({useProxy}).then(response => {\n            console.log(\"PROMPT RESPONSE\", response)\n        }).catch((err) => {\n            console.log(\"PROMPT ERROR\", err)\n        })\n    }, [useProxy, promptAsync])\n\n    if (!loggedIn) {\n        return (\n            <Button\n                title={\"Login\"}\n                disabled={!request}\n                onPress={handleLogin}\n            />\n        )\n    }\n    return (\n        <Fragment>\n            {children}\n        </Fragment>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}